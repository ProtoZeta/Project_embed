
project_embed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  200000a0  08008dc8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08008dc8  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beb4  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003739  00000000  00000000  0003bf84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  0003f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00040cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002492a  00000000  00000000  00042188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001262a  00000000  00000000  00066ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d353d  00000000  00000000  000790dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e0  00000000  00000000  0014c694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ca0 	.word	0x08008ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08008ca0 	.word	0x08008ca0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fe49 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f917 	bl	80007bc <SystemClock_Config>
//  TM_DISCO_LedInit();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fae9 	bl	8000b64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f97d 	bl	8000890 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000596:	f000 f9a9 	bl	80008ec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059a:	f007 fc31 	bl	8007e00 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800059e:	f000 f9db 	bl	8000958 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005a2:	f000 fa29 	bl	80009f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fab3 	bl	8000b10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	4877      	ldr	r0, [pc, #476]	; (800078c <main+0x20c>)
 80005b0:	f001 f974 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4874      	ldr	r0, [pc, #464]	; (800078c <main+0x20c>)
 80005ba:	f001 f96f 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4872      	ldr	r0, [pc, #456]	; (8000790 <main+0x210>)
 80005c6:	f001 f969 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	486f      	ldr	r0, [pc, #444]	; (8000790 <main+0x210>)
 80005d2:	f001 f963 	bl	800189c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim3);
 80005d6:	486f      	ldr	r0, [pc, #444]	; (8000794 <main+0x214>)
 80005d8:	f003 fc09 	bl	8003dee <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005dc:	2100      	movs	r1, #0
 80005de:	486d      	ldr	r0, [pc, #436]	; (8000794 <main+0x214>)
 80005e0:	f003 fc5e 	bl	8003ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005e4:	2108      	movs	r1, #8
 80005e6:	486b      	ldr	r0, [pc, #428]	; (8000794 <main+0x214>)
 80005e8:	f003 fc5a 	bl	8003ea0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ec:	f007 fc2e 	bl	8007e4c <MX_USB_HOST_Process>
//    		if (TM_DS18B20_Read(&OW2, DS_ROM2, &temp2)){
//    			TM_DS18B20_StartAll(&OW2);
//    		}
//    	}
//    }
    int t = (int) temp;
 80005f0:	4b69      	ldr	r3, [pc, #420]	; (8000798 <main+0x218>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fa:	ee17 3a90 	vmov	r3, s15
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    int t2 = (int) temp2;
 8000600:	4b66      	ldr	r3, [pc, #408]	; (800079c <main+0x21c>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800060a:	ee17 3a90 	vmov	r3, s15
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
    //////////////////////////////////Receive///////////////////////////////
    HAL_UART_Receive(&huart2, buf, 4, 1000);
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	2204      	movs	r2, #4
 8000616:	4962      	ldr	r1, [pc, #392]	; (80007a0 <main+0x220>)
 8000618:	4862      	ldr	r0, [pc, #392]	; (80007a4 <main+0x224>)
 800061a:	f004 fa6f 	bl	8004afc <HAL_UART_Receive>
    if (buf[1] == 't') {
 800061e:	4b60      	ldr	r3, [pc, #384]	; (80007a0 <main+0x220>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	2b74      	cmp	r3, #116	; 0x74
 8000624:	d11b      	bne.n	800065e <main+0xde>
    	char TEMP[2];
    	TEMP[0] = buf[2];
 8000626:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <main+0x220>)
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	723b      	strb	r3, [r7, #8]
    	TEMP[1] = buf[3]; ///////////////////////////////////////////////
 800062c:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <main+0x220>)
 800062e:	78db      	ldrb	r3, [r3, #3]
 8000630:	727b      	strb	r3, [r7, #9]
    	int t;
    	t = ((buf[2] - '0') * 10) + (buf[3] - '0');
 8000632:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <main+0x220>)
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	461a      	mov	r2, r3
 8000644:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <main+0x220>)
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	3b30      	subs	r3, #48	; 0x30
 800064a:	4413      	add	r3, r2
 800064c:	61fb      	str	r3, [r7, #28]
//    	sscanf(TEMP, '%d', &t);
    	if (mode == 1) {
 800064e:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <main+0x228>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d176      	bne.n	8000744 <main+0x1c4>
    		current_desired_temp = t;
 8000656:	4a55      	ldr	r2, [pc, #340]	; (80007ac <main+0x22c>)
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	e072      	b.n	8000744 <main+0x1c4>
    	}

    }else if(buf[1] == 'r') {
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <main+0x220>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	2b72      	cmp	r3, #114	; 0x72
 8000664:	d11b      	bne.n	800069e <main+0x11e>
    	char ROTATE[2];
    	ROTATE[0] = buf[2];
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <main+0x220>)
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	713b      	strb	r3, [r7, #4]
    	ROTATE[1] = buf[3];
 800066c:	4b4c      	ldr	r3, [pc, #304]	; (80007a0 <main+0x220>)
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	717b      	strb	r3, [r7, #5]
    	int r;
    	r =  ((buf[2] - '0') * 10) + (buf[3] - '0');
 8000672:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <main+0x220>)
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800067a:	4613      	mov	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4413      	add	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <main+0x220>)
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	3b30      	subs	r3, #48	; 0x30
 800068a:	4413      	add	r3, r2
 800068c:	623b      	str	r3, [r7, #32]
//    	sscanf(ROTATE, '%d', &r);
    	if (mode == 2) {
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <main+0x228>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d156      	bne.n	8000744 <main+0x1c4>
    		current_rotate = r;
 8000696:	4a46      	ldr	r2, [pc, #280]	; (80007b0 <main+0x230>)
 8000698:	6a3b      	ldr	r3, [r7, #32]
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	e052      	b.n	8000744 <main+0x1c4>
    	}
    }else if(buf[1] == 'p') {
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <main+0x220>)
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	2b70      	cmp	r3, #112	; 0x70
 80006a4:	d11b      	bne.n	80006de <main+0x15e>
    	char PUMP[2];
    	PUMP[0] = buf[2];
 80006a6:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <main+0x220>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	703b      	strb	r3, [r7, #0]
    	PUMP[1] = buf[3];
 80006ac:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <main+0x220>)
 80006ae:	78db      	ldrb	r3, [r3, #3]
 80006b0:	707b      	strb	r3, [r7, #1]
    	int p;
    	p = ((buf[2] - '0') * 10) + (buf[3] - '0');
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <main+0x220>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <main+0x220>)
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	3b30      	subs	r3, #48	; 0x30
 80006ca:	4413      	add	r3, r2
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
//    	sscanf(PUMP, '%d', &p);
    	if (mode == 2) {
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <main+0x228>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d136      	bne.n	8000744 <main+0x1c4>
    		current_pump = p;
 80006d6:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <main+0x234>)
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e032      	b.n	8000744 <main+0x1c4>
    	}
    }else if(buf[1] == 'M'){
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <main+0x220>)
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	2b4d      	cmp	r3, #77	; 0x4d
 80006e4:	d10b      	bne.n	80006fe <main+0x17e>
    	if (mode == 1) {
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <main+0x228>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d103      	bne.n	80006f6 <main+0x176>
    		mode = 2;
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <main+0x228>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e026      	b.n	8000744 <main+0x1c4>
    	} else {
    		mode = 1;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <main+0x228>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e022      	b.n	8000744 <main+0x1c4>
    	}
    }
    else if (buf[1] == 'm') {
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <main+0x220>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b6d      	cmp	r3, #109	; 0x6d
 8000704:	d11e      	bne.n	8000744 <main+0x1c4>
    	if(mode == 1) {
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <main+0x228>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d103      	bne.n	8000716 <main+0x196>
    		mode = 3;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <main+0x228>)
 8000710:	2203      	movs	r2, #3
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e016      	b.n	8000744 <main+0x1c4>
    	} else if (mode == 3) {
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <main+0x228>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d103      	bne.n	8000726 <main+0x1a6>
    		mode = 1;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <main+0x228>)
 8000720:	2201      	movs	r2, #1
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	e00e      	b.n	8000744 <main+0x1c4>
    	} else if (mode == 2) {
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <main+0x228>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d103      	bne.n	8000736 <main+0x1b6>
    		mode = 4;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <main+0x228>)
 8000730:	2204      	movs	r2, #4
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e006      	b.n	8000744 <main+0x1c4>
    	} else if (mode == 4) {
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <main+0x228>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d102      	bne.n	8000744 <main+0x1c4>
    		mode = 2;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <main+0x228>)
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
//	  current_pump = p;
//  }

  ///////////////////////////////////TRANSMIT/////////////////////////////////
  char buffer[16];
  sprintf(buffer, "%d.%d.%d.%d.%d.", mode,current_desired_temp,current_desired_temp,current_rotate, current_pump);
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <main+0x228>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <main+0x22c>)
 800074a:	681d      	ldr	r5, [r3, #0]
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x22c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <main+0x230>)
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	4917      	ldr	r1, [pc, #92]	; (80007b4 <main+0x234>)
 8000756:	6809      	ldr	r1, [r1, #0]
 8000758:	f107 000c 	add.w	r0, r7, #12
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	462b      	mov	r3, r5
 8000764:	4622      	mov	r2, r4
 8000766:	4914      	ldr	r1, [pc, #80]	; (80007b8 <main+0x238>)
 8000768:	f007 ff4c 	bl	8008604 <siprintf>
  HAL_UART_Transmit(&huart2, buffer,strlen(buffer), 1000);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd2d 	bl	80001d0 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f107 010c 	add.w	r1, r7, #12
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0x224>)
 8000784:	f004 f921 	bl	80049ca <HAL_UART_Transmit>
  {
 8000788:	e730      	b.n	80005ec <main+0x6c>
 800078a:	bf00      	nop
 800078c:	40020400 	.word	0x40020400
 8000790:	40020800 	.word	0x40020800
 8000794:	2000015c 	.word	0x2000015c
 8000798:	20000158 	.word	0x20000158
 800079c:	200000e0 	.word	0x200000e0
 80007a0:	200001f4 	.word	0x200001f4
 80007a4:	2000025c 	.word	0x2000025c
 80007a8:	20000000 	.word	0x20000000
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004
 80007b8:	08008cb8 	.word	0x08008cb8

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f007 fe5a 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a27      	ldr	r2, [pc, #156]	; (8000888 <SystemClock_Config+0xcc>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <SystemClock_Config+0xd0>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000830:	23a8      	movs	r3, #168	; 0xa8
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fde3 	bl	800340c <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800084c:	f000 faa8 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2105      	movs	r1, #5
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f83c 	bl	80038ec <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087a:	f000 fa91 	bl	8000da0 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x50>)
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_I2C1_Init+0x54>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C1_Init+0x50>)
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x58>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_I2C1_Init+0x50>)
 80008ce:	f002 fc65 	bl	800319c <HAL_I2C_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 fa62 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	40005400 	.word	0x40005400
 80008e8:	000186a0 	.word	0x000186a0

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI1_Init+0x64>)
 800093e:	f003 f9c7 	bl	8003cd0 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 fa2a 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000204 	.word	0x20000204
 8000954:	40013000 	.word	0x40013000

08000958 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_TIM1_Init+0x9c>)
 8000978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009a0:	f003 f9fa 	bl	8003d98 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 f9f9 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009bc:	f003 fb74 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80009c6:	f000 f9eb 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009d8:	f003 ff2e 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009e2:	f000 f9dd 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001b4 	.word	0x200001b4
 80009f4:	40010000 	.word	0x40010000

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a2a:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <MX_TIM3_Init+0x114>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8000a2e:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a30:	22a7      	movs	r2, #167	; 0xa7
 8000a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a3c:	2263      	movs	r2, #99	; 0x63
 8000a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a4e:	f003 f9a3 	bl	8003d98 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000a58:	f000 f9a2 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4827      	ldr	r0, [pc, #156]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a6a:	f003 fb1d 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000a74:	f000 f994 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a78:	4823      	ldr	r0, [pc, #140]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a7a:	f003 f9dc 	bl	8003e36 <HAL_TIM_PWM_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a84:	f000 f98c 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4619      	mov	r1, r3
 8000a96:	481c      	ldr	r0, [pc, #112]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000a98:	f003 fece 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000aa2:	f000 f97d 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	2360      	movs	r3, #96	; 0x60
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000abe:	f003 fa2d 	bl	8003f1c <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ac8:	f000 f96a 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2208      	movs	r2, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000ad4:	f003 fa22 	bl	8003f1c <HAL_TIM_PWM_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000ade:	f000 f95f 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	220c      	movs	r2, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000aea:	f003 fa17 	bl	8003f1c <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000af4:	f000 f954 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM3_Init+0x110>)
 8000afa:	f000 fa49 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000afe:	bf00      	nop
 8000b00:	3738      	adds	r7, #56	; 0x38
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000015c 	.word	0x2000015c
 8000b0c:	40000400 	.word	0x40000400

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f003 fef2 	bl	8004930 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f925 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000025c 	.word	0x2000025c
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b81      	ldr	r3, [pc, #516]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a80      	ldr	r2, [pc, #512]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a79      	ldr	r2, [pc, #484]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a72      	ldr	r2, [pc, #456]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b70      	ldr	r3, [pc, #448]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a6b      	ldr	r2, [pc, #428]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b69      	ldr	r3, [pc, #420]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a64      	ldr	r2, [pc, #400]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	4858      	ldr	r0, [pc, #352]	; (8000d88 <MX_GPIO_Init+0x224>)
 8000c28:	f000 fe38 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4856      	ldr	r0, [pc, #344]	; (8000d8c <MX_GPIO_Init+0x228>)
 8000c32:	f000 fe33 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c36:	2200      	movs	r2, #0
 8000c38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c3c:	4854      	ldr	r0, [pc, #336]	; (8000d90 <MX_GPIO_Init+0x22c>)
 8000c3e:	f000 fe2d 	bl	800189c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c42:	2308      	movs	r3, #8
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	484b      	ldr	r0, [pc, #300]	; (8000d88 <MX_GPIO_Init+0x224>)
 8000c5a:	f000 fc85 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4845      	ldr	r0, [pc, #276]	; (8000d8c <MX_GPIO_Init+0x228>)
 8000c76:	f000 fc77 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	483d      	ldr	r0, [pc, #244]	; (8000d8c <MX_GPIO_Init+0x228>)
 8000c96:	f000 fc67 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_GPIO_Init+0x230>)
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	483a      	ldr	r0, [pc, #232]	; (8000d98 <MX_GPIO_Init+0x234>)
 8000cae:	f000 fc5b 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4832      	ldr	r0, [pc, #200]	; (8000d98 <MX_GPIO_Init+0x234>)
 8000cce:	f000 fc4b 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <MX_GPIO_Init+0x238>)
 8000ce6:	f000 fc3f 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4825      	ldr	r0, [pc, #148]	; (8000d9c <MX_GPIO_Init+0x238>)
 8000d08:	f000 fc2e 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d0c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d10:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481a      	ldr	r0, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x22c>)
 8000d26:	f000 fc1f 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d2a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_GPIO_Init+0x228>)
 8000d48:	f000 fc0e 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_GPIO_Init+0x22c>)
 8000d60:	f000 fc02 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_GPIO_Init+0x230>)
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_GPIO_Init+0x224>)
 8000d78:	f000 fbf6 	bl	8001568 <HAL_GPIO_Init>

}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	10120000 	.word	0x10120000
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e50:	2304      	movs	r3, #4
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <HAL_I2C_MspInit+0x8c>)
 8000e5c:	f000 fb84 	bl	8001568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_SPI_MspInit+0x84>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d12b      	bne.n	8000f0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eea:	23e0      	movs	r3, #224	; 0xe0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efa:	2305      	movs	r3, #5
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_SPI_MspInit+0x8c>)
 8000f06:	f000 fb2f 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_TIM_Base_MspInit+0x64>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10e      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f4e:	e012      	b.n	8000f76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_TIM_Base_MspInit+0x6c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_TIM_Base_MspInit+0x68>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40000400 	.word	0x40000400

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <HAL_TIM_MspPostInit+0xa4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d13c      	bne.n	800102c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_MspPostInit+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000fea:	2312      	movs	r3, #18
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <HAL_TIM_MspPostInit+0xac>)
 8001006:	f000 faaf 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800101c:	2302      	movs	r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_TIM_MspPostInit+0xb0>)
 8001028:	f000 fa9e 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40000400 	.word	0x40000400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_UART_MspInit+0x84>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12b      	bne.n	80010be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_MspInit+0x88>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0x88>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109e:	230c      	movs	r3, #12
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_MspInit+0x8c>)
 80010ba:	f000 fa55 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40004400 	.word	0x40004400
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 f8ca 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f000 fe4f 	bl	8001dd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000670 	.word	0x20000670

08001144 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x50>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x16>
		heap_end = &end;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <_sbrk+0x50>)
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <_sbrk+0x54>)
 8001158:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <_sbrk+0x50>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <_sbrk+0x50>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	466a      	mov	r2, sp
 800116a:	4293      	cmp	r3, r2
 800116c:	d907      	bls.n	800117e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800116e:	f007 f94f 	bl	8008410 <__errno>
 8001172:	4602      	mov	r2, r0
 8001174:	230c      	movs	r3, #12
 8001176:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	e006      	b.n	800118c <_sbrk+0x48>
	}

	heap_end += incr;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <_sbrk+0x50>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a03      	ldr	r2, [pc, #12]	; (8001194 <_sbrk+0x50>)
 8001188:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000bc 	.word	0x200000bc
 8001198:	20000938 	.word	0x20000938

0800119c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <SystemInit+0x28>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <SystemInit+0x28>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SystemInit+0x28>)
 80011b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b6:	609a      	str	r2, [r3, #8]
#endif
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ce:	e003      	b.n	80011d8 <LoopCopyDataInit>

080011d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011d6:	3104      	adds	r1, #4

080011d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011e0:	d3f6      	bcc.n	80011d0 <CopyDataInit>
  ldr  r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011e4:	e002      	b.n	80011ec <LoopFillZerobss>

080011e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011e8:	f842 3b04 	str.w	r3, [r2], #4

080011ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011f0:	d3f9      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd3 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f007 f911 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff f9c1 	bl	8000580 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001204:	08008d28 	.word	0x08008d28
  ldr  r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800120c:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8001210:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001214:	20000938 	.word	0x20000938

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94d 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fdae 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f965 	bl	800154e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92d 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000010 	.word	0x20000010
 80012b8:	20000018 	.word	0x20000018
 80012bc:	20000014 	.word	0x20000014

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000018 	.word	0x20000018
 80012e4:	200002a0 	.word	0x200002a0

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200002a0 	.word	0x200002a0

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_Delay+0x40>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000018 	.word	0x20000018

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e16b      	b.n	800185c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 815a 	bne.w	8001856 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d00b      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b6:	2b11      	cmp	r3, #17
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d130      	bne.n	8001624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0xfc>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80b4 	beq.w	8001856 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_GPIO_Init+0x308>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a5e      	ldr	r2, [pc, #376]	; (8001870 <HAL_GPIO_Init+0x308>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_GPIO_Init+0x308>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_GPIO_Init+0x30c>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a51      	ldr	r2, [pc, #324]	; (8001878 <HAL_GPIO_Init+0x310>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a50      	ldr	r2, [pc, #320]	; (800187c <HAL_GPIO_Init+0x314>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4f      	ldr	r2, [pc, #316]	; (8001880 <HAL_GPIO_Init+0x318>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_GPIO_Init+0x31c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x21a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x320>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x216>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_GPIO_Init+0x324>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_GPIO_Init+0x328>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x32c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x20a>
 800176e:	2307      	movs	r3, #7
 8001770:	e00e      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001772:	2308      	movs	r3, #8
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001776:	2306      	movs	r3, #6
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4934      	ldr	r1, [pc, #208]	; (8001874 <HAL_GPIO_Init+0x30c>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_GPIO_Init+0x330>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d2:	4a31      	ldr	r2, [pc, #196]	; (8001898 <HAL_GPIO_Init+0x330>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x330>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_GPIO_Init+0x330>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_GPIO_Init+0x330>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_GPIO_Init+0x330>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_Init+0x330>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_GPIO_Init+0x330>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f ae90 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	3724      	adds	r7, #36	; 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800
 8001874:	40013800 	.word	0x40013800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021000 	.word	0x40021000
 800188c:	40021400 	.word	0x40021400
 8001890:	40021800 	.word	0x40021800
 8001894:	40021c00 	.word	0x40021c00
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d0:	b08f      	sub	sp, #60	; 0x3c
 80018d2:	af0a      	add	r7, sp, #40	; 0x28
 80018d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e054      	b.n	800198a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f006 fade 	bl	8007ebc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2203      	movs	r2, #3
 8001904:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fdca 	bl	80054b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	687e      	ldr	r6, [r7, #4]
 800192c:	466d      	mov	r5, sp
 800192e:	f106 0410 	add.w	r4, r6, #16
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800193e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001942:	1d33      	adds	r3, r6, #4
 8001944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f003 fd44 	bl	80053d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fdc1 	bl	80054da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	687e      	ldr	r6, [r7, #4]
 8001960:	466d      	mov	r5, sp
 8001962:	f106 0410 	add.w	r4, r6, #16
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001972:	e885 0003 	stmia.w	r5, {r0, r1}
 8001976:	1d33      	adds	r3, r6, #4
 8001978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f003 fed4 	bl	8005728 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001992 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b089      	sub	sp, #36	; 0x24
 8001996:	af04      	add	r7, sp, #16
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	4608      	mov	r0, r1
 800199c:	4611      	mov	r1, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	70fb      	strb	r3, [r7, #3]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70bb      	strb	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_HCD_HC_Init+0x28>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e07f      	b.n	8001aba <HAL_HCD_HC_Init+0x128>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	333d      	adds	r3, #61	; 0x3d
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3338      	adds	r3, #56	; 0x38
 80019e6:	787a      	ldrb	r2, [r7, #1]
 80019e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	3340      	adds	r3, #64	; 0x40
 80019fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019fc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3339      	adds	r3, #57	; 0x39
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	333f      	adds	r3, #63	; 0x3f
 8001a22:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	78bb      	ldrb	r3, [r7, #2]
 8001a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a30:	b2d8      	uxtb	r0, r3
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	333a      	adds	r3, #58	; 0x3a
 8001a40:	4602      	mov	r2, r0
 8001a42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da0a      	bge.n	8001a62 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	333b      	adds	r3, #59	; 0x3b
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e009      	b.n	8001a76 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	333b      	adds	r3, #59	; 0x3b
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	333c      	adds	r3, #60	; 0x3c
 8001a86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a8a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	787c      	ldrb	r4, [r7, #1]
 8001a92:	78ba      	ldrb	r2, [r7, #2]
 8001a94:	78f9      	ldrb	r1, [r7, #3]
 8001a96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f003 ffc0 	bl	8005a2c <USB_HC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_HCD_HC_Halt+0x1e>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e00f      	b.n	8001b00 <HAL_HCD_HC_Halt+0x3e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 f9fa 	bl	8005eea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	70fb      	strb	r3, [r7, #3]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70bb      	strb	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	333b      	adds	r3, #59	; 0x3b
 8001b32:	78ba      	ldrb	r2, [r7, #2]
 8001b34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	333f      	adds	r3, #63	; 0x3f
 8001b46:	787a      	ldrb	r2, [r7, #1]
 8001b48:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b4a:	7c3b      	ldrb	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3342      	adds	r3, #66	; 0x42
 8001b60:	2203      	movs	r2, #3
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e009      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3342      	adds	r3, #66	; 0x42
 8001b76:	2202      	movs	r2, #2
 8001b78:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	f200 80d6 	bhi.w	8001d2e <HAL_HCD_HC_SubmitRequest+0x226>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001d19 	.word	0x08001d19
 8001b90:	08001c05 	.word	0x08001c05
 8001b94:	08001c8f 	.word	0x08001c8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b98:	7c3b      	ldrb	r3, [r7, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 80c9 	bne.w	8001d32 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80c5 	bne.w	8001d32 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001ba8:	8b3b      	ldrh	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3351      	adds	r3, #81	; 0x51
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3351      	adds	r3, #81	; 0x51
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3342      	adds	r3, #66	; 0x42
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bec:	e0a1      	b.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3342      	adds	r3, #66	; 0x42
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
      break;
 8001c02:	e096      	b.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c04:	78bb      	ldrb	r3, [r7, #2]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d120      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3351      	adds	r3, #81	; 0x51
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10a      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3342      	adds	r3, #66	; 0x42
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c34:	e07e      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      break;
 8001c4a:	e073      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3342      	adds	r3, #66	; 0x42
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
      break;
 8001c76:	e05d      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3342      	adds	r3, #66	; 0x42
 8001c88:	2202      	movs	r2, #2
 8001c8a:	701a      	strb	r2, [r3, #0]
      break;
 8001c8c:	e052      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c8e:	78bb      	ldrb	r3, [r7, #2]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d120      	bne.n	8001cd6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3351      	adds	r3, #81	; 0x51
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3342      	adds	r3, #66	; 0x42
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cbe:	e039      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3342      	adds	r3, #66	; 0x42
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	701a      	strb	r2, [r3, #0]
      break;
 8001cd4:	e02e      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3342      	adds	r3, #66	; 0x42
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
      break;
 8001d00:	e018      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	3342      	adds	r3, #66	; 0x42
 8001d12:	2202      	movs	r2, #2
 8001d14:	701a      	strb	r2, [r3, #0]
      break;
 8001d16:	e00d      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3342      	adds	r3, #66	; 0x42
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
      break;
 8001d2c:	e002      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001d32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	3344      	adds	r3, #68	; 0x44
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	8b39      	ldrh	r1, [r7, #24]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4403      	add	r3, r0
 8001d58:	3348      	adds	r3, #72	; 0x48
 8001d5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	335c      	adds	r3, #92	; 0x5c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	334c      	adds	r3, #76	; 0x4c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	3339      	adds	r3, #57	; 0x39
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	335d      	adds	r3, #93	; 0x5d
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	3338      	adds	r3, #56	; 0x38
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	18d1      	adds	r1, r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f003 ff3a 	bl	8005c40 <USB_HC_StartXfer>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fc57 	bl	80056a2 <USB_GetMode>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f040 80f1 	bne.w	8001fde <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fc3b 	bl	800567c <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80e7 	beq.w	8001fdc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fc32 	bl	800567c <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e22:	d104      	bne.n	8001e2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fc22 	bl	800567c <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e42:	d104      	bne.n	8001e4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fc12 	bl	800567c <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e62:	d104      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fc02 	bl	800567c <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d103      	bne.n	8001e8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fbf4 	bl	800567c <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e9e:	d117      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001eae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f006 f87f 	bl	8007fb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fced 	bl	80058a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fbd1 	bl	800567c <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d102      	bne.n	8001eec <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 f8c8 	bl	800307c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fbc3 	bl	800567c <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d106      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f006 f83d 	bl	8007f80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fbb2 	bl	800567c <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f22:	d138      	bne.n	8001f96 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 ffcd 	bl	8005ec8 <USB_HC_ReadInterrupt>
 8001f2e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e025      	b.n	8001f82 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d018      	beq.n	8001f7c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f60:	d106      	bne.n	8001f70 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8cf 	bl	800210c <HCD_HC_IN_IRQHandler>
 8001f6e:	e005      	b.n	8001f7c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fc5f 	bl	800283a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3d4      	bcc.n	8001f36 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fb6e 	bl	800567c <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d101      	bne.n	8001fae <HAL_HCD_IRQHandler+0x1d6>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_HCD_IRQHandler+0x1d8>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d014      	beq.n	8001fde <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 ffad 	bl	8002f24 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	e000      	b.n	8001fde <HAL_HCD_IRQHandler+0x206>
      return;
 8001fdc:	bf00      	nop
    }
  }
}
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_HCD_Start+0x16>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e013      	b.n	8002022 <HAL_HCD_Start+0x3e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fa45 	bl	8005496 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fca8 	bl	8005968 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_HCD_Stop+0x16>
 800203c:	2302      	movs	r3, #2
 800203e:	e00d      	b.n	800205c <HAL_HCD_Stop+0x32>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f004 f887 	bl	8006160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fc4f 	bl	8005914 <USB_ResetPort>
 8002076:	4603      	mov	r3, r0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	334c      	adds	r3, #76	; 0x4c
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fc91 	bl	8005a08 <USB_GetCurrentFrame>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fc6c 	bl	80059da <USB_GetHostSpeed>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d119      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2304      	movs	r3, #4
 800214c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	0151      	lsls	r1, r2, #5
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	440a      	add	r2, r1
 8002164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	60d3      	str	r3, [r2, #12]
 800216e:	e095      	b.n	800229c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d109      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2320      	movs	r3, #32
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e080      	b.n	800229c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d134      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	0151      	lsls	r1, r2, #5
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	440a      	add	r2, r1
 80021c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	335d      	adds	r3, #93	; 0x5d
 80021e0:	2205      	movs	r2, #5
 80021e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2310      	movs	r3, #16
 80021f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	2308      	movs	r3, #8
 8002206:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fe69 	bl	8005eea <USB_HC_Halt>
 8002218:	e040      	b.n	800229c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002230:	d134      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fe44 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2310      	movs	r3, #16
 8002272:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	335d      	adds	r3, #93	; 0x5d
 8002284:	2208      	movs	r2, #8
 8002286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d122      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	0151      	lsls	r1, r2, #5
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	440a      	add	r2, r1
 80022ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fe03 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022f8:	e29b      	b.n	8002832 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 80c1 	bne.w	8002494 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01b      	beq.n	8002352 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3348      	adds	r3, #72	; 0x48
 800232a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	0159      	lsls	r1, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	440b      	add	r3, r1
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800233e:	1ad1      	subs	r1, r2, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4403      	add	r3, r0
 800234e:	334c      	adds	r3, #76	; 0x4c
 8002350:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	335d      	adds	r3, #93	; 0x5d
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	3358      	adds	r3, #88	; 0x58
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2301      	movs	r3, #1
 800238a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	333f      	adds	r3, #63	; 0x3f
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	333f      	adds	r3, #63	; 0x3f
 80023b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d121      	bne.n	80023fc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	0151      	lsls	r1, r2, #5
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	440a      	add	r2, r1
 80023ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fd81 	bl	8005eea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	6093      	str	r3, [r2, #8]
 80023fa:	e034      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	333f      	adds	r3, #63	; 0x3f
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d129      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	440a      	add	r2, r1
 8002428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002430:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	335c      	adds	r3, #92	; 0x5c
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	335c      	adds	r3, #92	; 0x5c
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4601      	mov	r1, r0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f005 fdb7 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3350      	adds	r3, #80	; 0x50
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2d8      	uxtb	r0, r3
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3350      	adds	r3, #80	; 0x50
 800248e:	4602      	mov	r2, r0
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	e1ce      	b.n	8002832 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 80f1 	bne.w	800268e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c6:	f023 0302 	bic.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	335d      	adds	r3, #93	; 0x5d
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10a      	bne.n	80024f8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	335c      	adds	r3, #92	; 0x5c
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e0b0      	b.n	800265a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	335d      	adds	r3, #93	; 0x5d
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10a      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2205      	movs	r2, #5
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e09a      	b.n	800265a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	335d      	adds	r3, #93	; 0x5d
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d00a      	beq.n	8002550 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	335d      	adds	r3, #93	; 0x5d
 800254a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800254c:	2b08      	cmp	r3, #8
 800254e:	d156      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3358      	adds	r3, #88	; 0x58
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4403      	add	r3, r0
 8002572:	3358      	adds	r3, #88	; 0x58
 8002574:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	3358      	adds	r3, #88	; 0x58
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d914      	bls.n	80025b6 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3358      	adds	r3, #88	; 0x58
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	335c      	adds	r3, #92	; 0x5c
 80025b0:	2204      	movs	r2, #4
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e009      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	335c      	adds	r3, #92	; 0x5c
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e02d      	b.n	800265a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	335d      	adds	r3, #93	; 0x5d
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d122      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800263e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002646:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	461a      	mov	r2, r3
 8002668:	2302      	movs	r3, #2
 800266a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	b2d8      	uxtb	r0, r3
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	335c      	adds	r3, #92	; 0x5c
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4601      	mov	r1, r0
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 fca4 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800268c:	e0d1      	b.n	8002832 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d13e      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	3358      	adds	r3, #88	; 0x58
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4403      	add	r3, r0
 80026e6:	3358      	adds	r3, #88	; 0x58
 80026e8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	335d      	adds	r3, #93	; 0x5d
 80026fa:	2206      	movs	r2, #6
 80026fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f003 fbee 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	461a      	mov	r2, r3
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	6093      	str	r3, [r2, #8]
}
 8002720:	e087      	b.n	8002832 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d17c      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	333f      	adds	r3, #63	; 0x3f
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d122      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3358      	adds	r3, #88	; 0x58
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	440a      	add	r2, r1
 8002778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fbac 	bl	8005eea <USB_HC_Halt>
 8002792:	e045      	b.n	8002820 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	333f      	adds	r3, #63	; 0x3f
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	333f      	adds	r3, #63	; 0x3f
 80027ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d12f      	bne.n	8002820 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	3358      	adds	r3, #88	; 0x58
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d121      	bne.n	8002820 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	335d      	adds	r3, #93	; 0x5d
 80027ec:	2203      	movs	r2, #3
 80027ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fb65 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2310      	movs	r3, #16
 8002830:	6093      	str	r3, [r2, #8]
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b04      	cmp	r3, #4
 8002868:	d119      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	461a      	mov	r2, r3
 8002878:	2304      	movs	r3, #4
 800287a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	0151      	lsls	r1, r2, #5
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	440a      	add	r2, r1
 8002892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800289c:	e33e      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d141      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2320      	movs	r3, #32
 80028c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	333d      	adds	r3, #61	; 0x3d
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 831f 	bne.w	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	333d      	adds	r3, #61	; 0x3d
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	335c      	adds	r3, #92	; 0x5c
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fada 	bl	8005eea <USB_HC_Halt>
}
 8002936:	e2f1      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d13f      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	335d      	adds	r3, #93	; 0x5d
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	333d      	adds	r3, #61	; 0x3d
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3358      	adds	r3, #88	; 0x58
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	0151      	lsls	r1, r2, #5
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	440a      	add	r2, r1
 80029a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fa98 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	461a      	mov	r2, r3
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	6093      	str	r3, [r2, #8]
}
 80029cc:	e2a6      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e4:	d122      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fa6a 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a28:	6093      	str	r3, [r2, #8]
}
 8002a2a:	e277      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d135      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3358      	adds	r3, #88	; 0x58
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	0151      	lsls	r1, r2, #5
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	440a      	add	r2, r1
 8002a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fa32 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	461a      	mov	r2, r3
 8002a94:	2301      	movs	r3, #1
 8002a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335d      	adds	r3, #93	; 0x5d
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
}
 8002aac:	e236      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d12b      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	0151      	lsls	r1, r2, #5
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	440a      	add	r2, r1
 8002aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 f9f2 	bl	8005eea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	335d      	adds	r3, #93	; 0x5d
 8002b16:	2205      	movs	r2, #5
 8002b18:	701a      	strb	r2, [r3, #0]
}
 8002b1a:	e1ff      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d155      	bne.n	8002bde <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3358      	adds	r3, #88	; 0x58
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335d      	adds	r3, #93	; 0x5d
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	333d      	adds	r3, #61	; 0x3d
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d114      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333c      	adds	r3, #60	; 0x3c
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	333d      	adds	r3, #61	; 0x3d
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	0151      	lsls	r1, r2, #5
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	440a      	add	r2, r1
 8002bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 f990 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2310      	movs	r3, #16
 8002bda:	6093      	str	r3, [r2, #8]
}
 8002bdc:	e19e      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d12b      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	0151      	lsls	r1, r2, #5
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	440a      	add	r2, r1
 8002c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 f963 	bl	8005eea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	335d      	adds	r3, #93	; 0x5d
 8002c34:	2206      	movs	r2, #6
 8002c36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	e167      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d135      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f92b 	bl	8005eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	335d      	adds	r3, #93	; 0x5d
 8002cca:	2208      	movs	r2, #8
 8002ccc:	701a      	strb	r2, [r3, #0]
}
 8002cce:	e125      	b.n	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	f040 811a 	bne.w	8002f1c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	0151      	lsls	r1, r2, #5
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d02:	f023 0302 	bic.w	r3, r3, #2
 8002d06:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	335d      	adds	r3, #93	; 0x5d
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d137      	bne.n	8002d8e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	335c      	adds	r3, #92	; 0x5c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d00b      	beq.n	8002d60 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	333f      	adds	r3, #63	; 0x3f
 8002d58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	f040 80c5 	bne.w	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3351      	adds	r3, #81	; 0x51
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2d8      	uxtb	r0, r3
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	3351      	adds	r3, #81	; 0x51
 8002d88:	4602      	mov	r2, r0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e0ad      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335d      	adds	r3, #93	; 0x5d
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d10a      	bne.n	8002dba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	335c      	adds	r3, #92	; 0x5c
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e097      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	335d      	adds	r3, #93	; 0x5d
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d10a      	bne.n	8002de6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e081      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	335d      	adds	r3, #93	; 0x5d
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d10a      	bne.n	8002e12 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	335c      	adds	r3, #92	; 0x5c
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e06b      	b.n	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	335d      	adds	r3, #93	; 0x5d
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d00a      	beq.n	8002e3e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	335d      	adds	r3, #93	; 0x5d
 8002e38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d155      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3358      	adds	r3, #88	; 0x58
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1c59      	adds	r1, r3, #1
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4403      	add	r3, r0
 8002e60:	3358      	adds	r3, #88	; 0x58
 8002e62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3358      	adds	r3, #88	; 0x58
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d914      	bls.n	8002ea4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	3358      	adds	r3, #88	; 0x58
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	335c      	adds	r3, #92	; 0x5c
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e009      	b.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ece:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2302      	movs	r3, #2
 8002efa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b2d8      	uxtb	r0, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	335c      	adds	r3, #92	; 0x5c
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4601      	mov	r1, r0
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f005 f85c 	bl	8007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	0c5b      	lsrs	r3, r3, #17
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f58:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d003      	beq.n	8002f68 <HCD_RXQLVL_IRQHandler+0x44>
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	f000 8082 	beq.w	800306a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f66:	e083      	b.n	8003070 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d07f      	beq.n	800306e <HCD_RXQLVL_IRQHandler+0x14a>
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3344      	adds	r3, #68	; 0x44
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d074      	beq.n	800306e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	3344      	adds	r3, #68	; 0x44
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f002 fb43 	bl	800562a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3344      	adds	r3, #68	; 0x44
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	18d1      	adds	r1, r2, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4403      	add	r3, r0
 8002fc8:	3344      	adds	r3, #68	; 0x44
 8002fca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	334c      	adds	r3, #76	; 0x4c
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	18d1      	adds	r1, r2, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4403      	add	r3, r0
 8002ff0:	334c      	adds	r3, #76	; 0x4c
 8002ff2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HCD_RXQLVL_IRQHandler+0x154>)
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d031      	beq.n	800306e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003020:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003028:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	3350      	adds	r3, #80	; 0x50
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3350      	adds	r3, #80	; 0x50
 8003064:	4602      	mov	r2, r0
 8003066:	701a      	strb	r2, [r3, #0]
      break;
 8003068:	e001      	b.n	800306e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800306e:	bf00      	nop
  }
}
 8003070:	bf00      	nop
 8003072:	3728      	adds	r7, #40	; 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	1ff80000 	.word	0x1ff80000

0800307c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d113      	bne.n	80030dc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10a      	bne.n	80030d4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80030cc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f004 ff64 	bl	8007f9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d147      	bne.n	8003176 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d129      	bne.n	800314c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d113      	bne.n	8003128 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310a:	d106      	bne.n	800311a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fbc4 	bl	80058a0 <USB_InitFSLSPClkSel>
 8003118:	e011      	b.n	800313e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fbbd 	bl	80058a0 <USB_InitFSLSPClkSel>
 8003126:	e00a      	b.n	800313e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003136:	461a      	mov	r2, r3
 8003138:	f64e 2360 	movw	r3, #60000	; 0xea60
 800313c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f004 ff56 	bl	8007ff0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f004 ff29 	bl	8007f9c <HAL_HCD_Connect_Callback>
 800314a:	e014      	b.n	8003176 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f004 ff5d 	bl	800800c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003164:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003174:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b20      	cmp	r3, #32
 800317e:	d103      	bne.n	8003188 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e11f      	b.n	80033ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fe1c 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003200:	f000 fd3e 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a7b      	ldr	r2, [pc, #492]	; (80033f8 <HAL_I2C_Init+0x25c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d807      	bhi.n	8003220 <HAL_I2C_Init+0x84>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a7a      	ldr	r2, [pc, #488]	; (80033fc <HAL_I2C_Init+0x260>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e006      	b.n	800322e <HAL_I2C_Init+0x92>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a77      	ldr	r2, [pc, #476]	; (8003400 <HAL_I2C_Init+0x264>)
 8003224:	4293      	cmp	r3, r2
 8003226:	bf94      	ite	ls
 8003228:	2301      	movls	r3, #1
 800322a:	2300      	movhi	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0db      	b.n	80033ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_I2C_Init+0x268>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0c9b      	lsrs	r3, r3, #18
 8003240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a64      	ldr	r2, [pc, #400]	; (80033f8 <HAL_I2C_Init+0x25c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d802      	bhi.n	8003270 <HAL_I2C_Init+0xd4>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	e009      	b.n	8003284 <HAL_I2C_Init+0xe8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_I2C_Init+0x26c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	3301      	adds	r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4956      	ldr	r1, [pc, #344]	; (80033f8 <HAL_I2C_Init+0x25c>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d80d      	bhi.n	80032c0 <HAL_I2C_Init+0x124>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e59      	subs	r1, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	bf38      	it	cc
 80032bc:	2304      	movcc	r3, #4
 80032be:	e04f      	b.n	8003360 <HAL_I2C_Init+0x1c4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_I2C_Init+0x150>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e012      	b.n	8003312 <HAL_I2C_Init+0x176>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x17e>
 8003316:	2301      	movs	r3, #1
 8003318:	e022      	b.n	8003360 <HAL_I2C_Init+0x1c4>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <HAL_I2C_Init+0x1a4>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e58      	subs	r0, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	440b      	add	r3, r1
 8003330:	fbb0 f3f3 	udiv	r3, r0, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333e:	e00f      	b.n	8003360 <HAL_I2C_Init+0x1c4>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6911      	ldr	r1, [r2, #16]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	000186a0 	.word	0x000186a0
 80033fc:	001e847f 	.word	0x001e847f
 8003400:	003d08ff 	.word	0x003d08ff
 8003404:	431bde83 	.word	0x431bde83
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e25b      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d075      	beq.n	8003516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	4ba3      	ldr	r3, [pc, #652]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b04      	cmp	r3, #4
 8003434:	d00c      	beq.n	8003450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4ba0      	ldr	r3, [pc, #640]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343e:	2b08      	cmp	r3, #8
 8003440:	d112      	bne.n	8003468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4b9d      	ldr	r3, [pc, #628]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344e:	d10b      	bne.n	8003468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	4b99      	ldr	r3, [pc, #612]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05b      	beq.n	8003514 <HAL_RCC_OscConfig+0x108>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d157      	bne.n	8003514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e236      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x74>
 8003472:	4b91      	ldr	r3, [pc, #580]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a90      	ldr	r2, [pc, #576]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e01d      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a8a      	ldr	r2, [pc, #552]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a87      	ldr	r2, [pc, #540]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 80034a4:	4b84      	ldr	r3, [pc, #528]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a83      	ldr	r2, [pc, #524]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a80      	ldr	r2, [pc, #512]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd ff10 	bl	80012e8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd ff0c 	bl	80012e8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1fb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0xc0>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fefc 	bl	80012e8 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fd fef8 	bl	80012e8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1e7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	4b6c      	ldr	r3, [pc, #432]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0xe8>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d063      	beq.n	80035ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b62      	ldr	r3, [pc, #392]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003536:	2b08      	cmp	r3, #8
 8003538:	d11c      	bne.n	8003574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353a:	4b5f      	ldr	r3, [pc, #380]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	4b5c      	ldr	r3, [pc, #368]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_RCC_OscConfig+0x152>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e1bb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355e:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4952      	ldr	r1, [pc, #328]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	e03a      	b.n	80035ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357c:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <HAL_RCC_OscConfig+0x2b0>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd feb1 	bl	80012e8 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358a:	f7fd fead 	bl	80012e8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e19c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4940      	ldr	r1, [pc, #256]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	e015      	b.n	80035ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCC_OscConfig+0x2b0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fe90 	bl	80012e8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035cc:	f7fd fe8c 	bl	80012e8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e17b      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d030      	beq.n	8003658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x2b4>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fe70 	bl	80012e8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360c:	f7fd fe6c 	bl	80012e8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e15b      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x200>
 800362a:	e015      	b.n	8003658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_OscConfig+0x2b4>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003632:	f7fd fe59 	bl	80012e8 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363a:	f7fd fe55 	bl	80012e8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e144      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a0 	beq.w	80037a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x2b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d121      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_OscConfig+0x2b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_RCC_OscConfig+0x2b8>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fd fe1b 	bl	80012e8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e011      	b.n	80036da <HAL_RCC_OscConfig+0x2ce>
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	42470000 	.word	0x42470000
 80036c0:	42470e80 	.word	0x42470e80
 80036c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fd fe0e 	bl	80012e8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0fd      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x4d4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d106      	bne.n	80036fc <HAL_RCC_OscConfig+0x2f0>
 80036ee:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a7c      	ldr	r2, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	e01c      	b.n	8003736 <HAL_RCC_OscConfig+0x32a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10c      	bne.n	800371e <HAL_RCC_OscConfig+0x312>
 8003704:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a76      	ldr	r2, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a73      	ldr	r2, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0x32a>
 800371e:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a70      	ldr	r2, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a6d      	ldr	r2, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d015      	beq.n	800376a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd fdd3 	bl	80012e8 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fdcf 	bl	80012e8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0bc      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ee      	beq.n	8003746 <HAL_RCC_OscConfig+0x33a>
 8003768:	e014      	b.n	8003794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fd fdbd 	bl	80012e8 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fd fdb9 	bl	80012e8 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e0a6      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ee      	bne.n	8003772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8092 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b0:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d05c      	beq.n	8003876 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d141      	bne.n	8003848 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <HAL_RCC_OscConfig+0x4dc>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fd fd8d 	bl	80012e8 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd fd89 	bl	80012e8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e078      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	019b      	lsls	r3, r3, #6
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	4933      	ldr	r1, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <HAL_RCC_OscConfig+0x4dc>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fd62 	bl	80012e8 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd fd5e 	bl	80012e8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e04d      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x41c>
 8003846:	e045      	b.n	80038d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x4dc>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fd fd4b 	bl	80012e8 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003856:	f7fd fd47 	bl	80012e8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e036      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x44a>
 8003874:	e02e      	b.n	80038d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e029      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_RCC_OscConfig+0x4d8>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	429a      	cmp	r2, r3
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d115      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038aa:	4013      	ands	r3, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10d      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470060 	.word	0x42470060

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cc      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d90c      	bls.n	8003928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d119      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e067      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fd fc84 	bl	80012e8 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fd fc80 	bl	80012e8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d20c      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 f821 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fbe4 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023c00 	.word	0x40023c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08008ccc 	.word	0x08008ccc
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ace:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d007      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x32>
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d008      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80b4 	bne.w	8003c4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ae6:	60bb      	str	r3, [r7, #8]
       break;
 8003ae8:	e0b3      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b5e      	ldr	r3, [pc, #376]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003aec:	60bb      	str	r3, [r7, #8]
      break;
 8003aee:	e0b0      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b5a      	ldr	r3, [pc, #360]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b58      	ldr	r3, [pc, #352]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d04a      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b55      	ldr	r3, [pc, #340]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	ea03 0501 	and.w	r5, r3, r1
 8003b1c:	ea04 0602 	and.w	r6, r4, r2
 8003b20:	4629      	mov	r1, r5
 8003b22:	4632      	mov	r2, r6
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	0154      	lsls	r4, r2, #5
 8003b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b32:	014b      	lsls	r3, r1, #5
 8003b34:	4619      	mov	r1, r3
 8003b36:	4622      	mov	r2, r4
 8003b38:	1b49      	subs	r1, r1, r5
 8003b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	0194      	lsls	r4, r2, #6
 8003b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b4c:	018b      	lsls	r3, r1, #6
 8003b4e:	1a5b      	subs	r3, r3, r1
 8003b50:	eb64 0402 	sbc.w	r4, r4, r2
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	00e2      	lsls	r2, r4, #3
 8003b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b62:	00d9      	lsls	r1, r3, #3
 8003b64:	460b      	mov	r3, r1
 8003b66:	4614      	mov	r4, r2
 8003b68:	195b      	adds	r3, r3, r5
 8003b6a:	eb44 0406 	adc.w	r4, r4, r6
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	0262      	lsls	r2, r4, #9
 8003b78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b7c:	0259      	lsls	r1, r3, #9
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	4621      	mov	r1, r4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f04f 0400 	mov.w	r4, #0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	f7fc fb76 	bl	8000280 <__aeabi_uldivmod>
 8003b94:	4603      	mov	r3, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e049      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	ea03 0501 	and.w	r5, r3, r1
 8003bb2:	ea04 0602 	and.w	r6, r4, r2
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	4632      	mov	r2, r6
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f04f 0400 	mov.w	r4, #0
 8003bc2:	0154      	lsls	r4, r2, #5
 8003bc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bc8:	014b      	lsls	r3, r1, #5
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4622      	mov	r2, r4
 8003bce:	1b49      	subs	r1, r1, r5
 8003bd0:	eb62 0206 	sbc.w	r2, r2, r6
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	0194      	lsls	r4, r2, #6
 8003bde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003be2:	018b      	lsls	r3, r1, #6
 8003be4:	1a5b      	subs	r3, r3, r1
 8003be6:	eb64 0402 	sbc.w	r4, r4, r2
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bf8:	00d9      	lsls	r1, r3, #3
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	195b      	adds	r3, r3, r5
 8003c00:	eb44 0406 	adc.w	r4, r4, r6
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	02a2      	lsls	r2, r4, #10
 8003c0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c12:	0299      	lsls	r1, r3, #10
 8003c14:	460b      	mov	r3, r1
 8003c16:	4614      	mov	r4, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	461a      	mov	r2, r3
 8003c24:	4623      	mov	r3, r4
 8003c26:	f7fc fb2b 	bl	8000280 <__aeabi_uldivmod>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	60bb      	str	r3, [r7, #8]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c4e:	60bb      	str	r3, [r7, #8]
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	68bb      	ldr	r3, [r7, #8]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000010 	.word	0x20000010

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08008cdc 	.word	0x08008cdc

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cac:	f7ff ffdc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0b5b      	lsrs	r3, r3, #13
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08008cdc 	.word	0x08008cdc

08003cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e056      	b.n	8003d90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fd f8c7 	bl	8000e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	f003 0104 	and.w	r1, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e01d      	b.n	8003de6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd f8ae 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 fa1e 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d007      	beq.n	8003e20 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e01d      	b.n	8003e84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f815 	bl	8003e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 f9cf 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fc9a 	bl	80047ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_TIM_PWM_Start+0x74>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_PWM_Start+0x2c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <HAL_TIM_PWM_Start+0x78>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_PWM_Start+0x30>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0b4      	b.n	80040a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	f200 809f 	bhi.w	800408c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f4e:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003f89 	.word	0x08003f89
 8003f58:	0800408d 	.word	0x0800408d
 8003f5c:	0800408d 	.word	0x0800408d
 8003f60:	0800408d 	.word	0x0800408d
 8003f64:	08003fc9 	.word	0x08003fc9
 8003f68:	0800408d 	.word	0x0800408d
 8003f6c:	0800408d 	.word	0x0800408d
 8003f70:	0800408d 	.word	0x0800408d
 8003f74:	0800400b 	.word	0x0800400b
 8003f78:	0800408d 	.word	0x0800408d
 8003f7c:	0800408d 	.word	0x0800408d
 8003f80:	0800408d 	.word	0x0800408d
 8003f84:	0800404b 	.word	0x0800404b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f9e2 	bl	8004358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0208 	orr.w	r2, r2, #8
 8003fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	619a      	str	r2, [r3, #24]
      break;
 8003fc6:	e062      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa32 	bl	8004438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6999      	ldr	r1, [r3, #24]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	619a      	str	r2, [r3, #24]
      break;
 8004008:	e041      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fa87 	bl	8004524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0208 	orr.w	r2, r2, #8
 8004024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0204 	bic.w	r2, r2, #4
 8004034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69d9      	ldr	r1, [r3, #28]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]
      break;
 8004048:	e021      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fadb 	bl	800460c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	021a      	lsls	r2, r3, #8
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	61da      	str	r2, [r3, #28]
      break;
 800408a:	e000      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800408c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIM_ConfigClockSource+0x18>
 80040bc:	2302      	movs	r3, #2
 80040be:	e0a6      	b.n	800420e <HAL_TIM_ConfigClockSource+0x166>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d067      	beq.n	80041c8 <HAL_TIM_ConfigClockSource+0x120>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d80b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x6c>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d073      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0x140>
 8004100:	2b10      	cmp	r3, #16
 8004102:	d802      	bhi.n	800410a <HAL_TIM_ConfigClockSource+0x62>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d06f      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004108:	e078      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800410a:	2b20      	cmp	r3, #32
 800410c:	d06c      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0x140>
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	d06a      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004112:	e073      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d00d      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x8c>
 8004118:	2b70      	cmp	r3, #112	; 0x70
 800411a:	d804      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x7e>
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d033      	beq.n	8004188 <HAL_TIM_ConfigClockSource+0xe0>
 8004120:	2b60      	cmp	r3, #96	; 0x60
 8004122:	d041      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004124:	e06a      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d066      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x152>
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004130:	d017      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004132:	e063      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f000 fb32 	bl	80047ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004156:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]
      break;
 8004160:	e04c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f000 fb1b 	bl	80047ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004184:	609a      	str	r2, [r3, #8]
      break;
 8004186:	e039      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	461a      	mov	r2, r3
 8004196:	f000 fa8f 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2150      	movs	r1, #80	; 0x50
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fae8 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041a6:	e029      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	461a      	mov	r2, r3
 80041b6:	f000 faae 	bl	8004716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2160      	movs	r1, #96	; 0x60
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fad8 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041c6:	e019      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	461a      	mov	r2, r3
 80041d6:	f000 fa6f 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fac8 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041e6:	e009      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fabf 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041f8:	e000      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <TIM_Base_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d00f      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00b      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3a      	ldr	r2, [pc, #232]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <TIM_Base_SetConfig+0x114>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d027      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d023      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a29      	ldr	r2, [pc, #164]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d017      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a28      	ldr	r2, [pc, #160]	; (8004340 <TIM_Base_SetConfig+0x128>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a27      	ldr	r2, [pc, #156]	; (8004344 <TIM_Base_SetConfig+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a26      	ldr	r2, [pc, #152]	; (8004348 <TIM_Base_SetConfig+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <TIM_Base_SetConfig+0x134>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <TIM_Base_SetConfig+0x138>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <TIM_Base_SetConfig+0x13c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <TIM_Base_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0xf8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d103      	bne.n	8004318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	615a      	str	r2, [r3, #20]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40010400 	.word	0x40010400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800
 800434c:	40001800 	.word	0x40001800
 8004350:	40001c00 	.word	0x40001c00
 8004354:	40002000 	.word	0x40002000

08004358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 0302 	bic.w	r3, r3, #2
 80043a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <TIM_OC1_SetConfig+0xd8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC1_SetConfig+0x64>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <TIM_OC1_SetConfig+0xdc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10c      	bne.n	80043d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0308 	bic.w	r3, r3, #8
 80043c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <TIM_OC1_SetConfig+0xd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_OC1_SetConfig+0x8e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <TIM_OC1_SetConfig+0xdc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d111      	bne.n	800440a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400

08004438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0210 	bic.w	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0320 	bic.w	r3, r3, #32
 8004482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a22      	ldr	r2, [pc, #136]	; (800451c <TIM_OC2_SetConfig+0xe4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_OC2_SetConfig+0x68>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <TIM_OC2_SetConfig+0xe8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10d      	bne.n	80044bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <TIM_OC2_SetConfig+0xe4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC2_SetConfig+0x94>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <TIM_OC2_SetConfig+0xe8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d113      	bne.n	80044f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40010400 	.word	0x40010400

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800456c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a21      	ldr	r2, [pc, #132]	; (8004604 <TIM_OC3_SetConfig+0xe0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC3_SetConfig+0x66>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a20      	ldr	r2, [pc, #128]	; (8004608 <TIM_OC3_SetConfig+0xe4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10d      	bne.n	80045a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a16      	ldr	r2, [pc, #88]	; (8004604 <TIM_OC3_SetConfig+0xe0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC3_SetConfig+0x92>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <TIM_OC3_SetConfig+0xe4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d113      	bne.n	80045de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40010000 	.word	0x40010000
 8004608:	40010400 	.word	0x40010400

0800460c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <TIM_OC4_SetConfig+0xa4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC4_SetConfig+0x68>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <TIM_OC4_SetConfig+0xa8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400

080046b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 030a 	bic.w	r3, r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0210 	bic.w	r2, r3, #16
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	f043 0307 	orr.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2201      	movs	r2, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1a      	ldr	r2, [r3, #32]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e05a      	b.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a21      	ldr	r2, [pc, #132]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d01d      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d018      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a15      	ldr	r2, [pc, #84]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10c      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40010400 	.word	0x40010400
 8004928:	40014000 	.word	0x40014000
 800492c:	40001800 	.word	0x40001800

08004930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e03f      	b.n	80049c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc fb74 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9b1 	bl	8004cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af02      	add	r7, sp, #8
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	f040 8083 	bne.w	8004af2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Transmit+0x2e>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e07b      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Transmit+0x40>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e074      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2221      	movs	r2, #33	; 0x21
 8004a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a20:	f7fc fc62 	bl	80012e8 <HAL_GetTick>
 8004a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a3a:	e042      	b.n	8004ac2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d122      	bne.n	8004a9a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8f2 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e042      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	e017      	b.n	8004ac2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	e013      	b.n	8004ac2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8cf 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e01f      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	60ba      	str	r2, [r7, #8]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1b7      	bne.n	8004a3c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2140      	movs	r1, #64	; 0x40
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8b6 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e006      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	f040 8090 	bne.w	8004c3e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UART_Receive+0x2e>
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e088      	b.n	8004c40 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_UART_Receive+0x40>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e081      	b.n	8004c40 <HAL_UART_Receive+0x144>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2222      	movs	r2, #34	; 0x22
 8004b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fbc9 	bl	80012e8 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b6c:	e05c      	b.n	8004c28 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d12b      	bne.n	8004bde <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2120      	movs	r1, #32
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f859 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e04f      	b.n	8004c40 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10c      	bne.n	8004bc6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	e030      	b.n	8004c28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e024      	b.n	8004c28 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2120      	movs	r1, #32
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f82d 	bl	8004c48 <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e023      	b.n	8004c40 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d108      	bne.n	8004c12 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	60ba      	str	r2, [r7, #8]
 8004c0c:	b2ca      	uxtb	r2, r1
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e00a      	b.n	8004c28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d19d      	bne.n	8004b6e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	e02c      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d028      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c68:	f7fc fb3e 	bl	80012e8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d21d      	bcs.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e00f      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d0c3      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d1e:	f023 030c 	bic.w	r3, r3, #12
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4a:	f040 818b 	bne.w	8005064 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4ac1      	ldr	r2, [pc, #772]	; (8005058 <UART_SetConfig+0x37c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d005      	beq.n	8004d64 <UART_SetConfig+0x88>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4abf      	ldr	r2, [pc, #764]	; (800505c <UART_SetConfig+0x380>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	f040 80bd 	bne.w	8004ede <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe ffa0 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004d68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	f04f 0600 	mov.w	r6, #0
 8004d72:	46a8      	mov	r8, r5
 8004d74:	46b1      	mov	r9, r6
 8004d76:	eb18 0308 	adds.w	r3, r8, r8
 8004d7a:	eb49 0409 	adc.w	r4, r9, r9
 8004d7e:	4698      	mov	r8, r3
 8004d80:	46a1      	mov	r9, r4
 8004d82:	eb18 0805 	adds.w	r8, r8, r5
 8004d86:	eb49 0906 	adc.w	r9, r9, r6
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d9e:	4688      	mov	r8, r1
 8004da0:	4691      	mov	r9, r2
 8004da2:	eb18 0005 	adds.w	r0, r8, r5
 8004da6:	eb49 0106 	adc.w	r1, r9, r6
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	461d      	mov	r5, r3
 8004db0:	f04f 0600 	mov.w	r6, #0
 8004db4:	196b      	adds	r3, r5, r5
 8004db6:	eb46 0406 	adc.w	r4, r6, r6
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	f7fb fa5f 	bl	8000280 <__aeabi_uldivmod>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4ba5      	ldr	r3, [pc, #660]	; (8005060 <UART_SetConfig+0x384>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	f04f 0600 	mov.w	r6, #0
 8004ddc:	46a9      	mov	r9, r5
 8004dde:	46b2      	mov	sl, r6
 8004de0:	eb19 0309 	adds.w	r3, r9, r9
 8004de4:	eb4a 040a 	adc.w	r4, sl, sl
 8004de8:	4699      	mov	r9, r3
 8004dea:	46a2      	mov	sl, r4
 8004dec:	eb19 0905 	adds.w	r9, r9, r5
 8004df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e08:	4689      	mov	r9, r1
 8004e0a:	4692      	mov	sl, r2
 8004e0c:	eb19 0005 	adds.w	r0, r9, r5
 8004e10:	eb4a 0106 	adc.w	r1, sl, r6
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	461d      	mov	r5, r3
 8004e1a:	f04f 0600 	mov.w	r6, #0
 8004e1e:	196b      	adds	r3, r5, r5
 8004e20:	eb46 0406 	adc.w	r4, r6, r6
 8004e24:	461a      	mov	r2, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	f7fb fa2a 	bl	8000280 <__aeabi_uldivmod>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <UART_SetConfig+0x384>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a86      	ldr	r2, [pc, #536]	; (8005060 <UART_SetConfig+0x384>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e54:	4498      	add	r8, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	461d      	mov	r5, r3
 8004e5a:	f04f 0600 	mov.w	r6, #0
 8004e5e:	46a9      	mov	r9, r5
 8004e60:	46b2      	mov	sl, r6
 8004e62:	eb19 0309 	adds.w	r3, r9, r9
 8004e66:	eb4a 040a 	adc.w	r4, sl, sl
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	46a2      	mov	sl, r4
 8004e6e:	eb19 0905 	adds.w	r9, r9, r5
 8004e72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e8a:	4689      	mov	r9, r1
 8004e8c:	4692      	mov	sl, r2
 8004e8e:	eb19 0005 	adds.w	r0, r9, r5
 8004e92:	eb4a 0106 	adc.w	r1, sl, r6
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	f04f 0600 	mov.w	r6, #0
 8004ea0:	196b      	adds	r3, r5, r5
 8004ea2:	eb46 0406 	adc.w	r4, r6, r6
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	f7fb f9e9 	bl	8000280 <__aeabi_uldivmod>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b6a      	ldr	r3, [pc, #424]	; (8005060 <UART_SetConfig+0x384>)
 8004eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2164      	movs	r1, #100	; 0x64
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	3332      	adds	r3, #50	; 0x32
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <UART_SetConfig+0x384>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	f003 0207 	and.w	r2, r3, #7
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4442      	add	r2, r8
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	e26f      	b.n	80053be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ede:	f7fe fecf 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8004ee2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	f04f 0600 	mov.w	r6, #0
 8004eec:	46a8      	mov	r8, r5
 8004eee:	46b1      	mov	r9, r6
 8004ef0:	eb18 0308 	adds.w	r3, r8, r8
 8004ef4:	eb49 0409 	adc.w	r4, r9, r9
 8004ef8:	4698      	mov	r8, r3
 8004efa:	46a1      	mov	r9, r4
 8004efc:	eb18 0805 	adds.w	r8, r8, r5
 8004f00:	eb49 0906 	adc.w	r9, r9, r6
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f18:	4688      	mov	r8, r1
 8004f1a:	4691      	mov	r9, r2
 8004f1c:	eb18 0005 	adds.w	r0, r8, r5
 8004f20:	eb49 0106 	adc.w	r1, r9, r6
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	461d      	mov	r5, r3
 8004f2a:	f04f 0600 	mov.w	r6, #0
 8004f2e:	196b      	adds	r3, r5, r5
 8004f30:	eb46 0406 	adc.w	r4, r6, r6
 8004f34:	461a      	mov	r2, r3
 8004f36:	4623      	mov	r3, r4
 8004f38:	f7fb f9a2 	bl	8000280 <__aeabi_uldivmod>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <UART_SetConfig+0x384>)
 8004f44:	fba3 2302 	umull	r2, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	461d      	mov	r5, r3
 8004f52:	f04f 0600 	mov.w	r6, #0
 8004f56:	46a9      	mov	r9, r5
 8004f58:	46b2      	mov	sl, r6
 8004f5a:	eb19 0309 	adds.w	r3, r9, r9
 8004f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f62:	4699      	mov	r9, r3
 8004f64:	46a2      	mov	sl, r4
 8004f66:	eb19 0905 	adds.w	r9, r9, r5
 8004f6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f82:	4689      	mov	r9, r1
 8004f84:	4692      	mov	sl, r2
 8004f86:	eb19 0005 	adds.w	r0, r9, r5
 8004f8a:	eb4a 0106 	adc.w	r1, sl, r6
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	461d      	mov	r5, r3
 8004f94:	f04f 0600 	mov.w	r6, #0
 8004f98:	196b      	adds	r3, r5, r5
 8004f9a:	eb46 0406 	adc.w	r4, r6, r6
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f7fb f96d 	bl	8000280 <__aeabi_uldivmod>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <UART_SetConfig+0x384>)
 8004fae:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2164      	movs	r1, #100	; 0x64
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <UART_SetConfig+0x384>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fce:	4498      	add	r8, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	f04f 0600 	mov.w	r6, #0
 8004fd8:	46a9      	mov	r9, r5
 8004fda:	46b2      	mov	sl, r6
 8004fdc:	eb19 0309 	adds.w	r3, r9, r9
 8004fe0:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe4:	4699      	mov	r9, r3
 8004fe6:	46a2      	mov	sl, r4
 8004fe8:	eb19 0905 	adds.w	r9, r9, r5
 8004fec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ff0:	f04f 0100 	mov.w	r1, #0
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005004:	4689      	mov	r9, r1
 8005006:	4692      	mov	sl, r2
 8005008:	eb19 0005 	adds.w	r0, r9, r5
 800500c:	eb4a 0106 	adc.w	r1, sl, r6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	461d      	mov	r5, r3
 8005016:	f04f 0600 	mov.w	r6, #0
 800501a:	196b      	adds	r3, r5, r5
 800501c:	eb46 0406 	adc.w	r4, r6, r6
 8005020:	461a      	mov	r2, r3
 8005022:	4623      	mov	r3, r4
 8005024:	f7fb f92c 	bl	8000280 <__aeabi_uldivmod>
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	461a      	mov	r2, r3
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <UART_SetConfig+0x384>)
 8005030:	fba3 1302 	umull	r1, r3, r3, r2
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	2164      	movs	r1, #100	; 0x64
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	3332      	adds	r3, #50	; 0x32
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <UART_SetConfig+0x384>)
 8005044:	fba2 2303 	umull	r2, r3, r2, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f003 0207 	and.w	r2, r3, #7
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4442      	add	r2, r8
 8005054:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005056:	e1b2      	b.n	80053be <UART_SetConfig+0x6e2>
 8005058:	40011000 	.word	0x40011000
 800505c:	40011400 	.word	0x40011400
 8005060:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4ad7      	ldr	r2, [pc, #860]	; (80053c8 <UART_SetConfig+0x6ec>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d005      	beq.n	800507a <UART_SetConfig+0x39e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4ad6      	ldr	r2, [pc, #856]	; (80053cc <UART_SetConfig+0x6f0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	f040 80d1 	bne.w	800521c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800507a:	f7fe fe15 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 800507e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	469a      	mov	sl, r3
 8005084:	f04f 0b00 	mov.w	fp, #0
 8005088:	46d0      	mov	r8, sl
 800508a:	46d9      	mov	r9, fp
 800508c:	eb18 0308 	adds.w	r3, r8, r8
 8005090:	eb49 0409 	adc.w	r4, r9, r9
 8005094:	4698      	mov	r8, r3
 8005096:	46a1      	mov	r9, r4
 8005098:	eb18 080a 	adds.w	r8, r8, sl
 800509c:	eb49 090b 	adc.w	r9, r9, fp
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050b4:	4688      	mov	r8, r1
 80050b6:	4691      	mov	r9, r2
 80050b8:	eb1a 0508 	adds.w	r5, sl, r8
 80050bc:	eb4b 0609 	adc.w	r6, fp, r9
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4619      	mov	r1, r3
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	f04f 0400 	mov.w	r4, #0
 80050d2:	0094      	lsls	r4, r2, #2
 80050d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050d8:	008b      	lsls	r3, r1, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	4631      	mov	r1, r6
 80050e2:	f7fb f8cd 	bl	8000280 <__aeabi_uldivmod>
 80050e6:	4603      	mov	r3, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	461a      	mov	r2, r3
 80050ec:	4bb8      	ldr	r3, [pc, #736]	; (80053d0 <UART_SetConfig+0x6f4>)
 80050ee:	fba3 2302 	umull	r2, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	469b      	mov	fp, r3
 80050fc:	f04f 0c00 	mov.w	ip, #0
 8005100:	46d9      	mov	r9, fp
 8005102:	46e2      	mov	sl, ip
 8005104:	eb19 0309 	adds.w	r3, r9, r9
 8005108:	eb4a 040a 	adc.w	r4, sl, sl
 800510c:	4699      	mov	r9, r3
 800510e:	46a2      	mov	sl, r4
 8005110:	eb19 090b 	adds.w	r9, r9, fp
 8005114:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005124:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005128:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800512c:	4689      	mov	r9, r1
 800512e:	4692      	mov	sl, r2
 8005130:	eb1b 0509 	adds.w	r5, fp, r9
 8005134:	eb4c 060a 	adc.w	r6, ip, sl
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4619      	mov	r1, r3
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	0094      	lsls	r4, r2, #2
 800514c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005150:	008b      	lsls	r3, r1, #2
 8005152:	461a      	mov	r2, r3
 8005154:	4623      	mov	r3, r4
 8005156:	4628      	mov	r0, r5
 8005158:	4631      	mov	r1, r6
 800515a:	f7fb f891 	bl	8000280 <__aeabi_uldivmod>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	461a      	mov	r2, r3
 8005164:	4b9a      	ldr	r3, [pc, #616]	; (80053d0 <UART_SetConfig+0x6f4>)
 8005166:	fba3 1302 	umull	r1, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2164      	movs	r1, #100	; 0x64
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	3332      	adds	r3, #50	; 0x32
 8005178:	4a95      	ldr	r2, [pc, #596]	; (80053d0 <UART_SetConfig+0x6f4>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005184:	4498      	add	r8, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	469b      	mov	fp, r3
 800518a:	f04f 0c00 	mov.w	ip, #0
 800518e:	46d9      	mov	r9, fp
 8005190:	46e2      	mov	sl, ip
 8005192:	eb19 0309 	adds.w	r3, r9, r9
 8005196:	eb4a 040a 	adc.w	r4, sl, sl
 800519a:	4699      	mov	r9, r3
 800519c:	46a2      	mov	sl, r4
 800519e:	eb19 090b 	adds.w	r9, r9, fp
 80051a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051ba:	4689      	mov	r9, r1
 80051bc:	4692      	mov	sl, r2
 80051be:	eb1b 0509 	adds.w	r5, fp, r9
 80051c2:	eb4c 060a 	adc.w	r6, ip, sl
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	f04f 0400 	mov.w	r4, #0
 80051d8:	0094      	lsls	r4, r2, #2
 80051da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051de:	008b      	lsls	r3, r1, #2
 80051e0:	461a      	mov	r2, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	4631      	mov	r1, r6
 80051e8:	f7fb f84a 	bl	8000280 <__aeabi_uldivmod>
 80051ec:	4603      	mov	r3, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b77      	ldr	r3, [pc, #476]	; (80053d0 <UART_SetConfig+0x6f4>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	2164      	movs	r1, #100	; 0x64
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	3332      	adds	r3, #50	; 0x32
 8005206:	4a72      	ldr	r2, [pc, #456]	; (80053d0 <UART_SetConfig+0x6f4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4442      	add	r2, r8
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	e0d0      	b.n	80053be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fe fd30 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005220:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	469a      	mov	sl, r3
 8005226:	f04f 0b00 	mov.w	fp, #0
 800522a:	46d0      	mov	r8, sl
 800522c:	46d9      	mov	r9, fp
 800522e:	eb18 0308 	adds.w	r3, r8, r8
 8005232:	eb49 0409 	adc.w	r4, r9, r9
 8005236:	4698      	mov	r8, r3
 8005238:	46a1      	mov	r9, r4
 800523a:	eb18 080a 	adds.w	r8, r8, sl
 800523e:	eb49 090b 	adc.w	r9, r9, fp
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800524e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005252:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005256:	4688      	mov	r8, r1
 8005258:	4691      	mov	r9, r2
 800525a:	eb1a 0508 	adds.w	r5, sl, r8
 800525e:	eb4b 0609 	adc.w	r6, fp, r9
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4619      	mov	r1, r3
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	0094      	lsls	r4, r2, #2
 8005276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800527a:	008b      	lsls	r3, r1, #2
 800527c:	461a      	mov	r2, r3
 800527e:	4623      	mov	r3, r4
 8005280:	4628      	mov	r0, r5
 8005282:	4631      	mov	r1, r6
 8005284:	f7fa fffc 	bl	8000280 <__aeabi_uldivmod>
 8005288:	4603      	mov	r3, r0
 800528a:	460c      	mov	r4, r1
 800528c:	461a      	mov	r2, r3
 800528e:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <UART_SetConfig+0x6f4>)
 8005290:	fba3 2302 	umull	r2, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	469b      	mov	fp, r3
 800529e:	f04f 0c00 	mov.w	ip, #0
 80052a2:	46d9      	mov	r9, fp
 80052a4:	46e2      	mov	sl, ip
 80052a6:	eb19 0309 	adds.w	r3, r9, r9
 80052aa:	eb4a 040a 	adc.w	r4, sl, sl
 80052ae:	4699      	mov	r9, r3
 80052b0:	46a2      	mov	sl, r4
 80052b2:	eb19 090b 	adds.w	r9, r9, fp
 80052b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052ce:	4689      	mov	r9, r1
 80052d0:	4692      	mov	sl, r2
 80052d2:	eb1b 0509 	adds.w	r5, fp, r9
 80052d6:	eb4c 060a 	adc.w	r6, ip, sl
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4619      	mov	r1, r3
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	0094      	lsls	r4, r2, #2
 80052ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052f2:	008b      	lsls	r3, r1, #2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	4631      	mov	r1, r6
 80052fc:	f7fa ffc0 	bl	8000280 <__aeabi_uldivmod>
 8005300:	4603      	mov	r3, r0
 8005302:	460c      	mov	r4, r1
 8005304:	461a      	mov	r2, r3
 8005306:	4b32      	ldr	r3, [pc, #200]	; (80053d0 <UART_SetConfig+0x6f4>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <UART_SetConfig+0x6f4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005326:	4498      	add	r8, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	469b      	mov	fp, r3
 800532c:	f04f 0c00 	mov.w	ip, #0
 8005330:	46d9      	mov	r9, fp
 8005332:	46e2      	mov	sl, ip
 8005334:	eb19 0309 	adds.w	r3, r9, r9
 8005338:	eb4a 040a 	adc.w	r4, sl, sl
 800533c:	4699      	mov	r9, r3
 800533e:	46a2      	mov	sl, r4
 8005340:	eb19 090b 	adds.w	r9, r9, fp
 8005344:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005354:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005358:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800535c:	4689      	mov	r9, r1
 800535e:	4692      	mov	sl, r2
 8005360:	eb1b 0509 	adds.w	r5, fp, r9
 8005364:	eb4c 060a 	adc.w	r6, ip, sl
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4619      	mov	r1, r3
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	0094      	lsls	r4, r2, #2
 800537c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005380:	008b      	lsls	r3, r1, #2
 8005382:	461a      	mov	r2, r3
 8005384:	4623      	mov	r3, r4
 8005386:	4628      	mov	r0, r5
 8005388:	4631      	mov	r1, r6
 800538a:	f7fa ff79 	bl	8000280 <__aeabi_uldivmod>
 800538e:	4603      	mov	r3, r0
 8005390:	460c      	mov	r4, r1
 8005392:	461a      	mov	r2, r3
 8005394:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <UART_SetConfig+0x6f4>)
 8005396:	fba3 1302 	umull	r1, r3, r3, r2
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2164      	movs	r1, #100	; 0x64
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	3332      	adds	r3, #50	; 0x32
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <UART_SetConfig+0x6f4>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4442      	add	r2, r8
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	e7ff      	b.n	80053be <UART_SetConfig+0x6e2>
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c8:	40011000 	.word	0x40011000
 80053cc:	40011400 	.word	0x40011400
 80053d0:	51eb851f 	.word	0x51eb851f

080053d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d4:	b084      	sub	sp, #16
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	f107 001c 	add.w	r0, r7, #28
 80053e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d122      	bne.n	8005432 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f94a 	bl	80056c0 <USB_CoreReset>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e01a      	b.n	8005468 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f93e 	bl	80056c0 <USB_CoreReset>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
 800545a:	e005      	b.n	8005468 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10b      	bne.n	8005486 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f043 0206 	orr.w	r2, r3, #6
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005492:	b004      	add	sp, #16
 8005494:	4770      	bx	lr

08005496 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 0201 	bic.w	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d106      	bne.n	8005506 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	e00b      	b.n	800551e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	e001      	b.n	800551e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e003      	b.n	8005526 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800551e:	2032      	movs	r0, #50	; 0x32
 8005520:	f7fb feee 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <USB_FlushTxFifo+0x48>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b20      	cmp	r3, #32
 8005566:	d0f0      	beq.n	800554a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	00030d40 	.word	0x00030d40

0800557c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2210      	movs	r2, #16
 800558c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <USB_FlushRxFifo+0x40>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e006      	b.n	80055ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d0f0      	beq.n	800558e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	00030d40 	.word	0x00030d40

080055c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	460b      	mov	r3, r1
 80055d0:	71fb      	strb	r3, [r7, #7]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11a      	bne.n	800561c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055e6:	88bb      	ldrh	r3, [r7, #4]
 80055e8:	3303      	adds	r3, #3
 80055ea:	089b      	lsrs	r3, r3, #2
 80055ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e00f      	b.n	8005614 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	031a      	lsls	r2, r3, #12
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	461a      	mov	r2, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3304      	adds	r3, #4
 800560c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3301      	adds	r3, #1
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d3eb      	bcc.n	80055f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3724      	adds	r7, #36	; 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800562a:	b480      	push	{r7}
 800562c:	b089      	sub	sp, #36	; 0x24
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	4613      	mov	r3, r2
 8005636:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	3303      	adds	r3, #3
 8005644:	089b      	lsrs	r3, r3, #2
 8005646:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	e00b      	b.n	8005666 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	601a      	str	r2, [r3, #0]
    pDest++;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3304      	adds	r3, #4
 800565e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	3301      	adds	r3, #1
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3ef      	bcc.n	800564e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800566e:	69fb      	ldr	r3, [r7, #28]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3724      	adds	r7, #36	; 0x24
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <USB_CoreReset+0x64>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e01b      	b.n	8005716 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	daf2      	bge.n	80056cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <USB_CoreReset+0x64>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d0f0      	beq.n	80056f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	00030d40 	.word	0x00030d40

08005728 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 001c 	add.w	r0, r7, #28
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d018      	beq.n	80057ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b03      	cmp	r3, #3
 800577e:	d10a      	bne.n	8005796 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e014      	b.n	80057c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057a4:	f023 0304 	bic.w	r3, r3, #4
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e009      	b.n	80057c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ba:	f023 0304 	bic.w	r3, r3, #4
 80057be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80057c0:	2110      	movs	r1, #16
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff feb4 	bl	8005530 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fed7 	bl	800557c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e015      	b.n	8005800 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f4:	461a      	mov	r2, r3
 80057f6:	2300      	movs	r3, #0
 80057f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3e5      	bcc.n	80057d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005808:	2101      	movs	r1, #1
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8ac 	bl	8005968 <USB_DriveVbus>

  HAL_Delay(200U);
 8005810:	20c8      	movs	r0, #200	; 0xc8
 8005812:	f7fb fd75 	bl	8001300 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f04f 32ff 	mov.w	r2, #4294967295
 8005822:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a14      	ldr	r2, [pc, #80]	; (800588c <USB_HostInit+0x164>)
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <USB_HostInit+0x168>)
 8005842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005846:	e009      	b.n	800585c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <USB_HostInit+0x16c>)
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a10      	ldr	r2, [pc, #64]	; (8005898 <USB_HostInit+0x170>)
 8005858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f043 0210 	orr.w	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <USB_HostInit+0x174>)
 8005874:	4313      	orrs	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005886:	b004      	add	sp, #16
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	01000200 	.word	0x01000200
 8005890:	00e00300 	.word	0x00e00300
 8005894:	00600080 	.word	0x00600080
 8005898:	004000e0 	.word	0x004000e0
 800589c:	a3200008 	.word	0xa3200008

080058a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e8:	461a      	mov	r2, r3
 80058ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058ee:	6053      	str	r3, [r2, #4]
 80058f0:	e009      	b.n	8005906 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d106      	bne.n	8005906 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	461a      	mov	r2, r3
 8005900:	f241 7370 	movw	r3, #6000	; 0x1770
 8005904:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800593e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005942:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005944:	2064      	movs	r0, #100	; 0x64
 8005946:	f7fb fcdb 	bl	8001300 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005958:	200a      	movs	r0, #10
 800595a:	f7fb fcd1 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800598c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <USB_DriveVbus+0x44>
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d106      	bne.n	80059ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b6:	d109      	bne.n	80059cc <USB_DriveVbus+0x64>
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	0c5b      	lsrs	r3, r3, #17
 80059f8:	f003 0303 	and.w	r3, r3, #3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	b29b      	uxth	r3, r3
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	70fb      	strb	r3, [r7, #3]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	70bb      	strb	r3, [r7, #2]
 8005a42:	4613      	mov	r3, r2
 8005a44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d87e      	bhi.n	8005b68 <USB_HC_Init+0x13c>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <USB_HC_Init+0x44>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005b2b 	.word	0x08005b2b
 8005a78:	08005a81 	.word	0x08005a81
 8005a7c:	08005aed 	.word	0x08005aed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da10      	bge.n	8005abe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005abc:	e057      	b.n	8005b6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d051      	beq.n	8005b6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ae8:	60d3      	str	r3, [r2, #12]
      break;
 8005aea:	e040      	b.n	8005b6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	461a      	mov	r2, r3
 8005afa:	f240 639d 	movw	r3, #1693	; 0x69d
 8005afe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da34      	bge.n	8005b72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b28:	e023      	b.n	8005b72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	461a      	mov	r2, r3
 8005b38:	f240 2325 	movw	r3, #549	; 0x225
 8005b3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da17      	bge.n	8005b76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b66:	e006      	b.n	8005b76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6c:	e004      	b.n	8005b78 <USB_HC_Init+0x14c>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <USB_HC_Init+0x14c>
      break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <USB_HC_Init+0x14c>
      break;
 8005b76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	2101      	movs	r1, #1
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b92:	4313      	orrs	r3, r2
 8005b94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da03      	bge.n	8005bb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	e001      	b.n	8005bb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d103      	bne.n	8005bc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e001      	b.n	8005bca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bca:	787b      	ldrb	r3, [r7, #1]
 8005bcc:	059b      	lsls	r3, r3, #22
 8005bce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bd2:	78bb      	ldrb	r3, [r7, #2]
 8005bd4:	02db      	lsls	r3, r3, #11
 8005bd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005be0:	049b      	lsls	r3, r3, #18
 8005be2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005be6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	0159      	lsls	r1, r3, #5
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d10f      	bne.n	8005c30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08c      	sub	sp, #48	; 0x30
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d028      	beq.n	8005cbc <USB_HC_StartXfer+0x7c>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	791b      	ldrb	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d124      	bne.n	8005cbc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <USB_HC_StartXfer+0x50>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	795b      	ldrb	r3, [r3, #5]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	4619      	mov	r1, r3
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa2e 	bl	80060e8 <USB_DoPing>
      return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e112      	b.n	8005eb6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d112      	bne.n	8005cbc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005cb4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d018      	beq.n	8005cf6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	8912      	ldrh	r2, [r2, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	8912      	ldrh	r2, [r2, #8]
 8005cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cdc:	8b7b      	ldrh	r3, [r7, #26]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d90b      	bls.n	8005cfa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005ce2:	8b7b      	ldrh	r3, [r7, #26]
 8005ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	8912      	ldrh	r2, [r2, #8]
 8005cec:	fb02 f203 	mul.w	r2, r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	611a      	str	r2, [r3, #16]
 8005cf4:	e001      	b.n	8005cfa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	8912      	ldrh	r2, [r2, #8]
 8005d08:	fb02 f203 	mul.w	r2, r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d1a:	04d9      	lsls	r1, r3, #19
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <USB_HC_StartXfer+0x280>)
 8005d1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	7a9b      	ldrb	r3, [r3, #10]
 8005d26:	075b      	lsls	r3, r3, #29
 8005d28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	0148      	lsls	r0, r1, #5
 8005d30:	6a39      	ldr	r1, [r7, #32]
 8005d32:	4401      	add	r1, r0
 8005d34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	460a      	mov	r2, r1
 8005d54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	7e7b      	ldrb	r3, [r7, #25]
 8005d9e:	075b      	lsls	r3, r3, #29
 8005da0:	69f9      	ldr	r1, [r7, #28]
 8005da2:	0148      	lsls	r0, r1, #5
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	4401      	add	r1, r0
 8005da8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005dac:	4313      	orrs	r3, r2
 8005dae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dc0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dc2:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dca:	4a3e      	ldr	r2, [pc, #248]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dcc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005dd6:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dde:	4a39      	ldr	r2, [pc, #228]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e005      	b.n	8005df0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005de4:	4b37      	ldr	r3, [pc, #220]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dec:	4a35      	ldr	r2, [pc, #212]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005df0:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	4a32      	ldr	r2, [pc, #200]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005dfa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <USB_HC_StartXfer+0x284>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d14e      	bne.n	8005eb4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d14a      	bne.n	8005eb4 <USB_HC_StartXfer+0x274>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d046      	beq.n	8005eb4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	79db      	ldrb	r3, [r3, #7]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d830      	bhi.n	8005e90 <USB_HC_StartXfer+0x250>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USB_HC_StartXfer+0x1f4>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e45 	.word	0x08005e45
 8005e40:	08005e69 	.word	0x08005e69
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	3303      	adds	r3, #3
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e4e:	8afa      	ldrh	r2, [r7, #22]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d91c      	bls.n	8005e94 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	619a      	str	r2, [r3, #24]
          }
          break;
 8005e66:	e015      	b.n	8005e94 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	3303      	adds	r3, #3
 8005e6e:	089b      	lsrs	r3, r3, #2
 8005e70:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e72:	8afa      	ldrh	r2, [r7, #22]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d90a      	bls.n	8005e98 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	619a      	str	r2, [r3, #24]
          }
          break;
 8005e8e:	e003      	b.n	8005e98 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <USB_HC_StartXfer+0x25a>
          break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <USB_HC_StartXfer+0x25a>
          break;
 8005e98:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68d9      	ldr	r1, [r3, #12]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	785a      	ldrb	r2, [r3, #1]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	b298      	uxth	r0, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	4603      	mov	r3, r0
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fb86 	bl	80055c0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	1ff80000 	.word	0x1ff80000
 8005ec4:	200000c0 	.word	0x200000c0

08005ec8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	b29b      	uxth	r3, r3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	0c9b      	lsrs	r3, r3, #18
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <USB_HC_Halt+0x3a>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d16c      	bne.n	8005ffe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d143      	bne.n	8005fd8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005faa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fbc:	d81d      	bhi.n	8005ffa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd4:	d0ec      	beq.n	8005fb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fd6:	e080      	b.n	80060da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ff8:	e06f      	b.n	80060da <USB_HC_Halt+0x1f0>
          break;
 8005ffa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ffc:	e06d      	b.n	80060da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	440a      	add	r2, r1
 8006014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d143      	bne.n	80060b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800604c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	440a      	add	r2, r1
 8006064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800606c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	440a      	add	r2, r1
 8006084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800608c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	3301      	adds	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800609a:	d81d      	bhi.n	80060d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b2:	d0ec      	beq.n	800608e <USB_HC_Halt+0x1a4>
 80060b4:	e011      	b.n	80060da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e000      	b.n	80060da <USB_HC_Halt+0x1f0>
          break;
 80060d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060fc:	2301      	movs	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	04da      	lsls	r2, r3, #19
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <USB_DoPing+0x74>)
 8006106:	4013      	ands	r3, r2
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	440a      	add	r2, r1
 8006110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	1ff80000 	.word	0x1ff80000

08006160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff f9a1 	bl	80054b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006176:	2110      	movs	r1, #16
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff f9d9 	bl	8005530 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff f9fc 	bl	800557c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e01f      	b.n	80061ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3301      	adds	r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b0f      	cmp	r3, #15
 80061ce:	d9dc      	bls.n	800618a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	e034      	b.n	8006240 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	3301      	adds	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621c:	d80c      	bhi.n	8006238 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006234:	d0ec      	beq.n	8006210 <USB_StopHost+0xb0>
 8006236:	e000      	b.n	800623a <USB_StopHost+0xda>
        break;
 8006238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d9c7      	bls.n	80061d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624c:	461a      	mov	r2, r3
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff f91a 	bl	8005496 <USB_EnableGlobalInt>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af04      	add	r7, sp, #16
 8006272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006274:	2302      	movs	r3, #2
 8006276:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006278:	2301      	movs	r3, #1
 800627a:	2202      	movs	r2, #2
 800627c:	2102      	movs	r1, #2
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fc3a 	bl	8006af8 <USBH_FindInterface>
 8006284:	4603      	mov	r3, r0
 8006286:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2bff      	cmp	r3, #255	; 0xff
 800628c:	f000 812a 	beq.w	80064e4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc13 	bl	8006ac0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80062a0:	2050      	movs	r0, #80	; 0x50
 80062a2:	f002 f8df 	bl	8008464 <malloc>
 80062a6:	4603      	mov	r3, r0
 80062a8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	211a      	movs	r1, #26
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	4413      	add	r3, r2
 80062c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b25b      	sxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da15      	bge.n	80062f8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	211a      	movs	r1, #26
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	211a      	movs	r1, #26
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fd21 	bl	8007d46 <USBH_AllocPipe>
 8006304:	4603      	mov	r3, r0
 8006306:	461a      	mov	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	7819      	ldrb	r1, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	7858      	ldrb	r0, [r3, #1]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	8952      	ldrh	r2, [r2, #10]
 8006324:	9202      	str	r2, [sp, #8]
 8006326:	2203      	movs	r2, #3
 8006328:	9201      	str	r2, [sp, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4623      	mov	r3, r4
 800632e:	4602      	mov	r2, r0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fcd9 	bl	8007ce8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 ffe0 	bl	8008304 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006344:	2300      	movs	r3, #0
 8006346:	2200      	movs	r2, #0
 8006348:	210a      	movs	r1, #10
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fbd4 	bl	8006af8 <USBH_FindInterface>
 8006350:	4603      	mov	r3, r0
 8006352:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	2bff      	cmp	r3, #255	; 0xff
 8006358:	f000 80c4 	beq.w	80064e4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	211a      	movs	r1, #26
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	4413      	add	r3, r2
 8006368:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	b25b      	sxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	da16      	bge.n	80063a2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	211a      	movs	r1, #26
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	4413      	add	r3, r2
 8006380:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	211a      	movs	r1, #26
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	835a      	strh	r2, [r3, #26]
 80063a0:	e015      	b.n	80063ce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	211a      	movs	r1, #26
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	211a      	movs	r1, #26
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	211a      	movs	r1, #26
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	f203 3352 	addw	r3, r3, #850	; 0x352
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da16      	bge.n	8006414 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	211a      	movs	r1, #26
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	211a      	movs	r1, #26
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800640c:	881a      	ldrh	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	835a      	strh	r2, [r3, #26]
 8006412:	e015      	b.n	8006440 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	211a      	movs	r1, #26
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	211a      	movs	r1, #26
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	7b9b      	ldrb	r3, [r3, #14]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fc7d 	bl	8007d46 <USBH_AllocPipe>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	7bdb      	ldrb	r3, [r3, #15]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fc73 	bl	8007d46 <USBH_AllocPipe>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	7b59      	ldrb	r1, [r3, #13]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	7b98      	ldrb	r0, [r3, #14]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	8b12      	ldrh	r2, [r2, #24]
 8006480:	9202      	str	r2, [sp, #8]
 8006482:	2202      	movs	r2, #2
 8006484:	9201      	str	r2, [sp, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4623      	mov	r3, r4
 800648a:	4602      	mov	r2, r0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fc2b 	bl	8007ce8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	7b19      	ldrb	r1, [r3, #12]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	7bd8      	ldrb	r0, [r3, #15]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	8b52      	ldrh	r2, [r2, #26]
 80064aa:	9202      	str	r2, [sp, #8]
 80064ac:	2202      	movs	r2, #2
 80064ae:	9201      	str	r2, [sp, #4]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4623      	mov	r3, r4
 80064b4:	4602      	mov	r2, r0
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fc16 	bl	8007ce8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	7b5b      	ldrb	r3, [r3, #13]
 80064c8:	2200      	movs	r2, #0
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 ff19 	bl	8008304 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7b1b      	ldrb	r3, [r3, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 ff12 	bl	8008304 <USBH_LL_SetToggle>
      status = USBH_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}

080064ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00e      	beq.n	8006526 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fc09 	bl	8007d26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fc31 	bl	8007d82 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	7b1b      	ldrb	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	7b1b      	ldrb	r3, [r3, #12]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fbf6 	bl	8007d26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	7b1b      	ldrb	r3, [r3, #12]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fc1e 	bl	8007d82 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7b5b      	ldrb	r3, [r3, #13]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	7b5b      	ldrb	r3, [r3, #13]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fbe3 	bl	8007d26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	7b5b      	ldrb	r3, [r3, #13]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fc0b 	bl	8007d82 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	4618      	mov	r0, r3
 8006588:	f001 ff74 	bl	8008474 <free>
    phost->pActiveClass->pData = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006592:	2200      	movs	r2, #0
 8006594:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80065a8:	2302      	movs	r3, #2
 80065aa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	3340      	adds	r3, #64	; 0x40
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8b2 	bl	8006726 <GetLineCoding>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065d2:	2102      	movs	r1, #2
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
  }
  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006604:	2b04      	cmp	r3, #4
 8006606:	d877      	bhi.n	80066f8 <USBH_CDC_Process+0x114>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USBH_CDC_Process+0x2c>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006625 	.word	0x08006625
 8006614:	0800662b 	.word	0x0800662b
 8006618:	0800665b 	.word	0x0800665b
 800661c:	080066cf 	.word	0x080066cf
 8006620:	080066dd 	.word	0x080066dd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]
    break;
 8006628:	e06d      	b.n	8006706 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f897 	bl	8006764 <SetLineCoding>
 8006636:	4603      	mov	r3, r0
 8006638:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006648:	e058      	b.n	80066fc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d055      	beq.n	80066fc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2204      	movs	r2, #4
 8006654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006658:	e050      	b.n	80066fc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3340      	adds	r3, #64	; 0x40
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f860 	bl	8006726 <GetLineCoding>
 8006666:	4603      	mov	r3, r0
 8006668:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d126      	bne.n	80066be <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d13b      	bne.n	8006700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006694:	429a      	cmp	r2, r3
 8006696:	d133      	bne.n	8006700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d12b      	bne.n	8006700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d124      	bne.n	8006700 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f95a 	bl	8006970 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80066bc:	e020      	b.n	8006700 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d01d      	beq.n	8006700 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80066cc:	e018      	b.n	8006700 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f867 	bl	80067a2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8dc 	bl	8006892 <CDC_ProcessReception>
    break;
 80066da:	e014      	b.n	8006706 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fece 	bl	8007480 <USBH_ClrFeature>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80066f6:	e005      	b.n	8006704 <USBH_CDC_Process+0x120>

  default:
    break;
 80066f8:	bf00      	nop
 80066fa:	e004      	b.n	8006706 <USBH_CDC_Process+0x122>
    break;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <USBH_CDC_Process+0x122>
    break;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <USBH_CDC_Process+0x122>
    break;
 8006704:	bf00      	nop

  }

  return status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	22a1      	movs	r2, #161	; 0xa1
 8006734:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2221      	movs	r2, #33	; 0x21
 800673a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2207      	movs	r2, #7
 800674c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2207      	movs	r2, #7
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f873 	bl	8007840 <USBH_CtlReq>
 800675a:	4603      	mov	r3, r0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2221      	movs	r2, #33	; 0x21
 8006772:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2207      	movs	r2, #7
 800678a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2207      	movs	r2, #7
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f854 	bl	8007840 <USBH_CtlReq>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af02      	add	r7, sp, #8
 80067a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d002      	beq.n	80067c8 <CDC_ProcessTransmission+0x26>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d025      	beq.n	8006812 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80067c6:	e060      	b.n	800688a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	8b12      	ldrh	r2, [r2, #24]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d90c      	bls.n	80067ee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	69d9      	ldr	r1, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8b1a      	ldrh	r2, [r3, #24]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	7b58      	ldrb	r0, [r3, #13]
 80067e0:	2301      	movs	r3, #1
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4603      	mov	r3, r0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fa3b 	bl	8007c62 <USBH_BulkSendData>
 80067ec:	e00c      	b.n	8006808 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	7b58      	ldrb	r0, [r3, #13]
 80067fc:	2301      	movs	r3, #1
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fa2d 	bl	8007c62 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006810:	e03b      	b.n	800688a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	7b5b      	ldrb	r3, [r3, #13]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fd49 	bl	80082b0 <USBH_LL_GetURBState>
 800681e:	4603      	mov	r3, r0
 8006820:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d128      	bne.n	800687a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	8b12      	ldrh	r2, [r2, #24]
 8006830:	4293      	cmp	r3, r2
 8006832:	d90e      	bls.n	8006852 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8b12      	ldrh	r2, [r2, #24]
 800683c:	1a9a      	subs	r2, r3, r2
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	8b12      	ldrh	r2, [r2, #24]
 800684a:	441a      	add	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61da      	str	r2, [r3, #28]
 8006850:	e002      	b.n	8006858 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006868:	e00e      	b.n	8006888 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f868 	bl	8006948 <USBH_CDC_TransmitCallback>
    break;
 8006878:	e006      	b.n	8006888 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d103      	bne.n	8006888 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006888:	bf00      	nop
  }
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d002      	beq.n	80068b8 <CDC_ProcessReception+0x26>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00e      	beq.n	80068d4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80068b6:	e043      	b.n	8006940 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6a19      	ldr	r1, [r3, #32]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	8b5a      	ldrh	r2, [r3, #26]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f9f1 	bl	8007cac <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2204      	movs	r2, #4
 80068ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80068d2:	e035      	b.n	8006940 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	7b1b      	ldrb	r3, [r3, #12]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fce8 	bl	80082b0 <USBH_LL_GetURBState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d129      	bne.n	800693e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	7b1b      	ldrb	r3, [r3, #12]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fc4b 	bl	800818c <USBH_LL_GetLastXferSize>
 80068f6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d016      	beq.n	8006930 <CDC_ProcessReception+0x9e>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	8b5b      	ldrh	r3, [r3, #26]
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4293      	cmp	r3, r2
 800690c:	d910      	bls.n	8006930 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	441a      	add	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800692e:	e006      	b.n	800693e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f80f 	bl	800695c <USBH_CDC_ReceiveCallback>
    break;
 800693e:	bf00      	nop
  }
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006998:	2302      	movs	r3, #2
 800699a:	e019      	b.n	80069d0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	79fa      	ldrb	r2, [r7, #7]
 80069a0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f80f 	bl	80069d8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fb2d 	bl	8008028 <USBH_LL_Init>

  return USBH_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80069e4:	e008      	b.n	80069f8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	32e0      	adds	r2, #224	; 0xe0
 80069ec:	2100      	movs	r1, #0
 80069ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b0e      	cmp	r3, #14
 80069fc:	d9f3      	bls.n	80069e6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e009      	b.n	8006a18 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1e:	d3f1      	bcc.n	8006a04 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10f      	bne.n	8006aa8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	33dc      	adds	r3, #220	; 0xdc
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	e004      	b.n	8006ab2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	73fb      	strb	r3, [r7, #15]
 8006aac:	e001      	b.n	8006ab2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d204      	bcs.n	8006ae6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006ae4:	e001      	b.n	8006aea <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	70fb      	strb	r3, [r7, #3]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70bb      	strb	r3, [r7, #2]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006b20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b22:	e025      	b.n	8006b70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	221a      	movs	r2, #26
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	3302      	adds	r3, #2
 8006b34:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	795b      	ldrb	r3, [r3, #5]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d002      	beq.n	8006b46 <USBH_FindInterface+0x4e>
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2bff      	cmp	r3, #255	; 0xff
 8006b44:	d111      	bne.n	8006b6a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006b4a:	78ba      	ldrb	r2, [r7, #2]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006b50:	78bb      	ldrb	r3, [r7, #2]
 8006b52:	2bff      	cmp	r3, #255	; 0xff
 8006b54:	d109      	bne.n	8006b6a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006b5a:	787a      	ldrb	r2, [r7, #1]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d002      	beq.n	8006b66 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b60:	787b      	ldrb	r3, [r7, #1]
 8006b62:	2bff      	cmp	r3, #255	; 0xff
 8006b64:	d101      	bne.n	8006b6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	e006      	b.n	8006b78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d9d6      	bls.n	8006b24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b76:	23ff      	movs	r3, #255	; 0xff
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fa87 	bl	80080a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fb9e 	bl	80082d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af04      	add	r7, sp, #16
 8006baa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bac:	2302      	movs	r3, #2
 8006bae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 faec 	bl	8007192 <USBH_IsPortEnabled>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <USBH_Process+0x36>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d002      	beq.n	8006bda <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b0b      	cmp	r3, #11
 8006be2:	f200 814c 	bhi.w	8006e7e <USBH_Process+0x2da>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <USBH_Process+0x48>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c1d 	.word	0x08006c1d
 8006bf0:	08006c3f 	.word	0x08006c3f
 8006bf4:	08006c53 	.word	0x08006c53
 8006bf8:	08006e59 	.word	0x08006e59
 8006bfc:	08006e7f 	.word	0x08006e7f
 8006c00:	08006ce1 	.word	0x08006ce1
 8006c04:	08006e0f 	.word	0x08006e0f
 8006c08:	08006d11 	.word	0x08006d11
 8006c0c:	08006d31 	.word	0x08006d31
 8006c10:	08006d51 	.word	0x08006d51
 8006c14:	08006d7f 	.word	0x08006d7f
 8006c18:	08006e41 	.word	0x08006e41
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 812c 	beq.w	8006e82 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006c30:	20c8      	movs	r0, #200	; 0xc8
 8006c32:	f001 fb9a 	bl	800836a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fa8d 	bl	8008156 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006c3c:	e121      	b.n	8006e82 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 811e 	bne.w	8006e86 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006c50:	e119      	b.n	8006e86 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006c52:	2064      	movs	r0, #100	; 0x64
 8006c54:	f001 fb89 	bl	800836a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fa57 	bl	800810c <USBH_LL_GetSpeed>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2205      	movs	r2, #5
 8006c6c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f868 	bl	8007d46 <USBH_AllocPipe>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f860 	bl	8007d46 <USBH_AllocPipe>
 8006c86:	4603      	mov	r3, r0
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7919      	ldrb	r1, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006ca2:	b292      	uxth	r2, r2
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9201      	str	r2, [sp, #4]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	2280      	movs	r2, #128	; 0x80
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 f819 	bl	8007ce8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7959      	ldrb	r1, [r3, #5]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	9202      	str	r2, [sp, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	9201      	str	r2, [sp, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 f805 	bl	8007ce8 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006cde:	e0e3      	b.n	8006ea8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8e7 	bl	8006eb4 <USBH_HandleEnum>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 80ce 	bne.w	8006e8a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d103      	bne.n	8006d08 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2208      	movs	r2, #8
 8006d04:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006d06:	e0c0      	b.n	8006e8a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	701a      	strb	r2, [r3, #0]
    break;
 8006d0e:	e0bc      	b.n	8006e8a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80b9 	beq.w	8006e8e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d2e:	e0ae      	b.n	8006e8e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb59 	bl	80073f2 <USBH_SetCfg>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 80a5 	bne.w	8006e92 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2209      	movs	r2, #9
 8006d4c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006d4e:	e0a0      	b.n	8006e92 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006d5e:	2101      	movs	r1, #1
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb69 	bl	8007438 <USBH_SetFeature>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 8094 	bne.w	8006e96 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220a      	movs	r2, #10
 8006d72:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006d74:	e08f      	b.n	8006e96 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220a      	movs	r2, #10
 8006d7a:	701a      	strb	r2, [r3, #0]
    break;
 8006d7c:	e08b      	b.n	8006e96 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8088 	beq.w	8006e9a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e017      	b.n	8006dc8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	33dc      	adds	r3, #220	; 0xdc
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	791a      	ldrb	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d108      	bne.n	8006dc2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	33dc      	adds	r3, #220	; 0xdc
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0e4      	beq.n	8006d98 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d016      	beq.n	8006e06 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2206      	movs	r2, #6
 8006dee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006df6:	2103      	movs	r1, #3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006dfc:	e04d      	b.n	8006e9a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220d      	movs	r2, #13
 8006e02:	701a      	strb	r2, [r3, #0]
    break;
 8006e04:	e049      	b.n	8006e9a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220d      	movs	r2, #13
 8006e0a:	701a      	strb	r2, [r3, #0]
    break;
 8006e0c:	e045      	b.n	8006e9a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00f      	beq.n	8006e38 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
 8006e24:	4603      	mov	r3, r0
 8006e26:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d136      	bne.n	8006e9e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	220b      	movs	r2, #11
 8006e34:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006e36:	e032      	b.n	8006e9e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	220d      	movs	r2, #13
 8006e3c:	701a      	strb	r2, [r3, #0]
    break;
 8006e3e:	e02e      	b.n	8006e9e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02b      	beq.n	8006ea2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
    }
    break;
 8006e56:	e024      	b.n	8006ea2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff fdbd 	bl	80069d8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01e      	beq.n	8006ea6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006e7c:	e013      	b.n	8006ea6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006e7e:	bf00      	nop
 8006e80:	e012      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e82:	bf00      	nop
 8006e84:	e010      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e86:	bf00      	nop
 8006e88:	e00e      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e8a:	bf00      	nop
 8006e8c:	e00c      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e8e:	bf00      	nop
 8006e90:	e00a      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e92:	bf00      	nop
 8006e94:	e008      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e96:	bf00      	nop
 8006e98:	e006      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e9a:	bf00      	nop
 8006e9c:	e004      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006e9e:	bf00      	nop
 8006ea0:	e002      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006ea2:	bf00      	nop
 8006ea4:	e000      	b.n	8006ea8 <USBH_Process+0x304>
    break;
 8006ea6:	bf00      	nop
  }
 return USBH_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop

08006eb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af04      	add	r7, sp, #16
 8006eba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b07      	cmp	r3, #7
 8006ec6:	f200 80f8 	bhi.w	80070ba <USBH_HandleEnum+0x206>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <USBH_HandleEnum+0x1c>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ef1 	.word	0x08006ef1
 8006ed4:	08006f63 	.word	0x08006f63
 8006ed8:	08006f7b 	.word	0x08006f7b
 8006edc:	08006ff1 	.word	0x08006ff1
 8006ee0:	08007007 	.word	0x08007007
 8006ee4:	08007023 	.word	0x08007023
 8006ee8:	08007057 	.word	0x08007057
 8006eec:	0800708b 	.word	0x0800708b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006ef0:	2108      	movs	r1, #8
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9ad 	bl	8007252 <USBH_Get_DevDesc>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 80df 	bne.w	80070be <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7919      	ldrb	r1, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006f24:	b292      	uxth	r2, r2
 8006f26:	9202      	str	r2, [sp, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	9201      	str	r2, [sp, #4]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2280      	movs	r2, #128	; 0x80
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fed8 	bl	8007ce8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7959      	ldrb	r1, [r3, #5]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006f4c:	b292      	uxth	r2, r2
 8006f4e:	9202      	str	r2, [sp, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	9201      	str	r2, [sp, #4]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	4603      	mov	r3, r0
 8006f58:	2200      	movs	r2, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fec4 	bl	8007ce8 <USBH_OpenPipe>

    }
    break;
 8006f60:	e0ad      	b.n	80070be <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006f62:	2112      	movs	r1, #18
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f974 	bl	8007252 <USBH_Get_DevDesc>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 80a8 	bne.w	80070c2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006f78:	e0a3      	b.n	80070c2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa14 	bl	80073aa <USBH_SetAddress>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 809e 	bne.w	80070c6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006f8a:	2002      	movs	r0, #2
 8006f8c:	f001 f9ed 	bl	800836a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7919      	ldrb	r1, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006fb2:	b292      	uxth	r2, r2
 8006fb4:	9202      	str	r2, [sp, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	9201      	str	r2, [sp, #4]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2280      	movs	r2, #128	; 0x80
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fe91 	bl	8007ce8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7959      	ldrb	r1, [r3, #5]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	9202      	str	r2, [sp, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	9201      	str	r2, [sp, #4]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fe7d 	bl	8007ce8 <USBH_OpenPipe>
    }
    break;
 8006fee:	e06a      	b.n	80070c6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006ff0:	2109      	movs	r1, #9
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f955 	bl	80072a2 <USBH_Get_CfgDesc>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d165      	bne.n	80070ca <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007004:	e061      	b.n	80070ca <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f947 	bl	80072a2 <USBH_Get_CfgDesc>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d159      	bne.n	80070ce <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2205      	movs	r2, #5
 800701e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007020:	e055      	b.n	80070ce <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007038:	23ff      	movs	r3, #255	; 0xff
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f955 	bl	80072ea <USBH_Get_StringDesc>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d145      	bne.n	80070d2 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2206      	movs	r2, #6
 800704a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800704c:	e041      	b.n	80070d2 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2206      	movs	r2, #6
 8007052:	705a      	strb	r2, [r3, #1]
    break;
 8007054:	e03d      	b.n	80070d2 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800706c:	23ff      	movs	r3, #255	; 0xff
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f93b 	bl	80072ea <USBH_Get_StringDesc>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d12d      	bne.n	80070d6 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2207      	movs	r2, #7
 800707e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007080:	e029      	b.n	80070d6 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2207      	movs	r2, #7
 8007086:	705a      	strb	r2, [r3, #1]
    break;
 8007088:	e025      	b.n	80070d6 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00f      	beq.n	80070b4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f921 	bl	80072ea <USBH_Get_StringDesc>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80070b2:	e012      	b.n	80070da <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
    break;
 80070b8:	e00f      	b.n	80070da <USBH_HandleEnum+0x226>

  default:
    break;
 80070ba:	bf00      	nop
 80070bc:	e00e      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070be:	bf00      	nop
 80070c0:	e00c      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070c2:	bf00      	nop
 80070c4:	e00a      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070c6:	bf00      	nop
 80070c8:	e008      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070ca:	bf00      	nop
 80070cc:	e006      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070ce:	bf00      	nop
 80070d0:	e004      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <USBH_HandleEnum+0x228>
    break;
 80070da:	bf00      	nop
  }
  return Status;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop

080070e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f804 	bl	800712a <USBH_HandleSof>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b0b      	cmp	r3, #11
 800713a:	d10a      	bne.n	8007152 <USBH_HandleSof+0x28>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800716a:	bf00      	nop
}
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007186:	bf00      	nop
}
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10f      	bne.n	80071de <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071d6:	2104      	movs	r1, #4
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
 80071dc:	e007      	b.n	80071ee <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d102      	bne.n	80071ee <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 ff68 	bl	80080d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fdb8 	bl	8007d82 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	795b      	ldrb	r3, [r3, #5]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fdb2 	bl	8007d82 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007236:	2105      	movs	r1, #5
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 ff2f 	bl	80080a0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2203      	movs	r2, #3
 8007246:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af02      	add	r7, sp, #8
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	b29b      	uxth	r3, r3
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007270:	2100      	movs	r1, #0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f864 	bl	8007340 <USBH_GetDescriptor>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	b292      	uxth	r2, r2
 8007292:	4619      	mov	r1, r3
 8007294:	f000 f918 	bl	80074c8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	331c      	adds	r3, #28
 80072b2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80072b4:	887b      	ldrh	r3, [r7, #2]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072be:	2100      	movs	r1, #0
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f83d 	bl	8007340 <USBH_GetDescriptor>
 80072c6:	4603      	mov	r3, r0
 80072c8:	72fb      	strb	r3, [r7, #11]
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80072d6:	887a      	ldrh	r2, [r7, #2]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f964 	bl	80075a8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80072e0:	7afb      	ldrb	r3, [r7, #11]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af02      	add	r7, sp, #8
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	461a      	mov	r2, r3
 80072f6:	460b      	mov	r3, r1
 80072f8:	72fb      	strb	r3, [r7, #11]
 80072fa:	4613      	mov	r3, r2
 80072fc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	b29b      	uxth	r3, r3
 8007302:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007306:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800730e:	893b      	ldrh	r3, [r7, #8]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	460b      	mov	r3, r1
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f812 	bl	8007340 <USBH_GetDescriptor>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800732c:	893a      	ldrh	r2, [r7, #8]
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fa37 	bl	80077a4 <USBH_ParseStringDesc>
  }
  return status;
 8007336:	7dfb      	ldrb	r3, [r7, #23]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	72fb      	strb	r3, [r7, #11]
 800734e:	4613      	mov	r3, r2
 8007350:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	789b      	ldrb	r3, [r3, #2]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d11c      	bne.n	8007394 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2206      	movs	r2, #6
 800736a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	893a      	ldrh	r2, [r7, #8]
 8007370:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007372:	893b      	ldrh	r3, [r7, #8]
 8007374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737c:	d104      	bne.n	8007388 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f240 4209 	movw	r2, #1033	; 0x409
 8007384:	829a      	strh	r2, [r3, #20]
 8007386:	e002      	b.n	800738e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8b3a      	ldrh	r2, [r7, #24]
 8007392:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007394:	8b3b      	ldrh	r3, [r7, #24]
 8007396:	461a      	mov	r2, r3
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fa50 	bl	8007840 <USBH_CtlReq>
 80073a0:	4603      	mov	r3, r0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10f      	bne.n	80073de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2205      	movs	r2, #5
 80073c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa2c 	bl	8007840 <USBH_CtlReq>
 80073e8:	4603      	mov	r3, r0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	789b      	ldrb	r3, [r3, #2]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10e      	bne.n	8007424 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2209      	movs	r2, #9
 8007410:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	887a      	ldrh	r2, [r7, #2]
 8007416:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa09 	bl	8007840 <USBH_CtlReq>
 800742e:	4603      	mov	r3, r0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	789b      	ldrb	r3, [r3, #2]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d10f      	bne.n	800746c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9e5 	bl	8007840 <USBH_CtlReq>
 8007476:	4603      	mov	r3, r0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	789b      	ldrb	r3, [r3, #2]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10f      	bne.n	80074b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9c1 	bl	8007840 <USBH_CtlReq>
 80074be:	4603      	mov	r3, r0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	785a      	ldrb	r2, [r3, #1]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	3302      	adds	r3, #2
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	3303      	adds	r3, #3
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	791a      	ldrb	r2, [r3, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	795a      	ldrb	r2, [r3, #5]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	799a      	ldrb	r2, [r3, #6]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	79da      	ldrb	r2, [r3, #7]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b08      	cmp	r3, #8
 8007526:	d939      	bls.n	800759c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	3308      	adds	r3, #8
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b29a      	uxth	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3309      	adds	r3, #9
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	b29b      	uxth	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	330a      	adds	r3, #10
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	330b      	adds	r3, #11
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	b29b      	uxth	r3, r3
 8007558:	4313      	orrs	r3, r2
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	330c      	adds	r3, #12
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b29a      	uxth	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	330d      	adds	r3, #13
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29b      	uxth	r3, r3
 8007574:	4313      	orrs	r3, r2
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	7b9a      	ldrb	r2, [r3, #14]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	7bda      	ldrb	r2, [r3, #15]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	7c1a      	ldrb	r2, [r3, #16]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	7c5a      	ldrb	r2, [r3, #17]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	745a      	strb	r2, [r3, #17]
  }
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	785a      	ldrb	r2, [r3, #1]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3302      	adds	r3, #2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3303      	adds	r3, #3
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	791a      	ldrb	r2, [r3, #4]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	795a      	ldrb	r2, [r3, #5]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	799a      	ldrb	r2, [r3, #6]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	79da      	ldrb	r2, [r3, #7]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7a1a      	ldrb	r2, [r3, #8]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b09      	cmp	r3, #9
 8007622:	d95f      	bls.n	80076e4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007624:	2309      	movs	r3, #9
 8007626:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800762c:	e051      	b.n	80076d2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800762e:	f107 0316 	add.w	r3, r7, #22
 8007632:	4619      	mov	r1, r3
 8007634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007636:	f000 f8e8 	bl	800780a <USBH_GetNextDesc>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d146      	bne.n	80076d2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007648:	221a      	movs	r2, #26
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	3308      	adds	r3, #8
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	3302      	adds	r3, #2
 8007656:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800765a:	69f8      	ldr	r0, [r7, #28]
 800765c:	f000 f846 	bl	80076ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800766a:	e022      	b.n	80076b2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800766c:	f107 0316 	add.w	r3, r7, #22
 8007670:	4619      	mov	r1, r3
 8007672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007674:	f000 f8c9 	bl	800780a <USBH_GetNextDesc>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b05      	cmp	r3, #5
 8007680:	d117      	bne.n	80076b2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007686:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800768a:	3201      	adds	r2, #1
 800768c:	00d2      	lsls	r2, r2, #3
 800768e:	211a      	movs	r1, #26
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	4413      	add	r3, r2
 8007696:	3308      	adds	r3, #8
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	3304      	adds	r3, #4
 800769e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80076a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f000 f851 	bl	800774a <USBH_ParseEPDesc>
            ep_ix++;
 80076a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076ac:	3301      	adds	r3, #1
 80076ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d204      	bcs.n	80076c8 <USBH_ParseCfgDesc+0x120>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	885a      	ldrh	r2, [r3, #2]
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d8d1      	bhi.n	800766c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076cc:	3301      	adds	r3, #1
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d804      	bhi.n	80076e4 <USBH_ParseCfgDesc+0x13c>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	885a      	ldrh	r2, [r3, #2]
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d8a4      	bhi.n	800762e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80076e4:	bf00      	nop
 80076e6:	3728      	adds	r7, #40	; 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785a      	ldrb	r2, [r3, #1]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	789a      	ldrb	r2, [r3, #2]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	78da      	ldrb	r2, [r3, #3]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	791a      	ldrb	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	795a      	ldrb	r2, [r3, #5]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	799a      	ldrb	r2, [r3, #6]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	79da      	ldrb	r2, [r3, #7]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	7a1a      	ldrb	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	721a      	strb	r2, [r3, #8]
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	785a      	ldrb	r2, [r3, #1]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	789a      	ldrb	r2, [r3, #2]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	78da      	ldrb	r2, [r3, #3]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b29a      	uxth	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	3305      	adds	r3, #5
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	b29b      	uxth	r3, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	799a      	ldrb	r2, [r3, #6]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	719a      	strb	r2, [r3, #6]
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d120      	bne.n	80077fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	1e9a      	subs	r2, r3, #2
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	bf28      	it	cs
 80077c8:	4613      	movcs	r3, r2
 80077ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3302      	adds	r3, #2
 80077d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077d2:	2300      	movs	r3, #0
 80077d4:	82fb      	strh	r3, [r7, #22]
 80077d6:	e00b      	b.n	80077f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	781a      	ldrb	r2, [r3, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	3302      	adds	r3, #2
 80077ee:	82fb      	strh	r3, [r7, #22]
 80077f0:	8afa      	ldrh	r2, [r7, #22]
 80077f2:	8abb      	ldrh	r3, [r7, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d3ef      	bcc.n	80077d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
  }
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	881a      	ldrh	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	4413      	add	r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	789b      	ldrb	r3, [r3, #2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d002      	beq.n	8007860 <USBH_CtlReq+0x20>
 800785a:	2b02      	cmp	r3, #2
 800785c:	d00f      	beq.n	800787e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800785e:	e034      	b.n	80078ca <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2202      	movs	r2, #2
 8007876:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
    break;
 800787c:	e025      	b.n	80078ca <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f828 	bl	80078d4 <USBH_HandleControl>
 8007884:	4603      	mov	r3, r0
 8007886:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	75fb      	strb	r3, [r7, #23]
    break;
 800789e:	e013      	b.n	80078c8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d108      	bne.n	80078b8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80078b2:	2303      	movs	r3, #3
 80078b4:	75fb      	strb	r3, [r7, #23]
    break;
 80078b6:	e007      	b.n	80078c8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d104      	bne.n	80078c8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80078c4:	2302      	movs	r3, #2
 80078c6:	75fb      	strb	r3, [r7, #23]
    break;
 80078c8:	bf00      	nop
  }
  return status;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	7e1b      	ldrb	r3, [r3, #24]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	2b0a      	cmp	r3, #10
 80078ec:	f200 814c 	bhi.w	8007b88 <USBH_HandleControl+0x2b4>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <USBH_HandleControl+0x24>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007925 	.word	0x08007925
 80078fc:	0800793f 	.word	0x0800793f
 8007900:	080079a9 	.word	0x080079a9
 8007904:	080079cf 	.word	0x080079cf
 8007908:	08007a07 	.word	0x08007a07
 800790c:	08007a33 	.word	0x08007a33
 8007910:	08007a85 	.word	0x08007a85
 8007914:	08007aa7 	.word	0x08007aa7
 8007918:	08007ae3 	.word	0x08007ae3
 800791c:	08007b0b 	.word	0x08007b0b
 8007920:	08007b49 	.word	0x08007b49
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 0110 	add.w	r1, r3, #16
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	795b      	ldrb	r3, [r3, #5]
 800792e:	461a      	mov	r2, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f939 	bl	8007ba8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	761a      	strb	r2, [r3, #24]
    break;
 800793c:	e12f      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	795b      	ldrb	r3, [r3, #5]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fcb3 	bl	80082b0 <USBH_LL_GetURBState>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d11e      	bne.n	8007992 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7c1b      	ldrb	r3, [r3, #16]
 8007958:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800795c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	8adb      	ldrh	r3, [r3, #22]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007966:	7b7b      	ldrb	r3, [r7, #13]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d103      	bne.n	8007974 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2203      	movs	r2, #3
 8007970:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007972:	e10b      	b.n	8007b8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2205      	movs	r2, #5
 8007978:	761a      	strb	r2, [r3, #24]
    break;
 800797a:	e107      	b.n	8007b8c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800797c:	7b7b      	ldrb	r3, [r7, #13]
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d103      	bne.n	800798a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2209      	movs	r2, #9
 8007986:	761a      	strb	r2, [r3, #24]
    break;
 8007988:	e100      	b.n	8007b8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2207      	movs	r2, #7
 800798e:	761a      	strb	r2, [r3, #24]
    break;
 8007990:	e0fc      	b.n	8007b8c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	2b04      	cmp	r3, #4
 8007996:	d003      	beq.n	80079a0 <USBH_HandleControl+0xcc>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b02      	cmp	r3, #2
 800799c:	f040 80f6 	bne.w	8007b8c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	220b      	movs	r2, #11
 80079a4:	761a      	strb	r2, [r3, #24]
    break;
 80079a6:	e0f1      	b.n	8007b8c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6899      	ldr	r1, [r3, #8]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	899a      	ldrh	r2, [r3, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f930 	bl	8007c26 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2204      	movs	r2, #4
 80079ca:	761a      	strb	r2, [r3, #24]
    break;
 80079cc:	e0e7      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	791b      	ldrb	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fc6b 	bl	80082b0 <USBH_LL_GetURBState>
 80079da:	4603      	mov	r3, r0
 80079dc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d102      	bne.n	80079ea <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2209      	movs	r2, #9
 80079e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b05      	cmp	r3, #5
 80079ee:	d102      	bne.n	80079f6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80079f0:	2303      	movs	r3, #3
 80079f2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80079f4:	e0cc      	b.n	8007b90 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	f040 80c9 	bne.w	8007b90 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	220b      	movs	r2, #11
 8007a02:	761a      	strb	r2, [r3, #24]
    break;
 8007a04:	e0c4      	b.n	8007b90 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6899      	ldr	r1, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	899a      	ldrh	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7958      	ldrb	r0, [r3, #5]
 8007a12:	2301      	movs	r3, #1
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4603      	mov	r3, r0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f8df 	bl	8007bdc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	761a      	strb	r2, [r3, #24]
    break;
 8007a30:	e0b5      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc39 	bl	80082b0 <USBH_LL_GetURBState>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d103      	bne.n	8007a50 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2207      	movs	r2, #7
 8007a4c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a4e:	e0a1      	b.n	8007b94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d105      	bne.n	8007a62 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	220c      	movs	r2, #12
 8007a5a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	e098      	b.n	8007b94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d103      	bne.n	8007a70 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	761a      	strb	r2, [r3, #24]
    break;
 8007a6e:	e091      	b.n	8007b94 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	f040 808e 	bne.w	8007b94 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	220b      	movs	r2, #11
 8007a7c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	73fb      	strb	r3, [r7, #15]
    break;
 8007a82:	e087      	b.n	8007b94 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8ca 	bl	8007c26 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	761a      	strb	r2, [r3, #24]

    break;
 8007aa4:	e07b      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fbff 	bl	80082b0 <USBH_LL_GetURBState>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d105      	bne.n	8007ac8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	220d      	movs	r2, #13
 8007ac0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ac6:	e067      	b.n	8007b98 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d103      	bne.n	8007ad6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220b      	movs	r2, #11
 8007ad2:	761a      	strb	r2, [r3, #24]
    break;
 8007ad4:	e060      	b.n	8007b98 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b05      	cmp	r3, #5
 8007ada:	d15d      	bne.n	8007b98 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007adc:	2303      	movs	r3, #3
 8007ade:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae0:	e05a      	b.n	8007b98 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	795a      	ldrb	r2, [r3, #5]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4613      	mov	r3, r2
 8007aec:	2200      	movs	r2, #0
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f873 	bl	8007bdc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	220a      	movs	r2, #10
 8007b06:	761a      	strb	r2, [r3, #24]
    break;
 8007b08:	e049      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	795b      	ldrb	r3, [r3, #5]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fbcd 	bl	80082b0 <USBH_LL_GetURBState>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d105      	bne.n	8007b2c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	220d      	movs	r2, #13
 8007b28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007b2a:	e037      	b.n	8007b9c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d103      	bne.n	8007b3a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2209      	movs	r2, #9
 8007b36:	761a      	strb	r2, [r3, #24]
    break;
 8007b38:	e030      	b.n	8007b9c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d12d      	bne.n	8007b9c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	220b      	movs	r2, #11
 8007b44:	761a      	strb	r2, [r3, #24]
    break;
 8007b46:	e029      	b.n	8007b9c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7e5b      	ldrb	r3, [r3, #25]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	765a      	strb	r2, [r3, #25]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7e5b      	ldrb	r3, [r3, #25]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d809      	bhi.n	8007b70 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 faba 	bl	80080d6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007b6e:	e016      	b.n	8007b9e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b76:	2106      	movs	r1, #6
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007b82:	2302      	movs	r3, #2
 8007b84:	73fb      	strb	r3, [r7, #15]
    break;
 8007b86:	e00a      	b.n	8007b9e <USBH_HandleControl+0x2ca>

  default:
    break;
 8007b88:	bf00      	nop
 8007b8a:	e008      	b.n	8007b9e <USBH_HandleControl+0x2ca>
    break;
 8007b8c:	bf00      	nop
 8007b8e:	e006      	b.n	8007b9e <USBH_HandleControl+0x2ca>
    break;
 8007b90:	bf00      	nop
 8007b92:	e004      	b.n	8007b9e <USBH_HandleControl+0x2ca>
    break;
 8007b94:	bf00      	nop
 8007b96:	e002      	b.n	8007b9e <USBH_HandleControl+0x2ca>
    break;
 8007b98:	bf00      	nop
 8007b9a:	e000      	b.n	8007b9e <USBH_HandleControl+0x2ca>
    break;
 8007b9c:	bf00      	nop
  }
  return status;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bb6:	79f9      	ldrb	r1, [r7, #7]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	9302      	str	r3, [sp, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fb3e 	bl	800824e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4611      	mov	r1, r2
 8007be8:	461a      	mov	r2, r3
 8007bea:	460b      	mov	r3, r1
 8007bec:	80fb      	strh	r3, [r7, #6]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c00:	7979      	ldrb	r1, [r7, #5]
 8007c02:	7e3b      	ldrb	r3, [r7, #24]
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fb19 	bl	800824e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b088      	sub	sp, #32
 8007c2a:	af04      	add	r7, sp, #16
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	4611      	mov	r1, r2
 8007c32:	461a      	mov	r2, r3
 8007c34:	460b      	mov	r3, r1
 8007c36:	80fb      	strh	r3, [r7, #6]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c3c:	7979      	ldrb	r1, [r7, #5]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	9302      	str	r3, [sp, #8]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2201      	movs	r2, #1
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fafb 	bl	800824e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c58:	2300      	movs	r3, #0

}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b088      	sub	sp, #32
 8007c66:	af04      	add	r7, sp, #16
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	461a      	mov	r2, r3
 8007c70:	460b      	mov	r3, r1
 8007c72:	80fb      	strh	r3, [r7, #6]
 8007c74:	4613      	mov	r3, r2
 8007c76:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c86:	7979      	ldrb	r1, [r7, #5]
 8007c88:	7e3b      	ldrb	r3, [r7, #24]
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2301      	movs	r3, #1
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fad6 	bl	800824e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	460b      	mov	r3, r1
 8007cbc:	80fb      	strh	r3, [r7, #6]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007cc2:	7979      	ldrb	r1, [r7, #5]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fab8 	bl	800824e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	70fb      	strb	r3, [r7, #3]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70bb      	strb	r3, [r7, #2]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007d02:	7878      	ldrb	r0, [r7, #1]
 8007d04:	78ba      	ldrb	r2, [r7, #2]
 8007d06:	78f9      	ldrb	r1, [r7, #3]
 8007d08:	8b3b      	ldrh	r3, [r7, #24]
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	7d3b      	ldrb	r3, [r7, #20]
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	7c3b      	ldrb	r3, [r7, #16]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa4b 	bl	80081b2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007d1c:	2300      	movs	r3, #0

}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa6a 	bl	8008210 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d3c:	2300      	movs	r3, #0

}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f831 	bl	8007dba <USBH_GetFreePipe>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d007      	beq.n	8007d76 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	89fa      	ldrh	r2, [r7, #14]
 8007d6a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32e0      	adds	r2, #224	; 0xe0
 8007d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007d76:	89fb      	ldrh	r3, [r7, #14]
 8007d78:	b2db      	uxtb	r3, r3
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	2b0a      	cmp	r3, #10
 8007d92:	d80b      	bhi.n	8007dac <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32e0      	adds	r2, #224	; 0xe0
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32e0      	adds	r2, #224	; 0xe0
 8007da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	e00e      	b.n	8007dea <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dcc:	7bfa      	ldrb	r2, [r7, #15]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32e0      	adds	r2, #224	; 0xe0
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	e007      	b.n	8007df4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	3301      	adds	r3, #1
 8007de8:	73fb      	strb	r3, [r7, #15]
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b0a      	cmp	r3, #10
 8007dee:	d9ed      	bls.n	8007dcc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e04:	2201      	movs	r2, #1
 8007e06:	490e      	ldr	r1, [pc, #56]	; (8007e40 <MX_USB_HOST_Init+0x40>)
 8007e08:	480e      	ldr	r0, [pc, #56]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e0a:	f7fe fdbb 	bl	8006984 <USBH_Init>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e14:	f7f8 ffc4 	bl	8000da0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e18:	490b      	ldr	r1, [pc, #44]	; (8007e48 <MX_USB_HOST_Init+0x48>)
 8007e1a:	480a      	ldr	r0, [pc, #40]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e1c:	f7fe fe25 	bl	8006a6a <USBH_RegisterClass>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e26:	f7f8 ffbb 	bl	8000da0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e2a:	4806      	ldr	r0, [pc, #24]	; (8007e44 <MX_USB_HOST_Init+0x44>)
 8007e2c:	f7fe feaa 	bl	8006b84 <USBH_Start>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e36:	f7f8 ffb3 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e3a:	bf00      	nop
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	200002a4 	.word	0x200002a4
 8007e48:	2000001c 	.word	0x2000001c

08007e4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e50:	4802      	ldr	r0, [pc, #8]	; (8007e5c <MX_USB_HOST_Process+0x10>)
 8007e52:	f7fe fea7 	bl	8006ba4 <USBH_Process>
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200002a4 	.word	0x200002a4

08007e60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d819      	bhi.n	8007ea8 <USBH_UserProcess+0x48>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <USBH_UserProcess+0x1c>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007e91 	.word	0x08007e91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007e92:	2203      	movs	r2, #3
 8007e94:	701a      	strb	r2, [r3, #0]
  break;
 8007e96:	e008      	b.n	8007eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	701a      	strb	r2, [r3, #0]
  break;
 8007e9e:	e004      	b.n	8007eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <USBH_UserProcess+0x58>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
  break;
 8007ea6:	e000      	b.n	8007eaa <USBH_UserProcess+0x4a>

  default:
  break;
 8007ea8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200000c4 	.word	0x200000c4

08007ebc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	; 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	609a      	str	r2, [r3, #8]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007edc:	d147      	bne.n	8007f6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	4a24      	ldr	r2, [pc, #144]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ee8:	f043 0301 	orr.w	r3, r3, #1
 8007eec:	6313      	str	r3, [r2, #48]	; 0x30
 8007eee:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	481b      	ldr	r0, [pc, #108]	; (8007f7c <HAL_HCD_MspInit+0xc0>)
 8007f10:	f7f9 fb2a 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f22:	2300      	movs	r3, #0
 8007f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f26:	230a      	movs	r3, #10
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4812      	ldr	r0, [pc, #72]	; (8007f7c <HAL_HCD_MspInit+0xc0>)
 8007f32:	f7f9 fb19 	bl	8001568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f36:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	6353      	str	r3, [r2, #52]	; 0x34
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	4a0b      	ldr	r2, [pc, #44]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f50:	6453      	str	r3, [r2, #68]	; 0x44
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <HAL_HCD_MspInit+0xbc>)
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	2043      	movs	r0, #67	; 0x43
 8007f64:	f7f9 fac9 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f68:	2043      	movs	r0, #67	; 0x43
 8007f6a:	f7f9 fae2 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	40020000 	.word	0x40020000

08007f80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff f8b9 	bl	8007106 <USBH_LL_IncTimer>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff f8fe 	bl	80071ac <USBH_LL_Connect>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f916 	bl	80071f8 <USBH_LL_Disconnect>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff f8ab 	bl	800715a <USBH_LL_PortEnabled>
} 
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff f8ab 	bl	8007176 <USBH_LL_PortDisabled>
} 
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d12a      	bne.n	8008090 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800803a:	4a18      	ldr	r2, [pc, #96]	; (800809c <USBH_LL_Init+0x74>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a15      	ldr	r2, [pc, #84]	; (800809c <USBH_LL_Init+0x74>)
 8008046:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <USBH_LL_Init+0x74>)
 800804c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008050:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <USBH_LL_Init+0x74>)
 8008054:	2208      	movs	r2, #8
 8008056:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008058:	4b10      	ldr	r3, [pc, #64]	; (800809c <USBH_LL_Init+0x74>)
 800805a:	2201      	movs	r2, #1
 800805c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <USBH_LL_Init+0x74>)
 8008060:	2200      	movs	r2, #0
 8008062:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008064:	4b0d      	ldr	r3, [pc, #52]	; (800809c <USBH_LL_Init+0x74>)
 8008066:	2202      	movs	r2, #2
 8008068:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <USBH_LL_Init+0x74>)
 800806c:	2200      	movs	r2, #0
 800806e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008070:	480a      	ldr	r0, [pc, #40]	; (800809c <USBH_LL_Init+0x74>)
 8008072:	f7f9 fc2c 	bl	80018ce <HAL_HCD_Init>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800807c:	f7f8 fe90 	bl	8000da0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008080:	4806      	ldr	r0, [pc, #24]	; (800809c <USBH_LL_Init+0x74>)
 8008082:	f7fa f827 	bl	80020d4 <HAL_HCD_GetCurrentFrame>
 8008086:	4603      	mov	r3, r0
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff f82c 	bl	80070e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000670 	.word	0x20000670

080080a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f9 ff94 	bl	8001fe4 <HAL_HCD_Start>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f95c 	bl	8008380 <USBH_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7f9 ff9c 	bl	800202a <HAL_HCD_Stop>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f941 	bl	8008380 <USBH_Get_USB_Status>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008102:	7bbb      	ldrb	r3, [r7, #14]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800811e:	4618      	mov	r0, r3
 8008120:	f7f9 ffe6 	bl	80020f0 <HAL_HCD_GetCurrentSpeed>
 8008124:	4603      	mov	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d007      	beq.n	800813a <USBH_LL_GetSpeed+0x2e>
 800812a:	2b01      	cmp	r3, #1
 800812c:	d302      	bcc.n	8008134 <USBH_LL_GetSpeed+0x28>
 800812e:	2b02      	cmp	r3, #2
 8008130:	d006      	beq.n	8008140 <USBH_LL_GetSpeed+0x34>
 8008132:	e008      	b.n	8008146 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
    break;
 8008138:	e008      	b.n	800814c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800813a:	2301      	movs	r3, #1
 800813c:	73fb      	strb	r3, [r7, #15]
    break;
 800813e:	e005      	b.n	800814c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008140:	2302      	movs	r3, #2
 8008142:	73fb      	strb	r3, [r7, #15]
    break;
 8008144:	e002      	b.n	800814c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008146:	2301      	movs	r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]
    break;
 800814a:	bf00      	nop
  }
  return  speed;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800816c:	4618      	mov	r0, r3
 800816e:	f7f9 ff79 	bl	8002064 <HAL_HCD_ResetPort>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f901 	bl	8008380 <USBH_Get_USB_Status>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008182:	7bbb      	ldrb	r3, [r7, #14]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819e:	78fa      	ldrb	r2, [r7, #3]
 80081a0:	4611      	mov	r1, r2
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f9 ff81 	bl	80020aa <HAL_HCD_HC_GetXferCount>
 80081a8:	4603      	mov	r3, r0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081b2:	b590      	push	{r4, r7, lr}
 80081b4:	b089      	sub	sp, #36	; 0x24
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	70fb      	strb	r3, [r7, #3]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70bb      	strb	r3, [r7, #2]
 80081c8:	4613      	mov	r3, r2
 80081ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80081da:	787c      	ldrb	r4, [r7, #1]
 80081dc:	78ba      	ldrb	r2, [r7, #2]
 80081de:	78f9      	ldrb	r1, [r7, #3]
 80081e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e2:	9302      	str	r3, [sp, #8]
 80081e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4623      	mov	r3, r4
 80081f2:	f7f9 fbce 	bl	8001992 <HAL_HCD_HC_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f8bf 	bl	8008380 <USBH_Get_USB_Status>
 8008202:	4603      	mov	r3, r0
 8008204:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008206:	7bbb      	ldrb	r3, [r7, #14]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	bd90      	pop	{r4, r7, pc}

08008210 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800822a:	78fa      	ldrb	r2, [r7, #3]
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7f9 fc47 	bl	8001ac2 <HAL_HCD_HC_Halt>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f8a0 	bl	8008380 <USBH_Get_USB_Status>
 8008240:	4603      	mov	r3, r0
 8008242:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008244:	7bbb      	ldrb	r3, [r7, #14]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800824e:	b590      	push	{r4, r7, lr}
 8008250:	b089      	sub	sp, #36	; 0x24
 8008252:	af04      	add	r7, sp, #16
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	461a      	mov	r2, r3
 800825c:	4603      	mov	r3, r0
 800825e:	70fb      	strb	r3, [r7, #3]
 8008260:	460b      	mov	r3, r1
 8008262:	70bb      	strb	r3, [r7, #2]
 8008264:	4613      	mov	r3, r2
 8008266:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008276:	787c      	ldrb	r4, [r7, #1]
 8008278:	78ba      	ldrb	r2, [r7, #2]
 800827a:	78f9      	ldrb	r1, [r7, #3]
 800827c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008284:	9302      	str	r3, [sp, #8]
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4623      	mov	r3, r4
 8008292:	f7f9 fc39 	bl	8001b08 <HAL_HCD_HC_SubmitRequest>
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f86f 	bl	8008380 <USBH_Get_USB_Status>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}

080082b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7f9 feda 	bl	8002080 <HAL_HCD_HC_GetURBState>
 80082cc:	4603      	mov	r3, r0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d103      	bne.n	80082f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 f872 	bl	80083d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082f4:	20c8      	movs	r0, #200	; 0xc8
 80082f6:	f7f9 f803 	bl	8001300 <HAL_Delay>
  return USBH_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
 8008310:	4613      	mov	r3, r2
 8008312:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800831a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	440b      	add	r3, r1
 800832a:	333b      	adds	r3, #59	; 0x3b
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	440b      	add	r3, r1
 8008340:	3350      	adds	r3, #80	; 0x50
 8008342:	78ba      	ldrb	r2, [r7, #2]
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e009      	b.n	800835c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	440b      	add	r3, r1
 8008356:	3351      	adds	r3, #81	; 0x51
 8008358:	78ba      	ldrb	r2, [r7, #2]
 800835a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7f8 ffc4 	bl	8001300 <HAL_Delay>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d817      	bhi.n	80083c4 <USBH_Get_USB_Status+0x44>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <USBH_Get_USB_Status+0x1c>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b3 	.word	0x080083b3
 80083a4:	080083b9 	.word	0x080083b9
 80083a8:	080083bf 	.word	0x080083bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
    break;
 80083b0:	e00b      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083b2:	2302      	movs	r3, #2
 80083b4:	73fb      	strb	r3, [r7, #15]
    break;
 80083b6:	e008      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
    break;
 80083bc:	e005      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083be:	2302      	movs	r3, #2
 80083c0:	73fb      	strb	r3, [r7, #15]
    break;
 80083c2:	e002      	b.n	80083ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	bf00      	nop
  }
  return usb_status;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	e001      	b.n	80083f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	461a      	mov	r2, r3
 80083fa:	2101      	movs	r1, #1
 80083fc:	4803      	ldr	r0, [pc, #12]	; (800840c <MX_DriverVbusFS+0x34>)
 80083fe:	f7f9 fa4d 	bl	800189c <HAL_GPIO_WritePin>
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40020800 	.word	0x40020800

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	; (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	2000003c 	.word	0x2000003c

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4e0d      	ldr	r6, [pc, #52]	; (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	; (8008458 <__libc_init_array+0x3c>)
 8008422:	1ba4      	subs	r4, r4, r6
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2500      	movs	r5, #0
 8008428:	42a5      	cmp	r5, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4e0b      	ldr	r6, [pc, #44]	; (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	; (8008460 <__libc_init_array+0x44>)
 8008430:	f000 fc36 	bl	8008ca0 <_init>
 8008434:	1ba4      	subs	r4, r4, r6
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2500      	movs	r5, #0
 800843a:	42a5      	cmp	r5, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008444:	4798      	blx	r3
 8008446:	3501      	adds	r5, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800844e:	4798      	blx	r3
 8008450:	3501      	adds	r5, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	08008d20 	.word	0x08008d20
 8008458:	08008d20 	.word	0x08008d20
 800845c:	08008d20 	.word	0x08008d20
 8008460:	08008d24 	.word	0x08008d24

08008464 <malloc>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <malloc+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f000 b861 	b.w	8008530 <_malloc_r>
 800846e:	bf00      	nop
 8008470:	2000003c 	.word	0x2000003c

08008474 <free>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <free+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 b80b 	b.w	8008494 <_free_r>
 800847e:	bf00      	nop
 8008480:	2000003c 	.word	0x2000003c

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <_free_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4605      	mov	r5, r0
 8008498:	2900      	cmp	r1, #0
 800849a:	d045      	beq.n	8008528 <_free_r+0x94>
 800849c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a0:	1f0c      	subs	r4, r1, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfb8      	it	lt
 80084a6:	18e4      	addlt	r4, r4, r3
 80084a8:	f000 f8cc 	bl	8008644 <__malloc_lock>
 80084ac:	4a1f      	ldr	r2, [pc, #124]	; (800852c <_free_r+0x98>)
 80084ae:	6813      	ldr	r3, [r2, #0]
 80084b0:	4610      	mov	r0, r2
 80084b2:	b933      	cbnz	r3, 80084c2 <_free_r+0x2e>
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	6014      	str	r4, [r2, #0]
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084be:	f000 b8c2 	b.w	8008646 <__malloc_unlock>
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	d90c      	bls.n	80084e0 <_free_r+0x4c>
 80084c6:	6821      	ldr	r1, [r4, #0]
 80084c8:	1862      	adds	r2, r4, r1
 80084ca:	4293      	cmp	r3, r2
 80084cc:	bf04      	itt	eq
 80084ce:	681a      	ldreq	r2, [r3, #0]
 80084d0:	685b      	ldreq	r3, [r3, #4]
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	bf04      	itt	eq
 80084d6:	1852      	addeq	r2, r2, r1
 80084d8:	6022      	streq	r2, [r4, #0]
 80084da:	6004      	str	r4, [r0, #0]
 80084dc:	e7ec      	b.n	80084b8 <_free_r+0x24>
 80084de:	4613      	mov	r3, r2
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	b10a      	cbz	r2, 80084e8 <_free_r+0x54>
 80084e4:	42a2      	cmp	r2, r4
 80084e6:	d9fa      	bls.n	80084de <_free_r+0x4a>
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	1858      	adds	r0, r3, r1
 80084ec:	42a0      	cmp	r0, r4
 80084ee:	d10b      	bne.n	8008508 <_free_r+0x74>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	4401      	add	r1, r0
 80084f4:	1858      	adds	r0, r3, r1
 80084f6:	4282      	cmp	r2, r0
 80084f8:	6019      	str	r1, [r3, #0]
 80084fa:	d1dd      	bne.n	80084b8 <_free_r+0x24>
 80084fc:	6810      	ldr	r0, [r2, #0]
 80084fe:	6852      	ldr	r2, [r2, #4]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	4401      	add	r1, r0
 8008504:	6019      	str	r1, [r3, #0]
 8008506:	e7d7      	b.n	80084b8 <_free_r+0x24>
 8008508:	d902      	bls.n	8008510 <_free_r+0x7c>
 800850a:	230c      	movs	r3, #12
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	e7d3      	b.n	80084b8 <_free_r+0x24>
 8008510:	6820      	ldr	r0, [r4, #0]
 8008512:	1821      	adds	r1, r4, r0
 8008514:	428a      	cmp	r2, r1
 8008516:	bf04      	itt	eq
 8008518:	6811      	ldreq	r1, [r2, #0]
 800851a:	6852      	ldreq	r2, [r2, #4]
 800851c:	6062      	str	r2, [r4, #4]
 800851e:	bf04      	itt	eq
 8008520:	1809      	addeq	r1, r1, r0
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	605c      	str	r4, [r3, #4]
 8008526:	e7c7      	b.n	80084b8 <_free_r+0x24>
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	200000c8 	.word	0x200000c8

08008530 <_malloc_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	1ccd      	adds	r5, r1, #3
 8008534:	f025 0503 	bic.w	r5, r5, #3
 8008538:	3508      	adds	r5, #8
 800853a:	2d0c      	cmp	r5, #12
 800853c:	bf38      	it	cc
 800853e:	250c      	movcc	r5, #12
 8008540:	2d00      	cmp	r5, #0
 8008542:	4606      	mov	r6, r0
 8008544:	db01      	blt.n	800854a <_malloc_r+0x1a>
 8008546:	42a9      	cmp	r1, r5
 8008548:	d903      	bls.n	8008552 <_malloc_r+0x22>
 800854a:	230c      	movs	r3, #12
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	2000      	movs	r0, #0
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	f000 f877 	bl	8008644 <__malloc_lock>
 8008556:	4a21      	ldr	r2, [pc, #132]	; (80085dc <_malloc_r+0xac>)
 8008558:	6814      	ldr	r4, [r2, #0]
 800855a:	4621      	mov	r1, r4
 800855c:	b991      	cbnz	r1, 8008584 <_malloc_r+0x54>
 800855e:	4c20      	ldr	r4, [pc, #128]	; (80085e0 <_malloc_r+0xb0>)
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	b91b      	cbnz	r3, 800856c <_malloc_r+0x3c>
 8008564:	4630      	mov	r0, r6
 8008566:	f000 f83d 	bl	80085e4 <_sbrk_r>
 800856a:	6020      	str	r0, [r4, #0]
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f838 	bl	80085e4 <_sbrk_r>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d124      	bne.n	80085c2 <_malloc_r+0x92>
 8008578:	230c      	movs	r3, #12
 800857a:	6033      	str	r3, [r6, #0]
 800857c:	4630      	mov	r0, r6
 800857e:	f000 f862 	bl	8008646 <__malloc_unlock>
 8008582:	e7e4      	b.n	800854e <_malloc_r+0x1e>
 8008584:	680b      	ldr	r3, [r1, #0]
 8008586:	1b5b      	subs	r3, r3, r5
 8008588:	d418      	bmi.n	80085bc <_malloc_r+0x8c>
 800858a:	2b0b      	cmp	r3, #11
 800858c:	d90f      	bls.n	80085ae <_malloc_r+0x7e>
 800858e:	600b      	str	r3, [r1, #0]
 8008590:	50cd      	str	r5, [r1, r3]
 8008592:	18cc      	adds	r4, r1, r3
 8008594:	4630      	mov	r0, r6
 8008596:	f000 f856 	bl	8008646 <__malloc_unlock>
 800859a:	f104 000b 	add.w	r0, r4, #11
 800859e:	1d23      	adds	r3, r4, #4
 80085a0:	f020 0007 	bic.w	r0, r0, #7
 80085a4:	1ac3      	subs	r3, r0, r3
 80085a6:	d0d3      	beq.n	8008550 <_malloc_r+0x20>
 80085a8:	425a      	negs	r2, r3
 80085aa:	50e2      	str	r2, [r4, r3]
 80085ac:	e7d0      	b.n	8008550 <_malloc_r+0x20>
 80085ae:	428c      	cmp	r4, r1
 80085b0:	684b      	ldr	r3, [r1, #4]
 80085b2:	bf16      	itet	ne
 80085b4:	6063      	strne	r3, [r4, #4]
 80085b6:	6013      	streq	r3, [r2, #0]
 80085b8:	460c      	movne	r4, r1
 80085ba:	e7eb      	b.n	8008594 <_malloc_r+0x64>
 80085bc:	460c      	mov	r4, r1
 80085be:	6849      	ldr	r1, [r1, #4]
 80085c0:	e7cc      	b.n	800855c <_malloc_r+0x2c>
 80085c2:	1cc4      	adds	r4, r0, #3
 80085c4:	f024 0403 	bic.w	r4, r4, #3
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d005      	beq.n	80085d8 <_malloc_r+0xa8>
 80085cc:	1a21      	subs	r1, r4, r0
 80085ce:	4630      	mov	r0, r6
 80085d0:	f000 f808 	bl	80085e4 <_sbrk_r>
 80085d4:	3001      	adds	r0, #1
 80085d6:	d0cf      	beq.n	8008578 <_malloc_r+0x48>
 80085d8:	6025      	str	r5, [r4, #0]
 80085da:	e7db      	b.n	8008594 <_malloc_r+0x64>
 80085dc:	200000c8 	.word	0x200000c8
 80085e0:	200000cc 	.word	0x200000cc

080085e4 <_sbrk_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4c06      	ldr	r4, [pc, #24]	; (8008600 <_sbrk_r+0x1c>)
 80085e8:	2300      	movs	r3, #0
 80085ea:	4605      	mov	r5, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	f7f8 fda8 	bl	8001144 <_sbrk>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_sbrk_r+0x1a>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_sbrk_r+0x1a>
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20000934 	.word	0x20000934

08008604 <siprintf>:
 8008604:	b40e      	push	{r1, r2, r3}
 8008606:	b500      	push	{lr}
 8008608:	b09c      	sub	sp, #112	; 0x70
 800860a:	ab1d      	add	r3, sp, #116	; 0x74
 800860c:	9002      	str	r0, [sp, #8]
 800860e:	9006      	str	r0, [sp, #24]
 8008610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008614:	4809      	ldr	r0, [pc, #36]	; (800863c <siprintf+0x38>)
 8008616:	9107      	str	r1, [sp, #28]
 8008618:	9104      	str	r1, [sp, #16]
 800861a:	4909      	ldr	r1, [pc, #36]	; (8008640 <siprintf+0x3c>)
 800861c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008620:	9105      	str	r1, [sp, #20]
 8008622:	6800      	ldr	r0, [r0, #0]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	a902      	add	r1, sp, #8
 8008628:	f000 f868 	bl	80086fc <_svfiprintf_r>
 800862c:	9b02      	ldr	r3, [sp, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	b01c      	add	sp, #112	; 0x70
 8008634:	f85d eb04 	ldr.w	lr, [sp], #4
 8008638:	b003      	add	sp, #12
 800863a:	4770      	bx	lr
 800863c:	2000003c 	.word	0x2000003c
 8008640:	ffff0208 	.word	0xffff0208

08008644 <__malloc_lock>:
 8008644:	4770      	bx	lr

08008646 <__malloc_unlock>:
 8008646:	4770      	bx	lr

08008648 <__ssputs_r>:
 8008648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864c:	688e      	ldr	r6, [r1, #8]
 800864e:	429e      	cmp	r6, r3
 8008650:	4682      	mov	sl, r0
 8008652:	460c      	mov	r4, r1
 8008654:	4690      	mov	r8, r2
 8008656:	4699      	mov	r9, r3
 8008658:	d837      	bhi.n	80086ca <__ssputs_r+0x82>
 800865a:	898a      	ldrh	r2, [r1, #12]
 800865c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008660:	d031      	beq.n	80086c6 <__ssputs_r+0x7e>
 8008662:	6825      	ldr	r5, [r4, #0]
 8008664:	6909      	ldr	r1, [r1, #16]
 8008666:	1a6f      	subs	r7, r5, r1
 8008668:	6965      	ldr	r5, [r4, #20]
 800866a:	2302      	movs	r3, #2
 800866c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008670:	fb95 f5f3 	sdiv	r5, r5, r3
 8008674:	f109 0301 	add.w	r3, r9, #1
 8008678:	443b      	add	r3, r7
 800867a:	429d      	cmp	r5, r3
 800867c:	bf38      	it	cc
 800867e:	461d      	movcc	r5, r3
 8008680:	0553      	lsls	r3, r2, #21
 8008682:	d530      	bpl.n	80086e6 <__ssputs_r+0x9e>
 8008684:	4629      	mov	r1, r5
 8008686:	f7ff ff53 	bl	8008530 <_malloc_r>
 800868a:	4606      	mov	r6, r0
 800868c:	b950      	cbnz	r0, 80086a4 <__ssputs_r+0x5c>
 800868e:	230c      	movs	r3, #12
 8008690:	f8ca 3000 	str.w	r3, [sl]
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a4:	463a      	mov	r2, r7
 80086a6:	6921      	ldr	r1, [r4, #16]
 80086a8:	f000 faa8 	bl	8008bfc <memcpy>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	6126      	str	r6, [r4, #16]
 80086ba:	6165      	str	r5, [r4, #20]
 80086bc:	443e      	add	r6, r7
 80086be:	1bed      	subs	r5, r5, r7
 80086c0:	6026      	str	r6, [r4, #0]
 80086c2:	60a5      	str	r5, [r4, #8]
 80086c4:	464e      	mov	r6, r9
 80086c6:	454e      	cmp	r6, r9
 80086c8:	d900      	bls.n	80086cc <__ssputs_r+0x84>
 80086ca:	464e      	mov	r6, r9
 80086cc:	4632      	mov	r2, r6
 80086ce:	4641      	mov	r1, r8
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	f000 fa9e 	bl	8008c12 <memmove>
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	1b9b      	subs	r3, r3, r6
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	441e      	add	r6, r3
 80086e0:	6026      	str	r6, [r4, #0]
 80086e2:	2000      	movs	r0, #0
 80086e4:	e7dc      	b.n	80086a0 <__ssputs_r+0x58>
 80086e6:	462a      	mov	r2, r5
 80086e8:	f000 faac 	bl	8008c44 <_realloc_r>
 80086ec:	4606      	mov	r6, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d1e2      	bne.n	80086b8 <__ssputs_r+0x70>
 80086f2:	6921      	ldr	r1, [r4, #16]
 80086f4:	4650      	mov	r0, sl
 80086f6:	f7ff fecd 	bl	8008494 <_free_r>
 80086fa:	e7c8      	b.n	800868e <__ssputs_r+0x46>

080086fc <_svfiprintf_r>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	461d      	mov	r5, r3
 8008702:	898b      	ldrh	r3, [r1, #12]
 8008704:	061f      	lsls	r7, r3, #24
 8008706:	b09d      	sub	sp, #116	; 0x74
 8008708:	4680      	mov	r8, r0
 800870a:	460c      	mov	r4, r1
 800870c:	4616      	mov	r6, r2
 800870e:	d50f      	bpl.n	8008730 <_svfiprintf_r+0x34>
 8008710:	690b      	ldr	r3, [r1, #16]
 8008712:	b96b      	cbnz	r3, 8008730 <_svfiprintf_r+0x34>
 8008714:	2140      	movs	r1, #64	; 0x40
 8008716:	f7ff ff0b 	bl	8008530 <_malloc_r>
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	6120      	str	r0, [r4, #16]
 800871e:	b928      	cbnz	r0, 800872c <_svfiprintf_r+0x30>
 8008720:	230c      	movs	r3, #12
 8008722:	f8c8 3000 	str.w	r3, [r8]
 8008726:	f04f 30ff 	mov.w	r0, #4294967295
 800872a:	e0c8      	b.n	80088be <_svfiprintf_r+0x1c2>
 800872c:	2340      	movs	r3, #64	; 0x40
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	2300      	movs	r3, #0
 8008732:	9309      	str	r3, [sp, #36]	; 0x24
 8008734:	2320      	movs	r3, #32
 8008736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800873a:	2330      	movs	r3, #48	; 0x30
 800873c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008740:	9503      	str	r5, [sp, #12]
 8008742:	f04f 0b01 	mov.w	fp, #1
 8008746:	4637      	mov	r7, r6
 8008748:	463d      	mov	r5, r7
 800874a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800874e:	b10b      	cbz	r3, 8008754 <_svfiprintf_r+0x58>
 8008750:	2b25      	cmp	r3, #37	; 0x25
 8008752:	d13e      	bne.n	80087d2 <_svfiprintf_r+0xd6>
 8008754:	ebb7 0a06 	subs.w	sl, r7, r6
 8008758:	d00b      	beq.n	8008772 <_svfiprintf_r+0x76>
 800875a:	4653      	mov	r3, sl
 800875c:	4632      	mov	r2, r6
 800875e:	4621      	mov	r1, r4
 8008760:	4640      	mov	r0, r8
 8008762:	f7ff ff71 	bl	8008648 <__ssputs_r>
 8008766:	3001      	adds	r0, #1
 8008768:	f000 80a4 	beq.w	80088b4 <_svfiprintf_r+0x1b8>
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	4453      	add	r3, sl
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	783b      	ldrb	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 809d 	beq.w	80088b4 <_svfiprintf_r+0x1b8>
 800877a:	2300      	movs	r3, #0
 800877c:	f04f 32ff 	mov.w	r2, #4294967295
 8008780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	9307      	str	r3, [sp, #28]
 8008788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800878c:	931a      	str	r3, [sp, #104]	; 0x68
 800878e:	462f      	mov	r7, r5
 8008790:	2205      	movs	r2, #5
 8008792:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008796:	4850      	ldr	r0, [pc, #320]	; (80088d8 <_svfiprintf_r+0x1dc>)
 8008798:	f7f7 fd22 	bl	80001e0 <memchr>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	b9d0      	cbnz	r0, 80087d6 <_svfiprintf_r+0xda>
 80087a0:	06d9      	lsls	r1, r3, #27
 80087a2:	bf44      	itt	mi
 80087a4:	2220      	movmi	r2, #32
 80087a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087aa:	071a      	lsls	r2, r3, #28
 80087ac:	bf44      	itt	mi
 80087ae:	222b      	movmi	r2, #43	; 0x2b
 80087b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087b4:	782a      	ldrb	r2, [r5, #0]
 80087b6:	2a2a      	cmp	r2, #42	; 0x2a
 80087b8:	d015      	beq.n	80087e6 <_svfiprintf_r+0xea>
 80087ba:	9a07      	ldr	r2, [sp, #28]
 80087bc:	462f      	mov	r7, r5
 80087be:	2000      	movs	r0, #0
 80087c0:	250a      	movs	r5, #10
 80087c2:	4639      	mov	r1, r7
 80087c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c8:	3b30      	subs	r3, #48	; 0x30
 80087ca:	2b09      	cmp	r3, #9
 80087cc:	d94d      	bls.n	800886a <_svfiprintf_r+0x16e>
 80087ce:	b1b8      	cbz	r0, 8008800 <_svfiprintf_r+0x104>
 80087d0:	e00f      	b.n	80087f2 <_svfiprintf_r+0xf6>
 80087d2:	462f      	mov	r7, r5
 80087d4:	e7b8      	b.n	8008748 <_svfiprintf_r+0x4c>
 80087d6:	4a40      	ldr	r2, [pc, #256]	; (80088d8 <_svfiprintf_r+0x1dc>)
 80087d8:	1a80      	subs	r0, r0, r2
 80087da:	fa0b f000 	lsl.w	r0, fp, r0
 80087de:	4318      	orrs	r0, r3
 80087e0:	9004      	str	r0, [sp, #16]
 80087e2:	463d      	mov	r5, r7
 80087e4:	e7d3      	b.n	800878e <_svfiprintf_r+0x92>
 80087e6:	9a03      	ldr	r2, [sp, #12]
 80087e8:	1d11      	adds	r1, r2, #4
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	9103      	str	r1, [sp, #12]
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	db01      	blt.n	80087f6 <_svfiprintf_r+0xfa>
 80087f2:	9207      	str	r2, [sp, #28]
 80087f4:	e004      	b.n	8008800 <_svfiprintf_r+0x104>
 80087f6:	4252      	negs	r2, r2
 80087f8:	f043 0302 	orr.w	r3, r3, #2
 80087fc:	9207      	str	r2, [sp, #28]
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	783b      	ldrb	r3, [r7, #0]
 8008802:	2b2e      	cmp	r3, #46	; 0x2e
 8008804:	d10c      	bne.n	8008820 <_svfiprintf_r+0x124>
 8008806:	787b      	ldrb	r3, [r7, #1]
 8008808:	2b2a      	cmp	r3, #42	; 0x2a
 800880a:	d133      	bne.n	8008874 <_svfiprintf_r+0x178>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	9203      	str	r2, [sp, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfb8      	it	lt
 8008818:	f04f 33ff 	movlt.w	r3, #4294967295
 800881c:	3702      	adds	r7, #2
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	4d2e      	ldr	r5, [pc, #184]	; (80088dc <_svfiprintf_r+0x1e0>)
 8008822:	7839      	ldrb	r1, [r7, #0]
 8008824:	2203      	movs	r2, #3
 8008826:	4628      	mov	r0, r5
 8008828:	f7f7 fcda 	bl	80001e0 <memchr>
 800882c:	b138      	cbz	r0, 800883e <_svfiprintf_r+0x142>
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	1b40      	subs	r0, r0, r5
 8008832:	fa03 f000 	lsl.w	r0, r3, r0
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	4303      	orrs	r3, r0
 800883a:	3701      	adds	r7, #1
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	7839      	ldrb	r1, [r7, #0]
 8008840:	4827      	ldr	r0, [pc, #156]	; (80088e0 <_svfiprintf_r+0x1e4>)
 8008842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008846:	2206      	movs	r2, #6
 8008848:	1c7e      	adds	r6, r7, #1
 800884a:	f7f7 fcc9 	bl	80001e0 <memchr>
 800884e:	2800      	cmp	r0, #0
 8008850:	d038      	beq.n	80088c4 <_svfiprintf_r+0x1c8>
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <_svfiprintf_r+0x1e8>)
 8008854:	bb13      	cbnz	r3, 800889c <_svfiprintf_r+0x1a0>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	3307      	adds	r3, #7
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	3308      	adds	r3, #8
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008864:	444b      	add	r3, r9
 8008866:	9309      	str	r3, [sp, #36]	; 0x24
 8008868:	e76d      	b.n	8008746 <_svfiprintf_r+0x4a>
 800886a:	fb05 3202 	mla	r2, r5, r2, r3
 800886e:	2001      	movs	r0, #1
 8008870:	460f      	mov	r7, r1
 8008872:	e7a6      	b.n	80087c2 <_svfiprintf_r+0xc6>
 8008874:	2300      	movs	r3, #0
 8008876:	3701      	adds	r7, #1
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	4619      	mov	r1, r3
 800887c:	250a      	movs	r5, #10
 800887e:	4638      	mov	r0, r7
 8008880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008884:	3a30      	subs	r2, #48	; 0x30
 8008886:	2a09      	cmp	r2, #9
 8008888:	d903      	bls.n	8008892 <_svfiprintf_r+0x196>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c8      	beq.n	8008820 <_svfiprintf_r+0x124>
 800888e:	9105      	str	r1, [sp, #20]
 8008890:	e7c6      	b.n	8008820 <_svfiprintf_r+0x124>
 8008892:	fb05 2101 	mla	r1, r5, r1, r2
 8008896:	2301      	movs	r3, #1
 8008898:	4607      	mov	r7, r0
 800889a:	e7f0      	b.n	800887e <_svfiprintf_r+0x182>
 800889c:	ab03      	add	r3, sp, #12
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4622      	mov	r2, r4
 80088a2:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <_svfiprintf_r+0x1ec>)
 80088a4:	a904      	add	r1, sp, #16
 80088a6:	4640      	mov	r0, r8
 80088a8:	f3af 8000 	nop.w
 80088ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088b0:	4681      	mov	r9, r0
 80088b2:	d1d6      	bne.n	8008862 <_svfiprintf_r+0x166>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	065b      	lsls	r3, r3, #25
 80088b8:	f53f af35 	bmi.w	8008726 <_svfiprintf_r+0x2a>
 80088bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088be:	b01d      	add	sp, #116	; 0x74
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4622      	mov	r2, r4
 80088ca:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <_svfiprintf_r+0x1ec>)
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	4640      	mov	r0, r8
 80088d0:	f000 f882 	bl	80089d8 <_printf_i>
 80088d4:	e7ea      	b.n	80088ac <_svfiprintf_r+0x1b0>
 80088d6:	bf00      	nop
 80088d8:	08008ce4 	.word	0x08008ce4
 80088dc:	08008cea 	.word	0x08008cea
 80088e0:	08008cee 	.word	0x08008cee
 80088e4:	00000000 	.word	0x00000000
 80088e8:	08008649 	.word	0x08008649

080088ec <_printf_common>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	4691      	mov	r9, r2
 80088f2:	461f      	mov	r7, r3
 80088f4:	688a      	ldr	r2, [r1, #8]
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088fc:	4293      	cmp	r3, r2
 80088fe:	bfb8      	it	lt
 8008900:	4613      	movlt	r3, r2
 8008902:	f8c9 3000 	str.w	r3, [r9]
 8008906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800890a:	4606      	mov	r6, r0
 800890c:	460c      	mov	r4, r1
 800890e:	b112      	cbz	r2, 8008916 <_printf_common+0x2a>
 8008910:	3301      	adds	r3, #1
 8008912:	f8c9 3000 	str.w	r3, [r9]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	0699      	lsls	r1, r3, #26
 800891a:	bf42      	ittt	mi
 800891c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008920:	3302      	addmi	r3, #2
 8008922:	f8c9 3000 	strmi.w	r3, [r9]
 8008926:	6825      	ldr	r5, [r4, #0]
 8008928:	f015 0506 	ands.w	r5, r5, #6
 800892c:	d107      	bne.n	800893e <_printf_common+0x52>
 800892e:	f104 0a19 	add.w	sl, r4, #25
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	f8d9 2000 	ldr.w	r2, [r9]
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	42ab      	cmp	r3, r5
 800893c:	dc28      	bgt.n	8008990 <_printf_common+0xa4>
 800893e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008942:	6822      	ldr	r2, [r4, #0]
 8008944:	3300      	adds	r3, #0
 8008946:	bf18      	it	ne
 8008948:	2301      	movne	r3, #1
 800894a:	0692      	lsls	r2, r2, #26
 800894c:	d42d      	bmi.n	80089aa <_printf_common+0xbe>
 800894e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008952:	4639      	mov	r1, r7
 8008954:	4630      	mov	r0, r6
 8008956:	47c0      	blx	r8
 8008958:	3001      	adds	r0, #1
 800895a:	d020      	beq.n	800899e <_printf_common+0xb2>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	68e5      	ldr	r5, [r4, #12]
 8008960:	f8d9 2000 	ldr.w	r2, [r9]
 8008964:	f003 0306 	and.w	r3, r3, #6
 8008968:	2b04      	cmp	r3, #4
 800896a:	bf08      	it	eq
 800896c:	1aad      	subeq	r5, r5, r2
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	6922      	ldr	r2, [r4, #16]
 8008972:	bf0c      	ite	eq
 8008974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008978:	2500      	movne	r5, #0
 800897a:	4293      	cmp	r3, r2
 800897c:	bfc4      	itt	gt
 800897e:	1a9b      	subgt	r3, r3, r2
 8008980:	18ed      	addgt	r5, r5, r3
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	341a      	adds	r4, #26
 8008988:	454d      	cmp	r5, r9
 800898a:	d11a      	bne.n	80089c2 <_printf_common+0xd6>
 800898c:	2000      	movs	r0, #0
 800898e:	e008      	b.n	80089a2 <_printf_common+0xb6>
 8008990:	2301      	movs	r3, #1
 8008992:	4652      	mov	r2, sl
 8008994:	4639      	mov	r1, r7
 8008996:	4630      	mov	r0, r6
 8008998:	47c0      	blx	r8
 800899a:	3001      	adds	r0, #1
 800899c:	d103      	bne.n	80089a6 <_printf_common+0xba>
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a6:	3501      	adds	r5, #1
 80089a8:	e7c3      	b.n	8008932 <_printf_common+0x46>
 80089aa:	18e1      	adds	r1, r4, r3
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	2030      	movs	r0, #48	; 0x30
 80089b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089b4:	4422      	add	r2, r4
 80089b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089be:	3302      	adds	r3, #2
 80089c0:	e7c5      	b.n	800894e <_printf_common+0x62>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4622      	mov	r2, r4
 80089c6:	4639      	mov	r1, r7
 80089c8:	4630      	mov	r0, r6
 80089ca:	47c0      	blx	r8
 80089cc:	3001      	adds	r0, #1
 80089ce:	d0e6      	beq.n	800899e <_printf_common+0xb2>
 80089d0:	f109 0901 	add.w	r9, r9, #1
 80089d4:	e7d8      	b.n	8008988 <_printf_common+0x9c>
	...

080089d8 <_printf_i>:
 80089d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80089e0:	460c      	mov	r4, r1
 80089e2:	7e09      	ldrb	r1, [r1, #24]
 80089e4:	b085      	sub	sp, #20
 80089e6:	296e      	cmp	r1, #110	; 0x6e
 80089e8:	4617      	mov	r7, r2
 80089ea:	4606      	mov	r6, r0
 80089ec:	4698      	mov	r8, r3
 80089ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f0:	f000 80b3 	beq.w	8008b5a <_printf_i+0x182>
 80089f4:	d822      	bhi.n	8008a3c <_printf_i+0x64>
 80089f6:	2963      	cmp	r1, #99	; 0x63
 80089f8:	d036      	beq.n	8008a68 <_printf_i+0x90>
 80089fa:	d80a      	bhi.n	8008a12 <_printf_i+0x3a>
 80089fc:	2900      	cmp	r1, #0
 80089fe:	f000 80b9 	beq.w	8008b74 <_printf_i+0x19c>
 8008a02:	2958      	cmp	r1, #88	; 0x58
 8008a04:	f000 8083 	beq.w	8008b0e <_printf_i+0x136>
 8008a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a10:	e032      	b.n	8008a78 <_printf_i+0xa0>
 8008a12:	2964      	cmp	r1, #100	; 0x64
 8008a14:	d001      	beq.n	8008a1a <_printf_i+0x42>
 8008a16:	2969      	cmp	r1, #105	; 0x69
 8008a18:	d1f6      	bne.n	8008a08 <_printf_i+0x30>
 8008a1a:	6820      	ldr	r0, [r4, #0]
 8008a1c:	6813      	ldr	r3, [r2, #0]
 8008a1e:	0605      	lsls	r5, r0, #24
 8008a20:	f103 0104 	add.w	r1, r3, #4
 8008a24:	d52a      	bpl.n	8008a7c <_printf_i+0xa4>
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6011      	str	r1, [r2, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da03      	bge.n	8008a36 <_printf_i+0x5e>
 8008a2e:	222d      	movs	r2, #45	; 0x2d
 8008a30:	425b      	negs	r3, r3
 8008a32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a36:	486f      	ldr	r0, [pc, #444]	; (8008bf4 <_printf_i+0x21c>)
 8008a38:	220a      	movs	r2, #10
 8008a3a:	e039      	b.n	8008ab0 <_printf_i+0xd8>
 8008a3c:	2973      	cmp	r1, #115	; 0x73
 8008a3e:	f000 809d 	beq.w	8008b7c <_printf_i+0x1a4>
 8008a42:	d808      	bhi.n	8008a56 <_printf_i+0x7e>
 8008a44:	296f      	cmp	r1, #111	; 0x6f
 8008a46:	d020      	beq.n	8008a8a <_printf_i+0xb2>
 8008a48:	2970      	cmp	r1, #112	; 0x70
 8008a4a:	d1dd      	bne.n	8008a08 <_printf_i+0x30>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	f043 0320 	orr.w	r3, r3, #32
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	e003      	b.n	8008a5e <_printf_i+0x86>
 8008a56:	2975      	cmp	r1, #117	; 0x75
 8008a58:	d017      	beq.n	8008a8a <_printf_i+0xb2>
 8008a5a:	2978      	cmp	r1, #120	; 0x78
 8008a5c:	d1d4      	bne.n	8008a08 <_printf_i+0x30>
 8008a5e:	2378      	movs	r3, #120	; 0x78
 8008a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a64:	4864      	ldr	r0, [pc, #400]	; (8008bf8 <_printf_i+0x220>)
 8008a66:	e055      	b.n	8008b14 <_printf_i+0x13c>
 8008a68:	6813      	ldr	r3, [r2, #0]
 8008a6a:	1d19      	adds	r1, r3, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6011      	str	r1, [r2, #0]
 8008a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e08c      	b.n	8008b96 <_printf_i+0x1be>
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6011      	str	r1, [r2, #0]
 8008a80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a84:	bf18      	it	ne
 8008a86:	b21b      	sxthne	r3, r3
 8008a88:	e7cf      	b.n	8008a2a <_printf_i+0x52>
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	6825      	ldr	r5, [r4, #0]
 8008a8e:	1d18      	adds	r0, r3, #4
 8008a90:	6010      	str	r0, [r2, #0]
 8008a92:	0628      	lsls	r0, r5, #24
 8008a94:	d501      	bpl.n	8008a9a <_printf_i+0xc2>
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	e002      	b.n	8008aa0 <_printf_i+0xc8>
 8008a9a:	0668      	lsls	r0, r5, #25
 8008a9c:	d5fb      	bpl.n	8008a96 <_printf_i+0xbe>
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	4854      	ldr	r0, [pc, #336]	; (8008bf4 <_printf_i+0x21c>)
 8008aa2:	296f      	cmp	r1, #111	; 0x6f
 8008aa4:	bf14      	ite	ne
 8008aa6:	220a      	movne	r2, #10
 8008aa8:	2208      	moveq	r2, #8
 8008aaa:	2100      	movs	r1, #0
 8008aac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ab0:	6865      	ldr	r5, [r4, #4]
 8008ab2:	60a5      	str	r5, [r4, #8]
 8008ab4:	2d00      	cmp	r5, #0
 8008ab6:	f2c0 8095 	blt.w	8008be4 <_printf_i+0x20c>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	f021 0104 	bic.w	r1, r1, #4
 8008ac0:	6021      	str	r1, [r4, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d13d      	bne.n	8008b42 <_printf_i+0x16a>
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	f040 808e 	bne.w	8008be8 <_printf_i+0x210>
 8008acc:	4665      	mov	r5, ip
 8008ace:	2a08      	cmp	r2, #8
 8008ad0:	d10b      	bne.n	8008aea <_printf_i+0x112>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	07db      	lsls	r3, r3, #31
 8008ad6:	d508      	bpl.n	8008aea <_printf_i+0x112>
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	6862      	ldr	r2, [r4, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	bfde      	ittt	le
 8008ae0:	2330      	movle	r3, #48	; 0x30
 8008ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ae6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008aea:	ebac 0305 	sub.w	r3, ip, r5
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	f8cd 8000 	str.w	r8, [sp]
 8008af4:	463b      	mov	r3, r7
 8008af6:	aa03      	add	r2, sp, #12
 8008af8:	4621      	mov	r1, r4
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff fef6 	bl	80088ec <_printf_common>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d14d      	bne.n	8008ba0 <_printf_i+0x1c8>
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	b005      	add	sp, #20
 8008b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0e:	4839      	ldr	r0, [pc, #228]	; (8008bf4 <_printf_i+0x21c>)
 8008b10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b14:	6813      	ldr	r3, [r2, #0]
 8008b16:	6821      	ldr	r1, [r4, #0]
 8008b18:	1d1d      	adds	r5, r3, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6015      	str	r5, [r2, #0]
 8008b1e:	060a      	lsls	r2, r1, #24
 8008b20:	d50b      	bpl.n	8008b3a <_printf_i+0x162>
 8008b22:	07ca      	lsls	r2, r1, #31
 8008b24:	bf44      	itt	mi
 8008b26:	f041 0120 	orrmi.w	r1, r1, #32
 8008b2a:	6021      	strmi	r1, [r4, #0]
 8008b2c:	b91b      	cbnz	r3, 8008b36 <_printf_i+0x15e>
 8008b2e:	6822      	ldr	r2, [r4, #0]
 8008b30:	f022 0220 	bic.w	r2, r2, #32
 8008b34:	6022      	str	r2, [r4, #0]
 8008b36:	2210      	movs	r2, #16
 8008b38:	e7b7      	b.n	8008aaa <_printf_i+0xd2>
 8008b3a:	064d      	lsls	r5, r1, #25
 8008b3c:	bf48      	it	mi
 8008b3e:	b29b      	uxthmi	r3, r3
 8008b40:	e7ef      	b.n	8008b22 <_printf_i+0x14a>
 8008b42:	4665      	mov	r5, ip
 8008b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b48:	fb02 3311 	mls	r3, r2, r1, r3
 8008b4c:	5cc3      	ldrb	r3, [r0, r3]
 8008b4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b52:	460b      	mov	r3, r1
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d1f5      	bne.n	8008b44 <_printf_i+0x16c>
 8008b58:	e7b9      	b.n	8008ace <_printf_i+0xf6>
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	6825      	ldr	r5, [r4, #0]
 8008b5e:	6961      	ldr	r1, [r4, #20]
 8008b60:	1d18      	adds	r0, r3, #4
 8008b62:	6010      	str	r0, [r2, #0]
 8008b64:	0628      	lsls	r0, r5, #24
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	d501      	bpl.n	8008b6e <_printf_i+0x196>
 8008b6a:	6019      	str	r1, [r3, #0]
 8008b6c:	e002      	b.n	8008b74 <_printf_i+0x19c>
 8008b6e:	066a      	lsls	r2, r5, #25
 8008b70:	d5fb      	bpl.n	8008b6a <_printf_i+0x192>
 8008b72:	8019      	strh	r1, [r3, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	4665      	mov	r5, ip
 8008b7a:	e7b9      	b.n	8008af0 <_printf_i+0x118>
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	1d19      	adds	r1, r3, #4
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	681d      	ldr	r5, [r3, #0]
 8008b84:	6862      	ldr	r2, [r4, #4]
 8008b86:	2100      	movs	r1, #0
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f7f7 fb29 	bl	80001e0 <memchr>
 8008b8e:	b108      	cbz	r0, 8008b94 <_printf_i+0x1bc>
 8008b90:	1b40      	subs	r0, r0, r5
 8008b92:	6060      	str	r0, [r4, #4]
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	6123      	str	r3, [r4, #16]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b9e:	e7a7      	b.n	8008af0 <_printf_i+0x118>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	47c0      	blx	r8
 8008baa:	3001      	adds	r0, #1
 8008bac:	d0aa      	beq.n	8008b04 <_printf_i+0x12c>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	079b      	lsls	r3, r3, #30
 8008bb2:	d413      	bmi.n	8008bdc <_printf_i+0x204>
 8008bb4:	68e0      	ldr	r0, [r4, #12]
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	4298      	cmp	r0, r3
 8008bba:	bfb8      	it	lt
 8008bbc:	4618      	movlt	r0, r3
 8008bbe:	e7a3      	b.n	8008b08 <_printf_i+0x130>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	464a      	mov	r2, r9
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	47c0      	blx	r8
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d09a      	beq.n	8008b04 <_printf_i+0x12c>
 8008bce:	3501      	adds	r5, #1
 8008bd0:	68e3      	ldr	r3, [r4, #12]
 8008bd2:	9a03      	ldr	r2, [sp, #12]
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	dcf2      	bgt.n	8008bc0 <_printf_i+0x1e8>
 8008bda:	e7eb      	b.n	8008bb4 <_printf_i+0x1dc>
 8008bdc:	2500      	movs	r5, #0
 8008bde:	f104 0919 	add.w	r9, r4, #25
 8008be2:	e7f5      	b.n	8008bd0 <_printf_i+0x1f8>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1ac      	bne.n	8008b42 <_printf_i+0x16a>
 8008be8:	7803      	ldrb	r3, [r0, #0]
 8008bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf2:	e76c      	b.n	8008ace <_printf_i+0xf6>
 8008bf4:	08008cf5 	.word	0x08008cf5
 8008bf8:	08008d06 	.word	0x08008d06

08008bfc <memcpy>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	1e43      	subs	r3, r0, #1
 8008c00:	440a      	add	r2, r1
 8008c02:	4291      	cmp	r1, r2
 8008c04:	d100      	bne.n	8008c08 <memcpy+0xc>
 8008c06:	bd10      	pop	{r4, pc}
 8008c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c10:	e7f7      	b.n	8008c02 <memcpy+0x6>

08008c12 <memmove>:
 8008c12:	4288      	cmp	r0, r1
 8008c14:	b510      	push	{r4, lr}
 8008c16:	eb01 0302 	add.w	r3, r1, r2
 8008c1a:	d807      	bhi.n	8008c2c <memmove+0x1a>
 8008c1c:	1e42      	subs	r2, r0, #1
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	d00a      	beq.n	8008c38 <memmove+0x26>
 8008c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c2a:	e7f8      	b.n	8008c1e <memmove+0xc>
 8008c2c:	4283      	cmp	r3, r0
 8008c2e:	d9f5      	bls.n	8008c1c <memmove+0xa>
 8008c30:	1881      	adds	r1, r0, r2
 8008c32:	1ad2      	subs	r2, r2, r3
 8008c34:	42d3      	cmn	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memmove+0x28>
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c42:	e7f7      	b.n	8008c34 <memmove+0x22>

08008c44 <_realloc_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4607      	mov	r7, r0
 8008c48:	4614      	mov	r4, r2
 8008c4a:	460e      	mov	r6, r1
 8008c4c:	b921      	cbnz	r1, 8008c58 <_realloc_r+0x14>
 8008c4e:	4611      	mov	r1, r2
 8008c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c54:	f7ff bc6c 	b.w	8008530 <_malloc_r>
 8008c58:	b922      	cbnz	r2, 8008c64 <_realloc_r+0x20>
 8008c5a:	f7ff fc1b 	bl	8008494 <_free_r>
 8008c5e:	4625      	mov	r5, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c64:	f000 f814 	bl	8008c90 <_malloc_usable_size_r>
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d20f      	bcs.n	8008c8c <_realloc_r+0x48>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f7ff fc5e 	bl	8008530 <_malloc_r>
 8008c74:	4605      	mov	r5, r0
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d0f2      	beq.n	8008c60 <_realloc_r+0x1c>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	f7ff ffbd 	bl	8008bfc <memcpy>
 8008c82:	4631      	mov	r1, r6
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7ff fc05 	bl	8008494 <_free_r>
 8008c8a:	e7e9      	b.n	8008c60 <_realloc_r+0x1c>
 8008c8c:	4635      	mov	r5, r6
 8008c8e:	e7e7      	b.n	8008c60 <_realloc_r+0x1c>

08008c90 <_malloc_usable_size_r>:
 8008c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c94:	1f18      	subs	r0, r3, #4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bfbc      	itt	lt
 8008c9a:	580b      	ldrlt	r3, [r1, r0]
 8008c9c:	18c0      	addlt	r0, r0, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
