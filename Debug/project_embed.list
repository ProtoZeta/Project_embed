
project_embed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009680  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a04  08009a04  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a0c  08009a0c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  2000020c  08009c20  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08009c20  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bee5  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000375b  00000000  00000000  0003c121  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00040e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002492a  00000000  00000000  00042348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012634  00000000  00000000  00066c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3544  00000000  00000000  000792a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c7ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000675c  00000000  00000000  0014c868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097f8 	.word	0x080097f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080097f8 	.word	0x080097f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <setPWM>:

void SystemClock_Config(void);
/* USER CODE END 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b088      	sub	sp, #32
 8000586:	af00      	add	r7, sp, #0
 8000588:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000590:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000592:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000596:	f003 fd2f 	bl	8003ff8 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 800059a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80005a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005a4:	f003 fcb5 	bl	8003f12 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a8:	2360      	movs	r3, #96	; 0x60
 80005aa:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80005ac:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80005b0:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005be:	4619      	mov	r1, r3
 80005c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005c4:	f003 fd70 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80005c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80005ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80005ce:	f003 fcd5 	bl	8003f7c <HAL_TIM_PWM_Start>
}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	b09d      	sub	sp, #116	; 0x74
 80005e4:	af10      	add	r7, sp, #64	; 0x40
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fe87 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f955 	bl	8000898 <SystemClock_Config>
//  TM_DISCO_LedInit();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fb27 	bl	8000c40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f2:	f000 f9bb 	bl	800096c <MX_I2C1_Init>
  MX_SPI1_Init();
 80005f6:	f000 f9e7 	bl	80009c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005fa:	f007 fcc7 	bl	8007f8c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80005fe:	f000 fa19 	bl	8000a34 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000602:	f000 fa67 	bl	8000ad4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000606:	f000 faf1 	bl	8000bec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	4894      	ldr	r0, [pc, #592]	; (8000860 <main+0x280>)
 8000610:	f001 f9b2 	bl	8001978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	4891      	ldr	r0, [pc, #580]	; (8000860 <main+0x280>)
 800061a:	f001 f9ad 	bl	8001978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	488f      	ldr	r0, [pc, #572]	; (8000864 <main+0x284>)
 8000626:	f001 f9a7 	bl	8001978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	488c      	ldr	r0, [pc, #560]	; (8000864 <main+0x284>)
 8000632:	f001 f9a1 	bl	8001978 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim3);
 8000636:	488c      	ldr	r0, [pc, #560]	; (8000868 <main+0x288>)
 8000638:	f003 fc47 	bl	8003eca <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	488a      	ldr	r0, [pc, #552]	; (8000868 <main+0x288>)
 8000640:	f003 fc9c 	bl	8003f7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000644:	2108      	movs	r1, #8
 8000646:	4888      	ldr	r0, [pc, #544]	; (8000868 <main+0x288>)
 8000648:	f003 fc98 	bl	8003f7c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800064c:	f007 fcc4 	bl	8007fd8 <MX_USB_HOST_Process>
//    		if (TM_DS18B20_Read(&OW2, DS_ROM2, &temp2)){
//    			TM_DS18B20_StartAll(&OW2);
//    		}
//    	}
//    }
    int t = (int) temp;
 8000650:	4b86      	ldr	r3, [pc, #536]	; (800086c <main+0x28c>)
 8000652:	edd3 7a00 	vldr	s15, [r3]
 8000656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int t2 = (int) temp2;
 8000660:	4b83      	ldr	r3, [pc, #524]	; (8000870 <main+0x290>)
 8000662:	edd3 7a00 	vldr	s15, [r3]
 8000666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066a:	ee17 3a90 	vmov	r3, s15
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
    ///////////////////////////////////TRANSMIT/////////////////////////////////
    char buffer[16];
    sprintf(buffer, "%d.%d.%d.%d.%d.", mode,current_desired_temp,current_desired_temp,current_rotate, current_pump);
 8000670:	4b80      	ldr	r3, [pc, #512]	; (8000874 <main+0x294>)
 8000672:	681c      	ldr	r4, [r3, #0]
 8000674:	4b80      	ldr	r3, [pc, #512]	; (8000878 <main+0x298>)
 8000676:	681d      	ldr	r5, [r3, #0]
 8000678:	4b7f      	ldr	r3, [pc, #508]	; (8000878 <main+0x298>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a7f      	ldr	r2, [pc, #508]	; (800087c <main+0x29c>)
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	497f      	ldr	r1, [pc, #508]	; (8000880 <main+0x2a0>)
 8000682:	6809      	ldr	r1, [r1, #0]
 8000684:	f107 0014 	add.w	r0, r7, #20
 8000688:	9102      	str	r1, [sp, #8]
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	462b      	mov	r3, r5
 8000690:	4622      	mov	r2, r4
 8000692:	497c      	ldr	r1, [pc, #496]	; (8000884 <main+0x2a4>)
 8000694:	f008 f87c 	bl	8008790 <siprintf>
    HAL_UART_Transmit(&huart2, buffer,strlen(buffer), 1000);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fd97 	bl	80001d0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f107 0114 	add.w	r1, r7, #20
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	4876      	ldr	r0, [pc, #472]	; (8000888 <main+0x2a8>)
 80006b0:	f004 fa51 	bl	8004b56 <HAL_UART_Transmit>

    //////////////////////////////////Receive///////////////////////////////
    if (HAL_UART_Receive(&huart2, buf, 4, 1000) != HAL_OK) {
 80006b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b8:	2204      	movs	r2, #4
 80006ba:	4974      	ldr	r1, [pc, #464]	; (800088c <main+0x2ac>)
 80006bc:	4872      	ldr	r0, [pc, #456]	; (8000888 <main+0x2a8>)
 80006be:	f004 fae3 	bl	8004c88 <HAL_UART_Receive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 80c8 	bne.w	800085a <main+0x27a>
    	continue;
    }
    if (buf[1] == 't') {
 80006ca:	4b70      	ldr	r3, [pc, #448]	; (800088c <main+0x2ac>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	2b74      	cmp	r3, #116	; 0x74
 80006d0:	d119      	bne.n	8000706 <main+0x126>
    	char TEMP[2];
    	TEMP[0] = buf[2];
 80006d2:	4b6e      	ldr	r3, [pc, #440]	; (800088c <main+0x2ac>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	743b      	strb	r3, [r7, #16]
    	TEMP[1] = buf[3]; ///////////////////////////////////////////////
 80006d8:	4b6c      	ldr	r3, [pc, #432]	; (800088c <main+0x2ac>)
 80006da:	78db      	ldrb	r3, [r3, #3]
 80006dc:	747b      	strb	r3, [r7, #17]
    	int t;
    	t = ((int)buf[2] * 10) + (int)buf[3];
 80006de:	4b6b      	ldr	r3, [pc, #428]	; (800088c <main+0x2ac>)
 80006e0:	789b      	ldrb	r3, [r3, #2]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b67      	ldr	r3, [pc, #412]	; (800088c <main+0x2ac>)
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	4413      	add	r3, r2
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
//    	sscanf(TEMP, '%d', &t);
    	if (mode == 1) {
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <main+0x294>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d16a      	bne.n	80007d4 <main+0x1f4>
    		current_desired_temp = t;
 80006fe:	4a5e      	ldr	r2, [pc, #376]	; (8000878 <main+0x298>)
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e066      	b.n	80007d4 <main+0x1f4>
    	}

    }else if(buf[1] == 'r') {
 8000706:	4b61      	ldr	r3, [pc, #388]	; (800088c <main+0x2ac>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	2b72      	cmp	r3, #114	; 0x72
 800070c:	d116      	bne.n	800073c <main+0x15c>
    	char ROTATE[2];
    	ROTATE[0] = buf[2];
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <main+0x2ac>)
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	733b      	strb	r3, [r7, #12]
    	ROTATE[1] = buf[3];
 8000714:	4b5d      	ldr	r3, [pc, #372]	; (800088c <main+0x2ac>)
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	737b      	strb	r3, [r7, #13]
    	int r;
    	sscanf(ROTATE, '%d', &r);
 800071a:	f107 0208 	add.w	r2, r7, #8
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	f242 5164 	movw	r1, #9572	; 0x2564
 8000726:	4618      	mov	r0, r3
 8000728:	f008 f852 	bl	80087d0 <siscanf>
    	if (mode == 2) {
 800072c:	4b51      	ldr	r3, [pc, #324]	; (8000874 <main+0x294>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d14f      	bne.n	80007d4 <main+0x1f4>
    		current_rotate = r;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4a51      	ldr	r2, [pc, #324]	; (800087c <main+0x29c>)
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e04b      	b.n	80007d4 <main+0x1f4>
    	}
    }else if(buf[1] == 'p') {
 800073c:	4b53      	ldr	r3, [pc, #332]	; (800088c <main+0x2ac>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	2b70      	cmp	r3, #112	; 0x70
 8000742:	d114      	bne.n	800076e <main+0x18e>
    	char PUMP[2];
    	PUMP[0] = buf[2];
 8000744:	4b51      	ldr	r3, [pc, #324]	; (800088c <main+0x2ac>)
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	713b      	strb	r3, [r7, #4]
    	PUMP[1] = buf[3];
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <main+0x2ac>)
 800074c:	78db      	ldrb	r3, [r3, #3]
 800074e:	717b      	strb	r3, [r7, #5]
    	int p;
    	sscanf(PUMP, '%d', &p);
 8000750:	463a      	mov	r2, r7
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	f242 5164 	movw	r1, #9572	; 0x2564
 8000758:	4618      	mov	r0, r3
 800075a:	f008 f839 	bl	80087d0 <siscanf>
    	if (mode == 2) {
 800075e:	4b45      	ldr	r3, [pc, #276]	; (8000874 <main+0x294>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d136      	bne.n	80007d4 <main+0x1f4>
    		current_pump = p;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	4a45      	ldr	r2, [pc, #276]	; (8000880 <main+0x2a0>)
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e032      	b.n	80007d4 <main+0x1f4>
    	}
    }else if(buf[1] == 'M'){
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <main+0x2ac>)
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	2b4d      	cmp	r3, #77	; 0x4d
 8000774:	d10b      	bne.n	800078e <main+0x1ae>
    	if (mode == 1) {
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <main+0x294>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d103      	bne.n	8000786 <main+0x1a6>
    		mode = 2;
 800077e:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <main+0x294>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e026      	b.n	80007d4 <main+0x1f4>
    	} else {
    		mode = 1;
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <main+0x294>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e022      	b.n	80007d4 <main+0x1f4>
    	}
    }
    else if (buf[1] == 'm') {
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <main+0x2ac>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	2b6d      	cmp	r3, #109	; 0x6d
 8000794:	d11e      	bne.n	80007d4 <main+0x1f4>
    	if(mode == 1) {
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <main+0x294>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d103      	bne.n	80007a6 <main+0x1c6>
    		mode = 3;
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <main+0x294>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e016      	b.n	80007d4 <main+0x1f4>
    	} else if (mode == 3) {
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <main+0x294>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d103      	bne.n	80007b6 <main+0x1d6>
    		mode = 1;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <main+0x294>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e00e      	b.n	80007d4 <main+0x1f4>
    	} else if (mode == 2) {
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0x294>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d103      	bne.n	80007c6 <main+0x1e6>
    		mode = 4;
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <main+0x294>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e006      	b.n	80007d4 <main+0x1f4>
    	} else if (mode == 4) {
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <main+0x294>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d102      	bne.n	80007d4 <main+0x1f4>
    		mode = 2;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <main+0x294>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  if (1) {

  }

  ///////////////////////////////////PWM////////////////////////////////////
  if (buf[1] == 'r') {
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <main+0x2ac>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b72      	cmp	r3, #114	; 0x72
 80007da:	d11c      	bne.n	8000816 <main+0x236>
	  setPWM(htim3, TIM_CHANNEL_1, 100, r);
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <main+0x2b0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4e21      	ldr	r6, [pc, #132]	; (8000868 <main+0x288>)
 80007e4:	930e      	str	r3, [sp, #56]	; 0x38
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	930d      	str	r3, [sp, #52]	; 0x34
 80007ea:	2300      	movs	r3, #0
 80007ec:	930c      	str	r3, [sp, #48]	; 0x30
 80007ee:	466d      	mov	r5, sp
 80007f0:	f106 0410 	add.w	r4, r6, #16
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000804:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000808:	f7ff feba 	bl	8000580 <setPWM>
	  current_rotate = r;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <main+0x2b0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1a      	ldr	r2, [pc, #104]	; (800087c <main+0x29c>)
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	e71a      	b.n	800064c <main+0x6c>
  }else if (buf[1] == 'p') {
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <main+0x2ac>)
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	2b70      	cmp	r3, #112	; 0x70
 800081c:	f47f af16 	bne.w	800064c <main+0x6c>
	  setPWM(htim3, TIM_CHANNEL_3, 100, p);
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <main+0x2b4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
 8000826:	4e10      	ldr	r6, [pc, #64]	; (8000868 <main+0x288>)
 8000828:	930e      	str	r3, [sp, #56]	; 0x38
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	930d      	str	r3, [sp, #52]	; 0x34
 800082e:	2308      	movs	r3, #8
 8000830:	930c      	str	r3, [sp, #48]	; 0x30
 8000832:	466d      	mov	r5, sp
 8000834:	f106 0410 	add.w	r4, r6, #16
 8000838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000840:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000844:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000848:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800084c:	f7ff fe98 	bl	8000580 <setPWM>
	  current_pump = p;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <main+0x2b4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <main+0x2a0>)
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e6f8      	b.n	800064c <main+0x6c>
    	continue;
 800085a:	bf00      	nop
  {
 800085c:	e6f6      	b.n	800064c <main+0x6c>
 800085e:	bf00      	nop
 8000860:	40020400 	.word	0x40020400
 8000864:	40020800 	.word	0x40020800
 8000868:	200002c8 	.word	0x200002c8
 800086c:	200002c4 	.word	0x200002c4
 8000870:	2000024c 	.word	0x2000024c
 8000874:	20000000 	.word	0x20000000
 8000878:	2000000c 	.word	0x2000000c
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004
 8000884:	08009810 	.word	0x08009810
 8000888:	200003c8 	.word	0x200003c8
 800088c:	20000360 	.word	0x20000360
 8000890:	20000308 	.word	0x20000308
 8000894:	20000240 	.word	0x20000240

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 feb2 	bl	8008610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800090c:	23a8      	movs	r3, #168	; 0xa8
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000914:	2307      	movs	r3, #7
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fde3 	bl	80034e8 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000928:	f000 faa8 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2105      	movs	r1, #5
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f83c 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 fa91 	bl	8000e7c <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C1_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_I2C1_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C1_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_I2C1_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_I2C1_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_I2C1_Init+0x50>)
 80009aa:	f002 fc65 	bl	8003278 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 fa62 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000258 	.word	0x20000258
 80009c0:	40005400 	.word	0x40005400
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_SPI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_SPI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_SPI1_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_SPI1_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_SPI1_Init+0x64>)
 8000a14:	220a      	movs	r2, #10
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_SPI1_Init+0x64>)
 8000a1a:	f003 f9c7 	bl	8003dac <HAL_SPI_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a24:	f000 fa2a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000370 	.word	0x20000370
 8000a30:	40013000 	.word	0x40013000

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <MX_TIM1_Init+0x9c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a7c:	f003 f9fa 	bl	8003e74 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000a86:	f000 f9f9 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_TIM1_Init+0x98>)
 8000a98:	f003 fbcc 	bl	8004234 <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000aa2:	f000 f9eb 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM1_Init+0x98>)
 8000ab4:	f003 ff86 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000abe:	f000 f9dd 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000320 	.word	0x20000320
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b06:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <MX_TIM3_Init+0x114>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b0c:	22a7      	movs	r2, #167	; 0xa7
 8000b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b18:	2263      	movs	r2, #99	; 0x63
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b22:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b28:	482e      	ldr	r0, [pc, #184]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b2a:	f003 f9a3 	bl	8003e74 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000b34:	f000 f9a2 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4827      	ldr	r0, [pc, #156]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b46:	f003 fb75 	bl	8004234 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000b50:	f000 f994 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b54:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b56:	f003 f9dc 	bl	8003f12 <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000b60:	f000 f98c 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	481c      	ldr	r0, [pc, #112]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b74:	f003 ff26 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000b7e:	f000 f97d 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000b9a:	f003 fa85 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ba4:	f000 f96a 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2208      	movs	r2, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000bb0:	f003 fa7a 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000bba:	f000 f95f 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000bc6:	f003 fa6f 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000bd0:	f000 f954 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM3_Init+0x110>)
 8000bd6:	f000 fa49 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200002c8 	.word	0x200002c8
 8000be8:	40000400 	.word	0x40000400

08000bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_USART2_UART_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART2_UART_Init+0x4c>)
 8000c24:	f003 ff4a 	bl	8004abc <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f925 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200003c8 	.word	0x200003c8
 8000c3c:	40004400 	.word	0x40004400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b81      	ldr	r3, [pc, #516]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a80      	ldr	r2, [pc, #512]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b7e      	ldr	r3, [pc, #504]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b7a      	ldr	r3, [pc, #488]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a79      	ldr	r2, [pc, #484]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b73      	ldr	r3, [pc, #460]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a72      	ldr	r2, [pc, #456]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b70      	ldr	r3, [pc, #448]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a6b      	ldr	r2, [pc, #428]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b65      	ldr	r3, [pc, #404]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a64      	ldr	r2, [pc, #400]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b62      	ldr	r3, [pc, #392]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a5d      	ldr	r2, [pc, #372]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b5b      	ldr	r3, [pc, #364]	; (8000e60 <MX_GPIO_Init+0x220>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	4858      	ldr	r0, [pc, #352]	; (8000e64 <MX_GPIO_Init+0x224>)
 8000d04:	f000 fe38 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4856      	ldr	r0, [pc, #344]	; (8000e68 <MX_GPIO_Init+0x228>)
 8000d0e:	f000 fe33 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d12:	2200      	movs	r2, #0
 8000d14:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d18:	4854      	ldr	r0, [pc, #336]	; (8000e6c <MX_GPIO_Init+0x22c>)
 8000d1a:	f000 fe2d 	bl	8001978 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	484b      	ldr	r0, [pc, #300]	; (8000e64 <MX_GPIO_Init+0x224>)
 8000d36:	f000 fc85 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4845      	ldr	r0, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x228>)
 8000d52:	f000 fc77 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d56:	2308      	movs	r3, #8
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483d      	ldr	r0, [pc, #244]	; (8000e68 <MX_GPIO_Init+0x228>)
 8000d72:	f000 fc67 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <MX_GPIO_Init+0x230>)
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	483a      	ldr	r0, [pc, #232]	; (8000e74 <MX_GPIO_Init+0x234>)
 8000d8a:	f000 fc5b 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4832      	ldr	r0, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x234>)
 8000daa:	f000 fc4b 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dae:	2304      	movs	r3, #4
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <MX_GPIO_Init+0x238>)
 8000dc2:	f000 fc3f 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <MX_GPIO_Init+0x238>)
 8000de4:	f000 fc2e 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000de8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dec:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_GPIO_Init+0x22c>)
 8000e02:	f000 fc1f 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e06:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_GPIO_Init+0x228>)
 8000e24:	f000 fc0e 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e28:	2320      	movs	r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_GPIO_Init+0x22c>)
 8000e3c:	f000 fc02 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_GPIO_Init+0x230>)
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_GPIO_Init+0x224>)
 8000e54:	f000 fbf6 	bl	8001644 <HAL_GPIO_Init>

}
 8000e58:	bf00      	nop
 8000e5a:	3730      	adds	r7, #48	; 0x30
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	10120000 	.word	0x10120000
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_I2C_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12c      	bne.n	8000f58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <HAL_I2C_MspInit+0x8c>)
 8000f38:	f000 fb84 	bl	8001644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40005400 	.word	0x40005400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_SPI_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fc6:	23e0      	movs	r3, #224	; 0xe0
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_SPI_MspInit+0x8c>)
 8000fe2:	f000 fb2f 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_TIM_Base_MspInit+0x64>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10e      	bne.n	800102c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102a:	e012      	b.n	8001052 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10d      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40010000 	.word	0x40010000
 8001064:	40023800 	.word	0x40023800
 8001068:	40000400 	.word	0x40000400

0800106c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_TIM_MspPostInit+0xa4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d13c      	bne.n	8001108 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_TIM_MspPostInit+0xa8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80010c6:	2312      	movs	r3, #18
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010d6:	2302      	movs	r3, #2
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <HAL_TIM_MspPostInit+0xac>)
 80010e2:	f000 faaf 	bl	8001644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <HAL_TIM_MspPostInit+0xb0>)
 8001104:	f000 fa9e 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400
 800111c:	40020800 	.word	0x40020800

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_UART_MspInit+0x84>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12b      	bne.n	800119a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_UART_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_UART_MspInit+0x88>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0x88>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_UART_MspInit+0x88>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_UART_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117a:	230c      	movs	r3, #12
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118a:	2307      	movs	r3, #7
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_UART_MspInit+0x8c>)
 8001196:	f000 fa55 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f8ca 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f000 fe4f 	bl	8001eb4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200007dc 	.word	0x200007dc

08001220 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x50>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x16>
		heap_end = &end;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <_sbrk+0x50>)
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <_sbrk+0x54>)
 8001234:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <_sbrk+0x50>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <_sbrk+0x50>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	466a      	mov	r2, sp
 8001246:	4293      	cmp	r3, r2
 8001248:	d907      	bls.n	800125a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800124a:	f007 f9a7 	bl	800859c <__errno>
 800124e:	4602      	mov	r2, r0
 8001250:	230c      	movs	r3, #12
 8001252:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	e006      	b.n	8001268 <_sbrk+0x48>
	}

	heap_end += incr;
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <_sbrk+0x50>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <_sbrk+0x50>)
 8001264:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000228 	.word	0x20000228
 8001274:	20000aa8 	.word	0x20000aa8

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <SystemInit+0x28>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <SystemInit+0x28>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SystemInit+0x28>)
 800128e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001292:	609a      	str	r2, [r3, #8]
#endif
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012aa:	e003      	b.n	80012b4 <LoopCopyDataInit>

080012ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012b2:	3104      	adds	r1, #4

080012b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012bc:	d3f6      	bcc.n	80012ac <CopyDataInit>
  ldr  r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012c0:	e002      	b.n	80012c8 <LoopFillZerobss>

080012c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c4:	f842 3b04 	str.w	r3, [r2], #4

080012c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012cc:	d3f9      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd3 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f007 f969 	bl	80085a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f983 	bl	80005e0 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012e0:	08009a14 	.word	0x08009a14
  ldr  r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e8:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 80012ec:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 80012f0:	20000aa4 	.word	0x20000aa4

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f94d 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fdae 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f965 	bl	800162a <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f92d 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000010 	.word	0x20000010
 8001394:	20000018 	.word	0x20000018
 8001398:	20000014 	.word	0x20000014

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000018 	.word	0x20000018
 80013c0:	2000040c 	.word	0x2000040c

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000040c 	.word	0x2000040c

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_Delay+0x40>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000018 	.word	0x20000018

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff29 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff3e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff31 	bl	8001484 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa2 	bl	800157c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e16b      	b.n	8001938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	429a      	cmp	r2, r3
 800167a:	f040 815a 	bne.w	8001932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d00b      	beq.n	800169e <HAL_GPIO_Init+0x5a>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001692:	2b11      	cmp	r3, #17
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b12      	cmp	r3, #18
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0xfc>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d123      	bne.n	8001788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80b4 	beq.w	8001932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <HAL_GPIO_Init+0x308>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a5e      	ldr	r2, [pc, #376]	; (800194c <HAL_GPIO_Init+0x308>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b5c      	ldr	r3, [pc, #368]	; (800194c <HAL_GPIO_Init+0x308>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e6:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_GPIO_Init+0x30c>)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_GPIO_Init+0x310>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d02b      	beq.n	800186a <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x314>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_GPIO_Init+0x318>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_GPIO_Init+0x31c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x320>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x324>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x328>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x20e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4a      	ldr	r2, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x32c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x20a>
 800184a:	2307      	movs	r3, #7
 800184c:	e00e      	b.n	800186c <HAL_GPIO_Init+0x228>
 800184e:	2308      	movs	r3, #8
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001852:	2306      	movs	r3, #6
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x228>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x228>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x228>
 800186a:	2300      	movs	r3, #0
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187c:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_GPIO_Init+0x30c>)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_GPIO_Init+0x330>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ae:	4a31      	ldr	r2, [pc, #196]	; (8001974 <HAL_GPIO_Init+0x330>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x330>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_GPIO_Init+0x330>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_GPIO_Init+0x330>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <HAL_GPIO_Init+0x330>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x330>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_GPIO_Init+0x330>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	f67f ae90 	bls.w	8001660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ac:	b08f      	sub	sp, #60	; 0x3c
 80019ae:	af0a      	add	r7, sp, #40	; 0x28
 80019b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e054      	b.n	8001a66 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f006 fb36 	bl	8008048 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fe22 	bl	8005644 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	687e      	ldr	r6, [r7, #4]
 8001a08:	466d      	mov	r5, sp
 8001a0a:	f106 0410 	add.w	r4, r6, #16
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1e:	1d33      	adds	r3, r6, #4
 8001a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f003 fd9c 	bl	8005560 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fe19 	bl	8005666 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	687e      	ldr	r6, [r7, #4]
 8001a3c:	466d      	mov	r5, sp
 8001a3e:	f106 0410 	add.w	r4, r6, #16
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a52:	1d33      	adds	r3, r6, #4
 8001a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f003 ff2c 	bl	80058b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a6e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a6e:	b590      	push	{r4, r7, lr}
 8001a70:	b089      	sub	sp, #36	; 0x24
 8001a72:	af04      	add	r7, sp, #16
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	4608      	mov	r0, r1
 8001a78:	4611      	mov	r1, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	70fb      	strb	r3, [r7, #3]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70bb      	strb	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_HCD_HC_Init+0x28>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e07f      	b.n	8001b96 <HAL_HCD_HC_Init+0x128>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	333d      	adds	r3, #61	; 0x3d
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3338      	adds	r3, #56	; 0x38
 8001ac2:	787a      	ldrb	r2, [r7, #1]
 8001ac4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3340      	adds	r3, #64	; 0x40
 8001ad6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ad8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3339      	adds	r3, #57	; 0x39
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	333f      	adds	r3, #63	; 0x3f
 8001afe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	78bb      	ldrb	r3, [r7, #2]
 8001b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b0c:	b2d8      	uxtb	r0, r3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	333a      	adds	r3, #58	; 0x3a
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0a      	bge.n	8001b3e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	333b      	adds	r3, #59	; 0x3b
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e009      	b.n	8001b52 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	333b      	adds	r3, #59	; 0x3b
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	333c      	adds	r3, #60	; 0x3c
 8001b62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b66:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	787c      	ldrb	r4, [r7, #1]
 8001b6e:	78ba      	ldrb	r2, [r7, #2]
 8001b70:	78f9      	ldrb	r1, [r7, #3]
 8001b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4623      	mov	r3, r4
 8001b84:	f004 f818 	bl	8005bb8 <USB_HC_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}

08001b9e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_HCD_HC_Halt+0x1e>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00f      	b.n	8001bdc <HAL_HCD_HC_Halt+0x3e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fa52 	bl	8006076 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	70fb      	strb	r3, [r7, #3]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70bb      	strb	r3, [r7, #2]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	333b      	adds	r3, #59	; 0x3b
 8001c0e:	78ba      	ldrb	r2, [r7, #2]
 8001c10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	333f      	adds	r3, #63	; 0x3f
 8001c22:	787a      	ldrb	r2, [r7, #1]
 8001c24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c26:	7c3b      	ldrb	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3342      	adds	r3, #66	; 0x42
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e009      	b.n	8001c56 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3342      	adds	r3, #66	; 0x42
 8001c52:	2202      	movs	r2, #2
 8001c54:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	f200 80d6 	bhi.w	8001e0a <HAL_HCD_HC_SubmitRequest+0x226>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001df5 	.word	0x08001df5
 8001c6c:	08001ce1 	.word	0x08001ce1
 8001c70:	08001d6b 	.word	0x08001d6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c74:	7c3b      	ldrb	r3, [r7, #16]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	f040 80c9 	bne.w	8001e0e <HAL_HCD_HC_SubmitRequest+0x22a>
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 80c5 	bne.w	8001e0e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001c84:	8b3b      	ldrh	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3351      	adds	r3, #81	; 0x51
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3351      	adds	r3, #81	; 0x51
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3342      	adds	r3, #66	; 0x42
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cc8:	e0a1      	b.n	8001e0e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3342      	adds	r3, #66	; 0x42
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
      break;
 8001cde:	e096      	b.n	8001e0e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ce0:	78bb      	ldrb	r3, [r7, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d120      	bne.n	8001d28 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3351      	adds	r3, #81	; 0x51
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3342      	adds	r3, #66	; 0x42
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d10:	e07e      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3342      	adds	r3, #66	; 0x42
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e073      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3350      	adds	r3, #80	; 0x50
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3342      	adds	r3, #66	; 0x42
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
      break;
 8001d52:	e05d      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3342      	adds	r3, #66	; 0x42
 8001d64:	2202      	movs	r2, #2
 8001d66:	701a      	strb	r2, [r3, #0]
      break;
 8001d68:	e052      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d6a:	78bb      	ldrb	r3, [r7, #2]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d120      	bne.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3351      	adds	r3, #81	; 0x51
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3342      	adds	r3, #66	; 0x42
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d9a:	e039      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3342      	adds	r3, #66	; 0x42
 8001dac:	2202      	movs	r2, #2
 8001dae:	701a      	strb	r2, [r3, #0]
      break;
 8001db0:	e02e      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3350      	adds	r3, #80	; 0x50
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3342      	adds	r3, #66	; 0x42
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
      break;
 8001ddc:	e018      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3342      	adds	r3, #66	; 0x42
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
      break;
 8001df2:	e00d      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3342      	adds	r3, #66	; 0x42
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
      break;
 8001e08:	e002      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e000      	b.n	8001e10 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001e0e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3344      	adds	r3, #68	; 0x44
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	8b39      	ldrh	r1, [r7, #24]
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4403      	add	r3, r0
 8001e34:	3348      	adds	r3, #72	; 0x48
 8001e36:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335c      	adds	r3, #92	; 0x5c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	334c      	adds	r3, #76	; 0x4c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3339      	adds	r3, #57	; 0x39
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	335d      	adds	r3, #93	; 0x5d
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	18d1      	adds	r1, r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f003 ff92 	bl	8005dcc <USB_HC_StartXfer>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fcaf 	bl	800582e <USB_GetMode>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f040 80f1 	bne.w	80020ba <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fc93 	bl	8005808 <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80e7 	beq.w	80020b8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fc8a 	bl	8005808 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001efe:	d104      	bne.n	8001f0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fc7a 	bl	8005808 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1e:	d104      	bne.n	8001f2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fc6a 	bl	8005808 <USB_ReadInterrupts>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f3e:	d104      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fc5a 	bl	8005808 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d103      	bne.n	8001f66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fc4c 	bl	8005808 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f7a:	d117      	bne.n	8001fac <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001f8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f006 f8d7 	bl	8008144 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 fd45 	bl	8005a2c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fc29 	bl	8005808 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d102      	bne.n	8001fc8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 f8c8 	bl	8003158 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fc1b 	bl	8005808 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d106      	bne.n	8001fea <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f006 f895 	bl	800810c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fc0a 	bl	8005808 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffe:	d138      	bne.n	8002072 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f825 	bl	8006054 <USB_HC_ReadInterrupt>
 800200a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e025      	b.n	800205e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d018      	beq.n	8002058 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203c:	d106      	bne.n	800204c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8cf 	bl	80021e8 <HCD_HC_IN_IRQHandler>
 800204a:	e005      	b.n	8002058 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fc5f 	bl	8002916 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3d4      	bcc.n	8002012 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fbc6 	bl	8005808 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b10      	cmp	r3, #16
 8002084:	d101      	bne.n	800208a <HAL_HCD_IRQHandler+0x1d6>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_HCD_IRQHandler+0x1d8>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d014      	beq.n	80020ba <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0210 	bic.w	r2, r2, #16
 800209e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 ffad 	bl	8003000 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699a      	ldr	r2, [r3, #24]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0210 	orr.w	r2, r2, #16
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	e000      	b.n	80020ba <HAL_HCD_IRQHandler+0x206>
      return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_HCD_Start+0x16>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e013      	b.n	80020fe <HAL_HCD_Start+0x3e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fa9d 	bl	8005622 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fd00 	bl	8005af4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_HCD_Stop+0x16>
 8002118:	2302      	movs	r3, #2
 800211a:	e00d      	b.n	8002138 <HAL_HCD_Stop+0x32>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f8df 	bl	80062ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fca7 	bl	8005aa0 <USB_ResetPort>
 8002152:	4603      	mov	r3, r0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	781b      	ldrb	r3, [r3, #0]
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	334c      	adds	r3, #76	; 0x4c
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fce9 	bl	8005b94 <USB_GetCurrentFrame>
 80021c2:	4603      	mov	r3, r0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fcc4 	bl	8005b66 <USB_GetHostSpeed>
 80021de:	4603      	mov	r3, r0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d119      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2304      	movs	r3, #4
 8002228:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	0151      	lsls	r1, r2, #5
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	440a      	add	r2, r1
 8002240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	60d3      	str	r3, [r2, #12]
 800224a:	e095      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d109      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2320      	movs	r3, #32
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e080      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d134      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	0151      	lsls	r1, r2, #5
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	440a      	add	r2, r1
 80022a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	335d      	adds	r3, #93	; 0x5d
 80022bc:	2205      	movs	r2, #5
 80022be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2310      	movs	r3, #16
 80022d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2308      	movs	r3, #8
 80022e2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fec1 	bl	8006076 <USB_HC_Halt>
 80022f4:	e040      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230c:	d134      	bne.n	8002378 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	440a      	add	r2, r1
 8002324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fe9c 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2310      	movs	r3, #16
 800234e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	335d      	adds	r3, #93	; 0x5d
 8002360:	2208      	movs	r2, #8
 8002362:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002376:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238e:	d122      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fe5b 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023d4:	e29b      	b.n	800290e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 80c1 	bne.w	8002570 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01b      	beq.n	800242e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	3348      	adds	r3, #72	; 0x48
 8002406:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0159      	lsls	r1, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	440b      	add	r3, r1
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800241a:	1ad1      	subs	r1, r2, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4403      	add	r3, r0
 800242a:	334c      	adds	r3, #76	; 0x4c
 800242c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	335d      	adds	r3, #93	; 0x5d
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3358      	adds	r3, #88	; 0x58
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2301      	movs	r3, #1
 8002466:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	333f      	adds	r3, #63	; 0x3f
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	333f      	adds	r3, #63	; 0x3f
 800248e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002490:	2b02      	cmp	r3, #2
 8002492:	d121      	bne.n	80024d8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	0151      	lsls	r1, r2, #5
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	440a      	add	r2, r1
 80024aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fdd9 	bl	8006076 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2310      	movs	r3, #16
 80024d4:	6093      	str	r3, [r2, #8]
 80024d6:	e034      	b.n	8002542 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	333f      	adds	r3, #63	; 0x3f
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d129      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	440a      	add	r2, r1
 8002504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800250c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b2d8      	uxtb	r0, r3
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	335c      	adds	r3, #92	; 0x5c
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4601      	mov	r1, r0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f005 fe0f 	bl	8008160 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	3350      	adds	r3, #80	; 0x50
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2d8      	uxtb	r0, r3
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3350      	adds	r3, #80	; 0x50
 800256a:	4602      	mov	r2, r0
 800256c:	701a      	strb	r2, [r3, #0]
}
 800256e:	e1ce      	b.n	800290e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 80f1 	bne.w	800276a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a2:	f023 0302 	bic.w	r3, r3, #2
 80025a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	335d      	adds	r3, #93	; 0x5d
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10a      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	335c      	adds	r3, #92	; 0x5c
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e0b0      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	335d      	adds	r3, #93	; 0x5d
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10a      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	2205      	movs	r2, #5
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e09a      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	335d      	adds	r3, #93	; 0x5d
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d00a      	beq.n	800262c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	335d      	adds	r3, #93	; 0x5d
 8002626:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002628:	2b08      	cmp	r3, #8
 800262a:	d156      	bne.n	80026da <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3358      	adds	r3, #88	; 0x58
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c59      	adds	r1, r3, #1
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4403      	add	r3, r0
 800264e:	3358      	adds	r3, #88	; 0x58
 8002650:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3358      	adds	r3, #88	; 0x58
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d914      	bls.n	8002692 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3358      	adds	r3, #88	; 0x58
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e009      	b.n	80026a6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	335c      	adds	r3, #92	; 0x5c
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02d      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	335d      	adds	r3, #93	; 0x5d
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d122      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800271a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002722:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2302      	movs	r3, #2
 8002746:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	b2d8      	uxtb	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4601      	mov	r1, r0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f005 fcfc 	bl	8008160 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002768:	e0d1      	b.n	800290e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d13e      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	440a      	add	r2, r1
 8002796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3358      	adds	r3, #88	; 0x58
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1c59      	adds	r1, r3, #1
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4403      	add	r3, r0
 80027c2:	3358      	adds	r3, #88	; 0x58
 80027c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	335d      	adds	r3, #93	; 0x5d
 80027d6:	2206      	movs	r2, #6
 80027d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 fc46 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	6093      	str	r3, [r2, #8]
}
 80027fc:	e087      	b.n	800290e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b10      	cmp	r3, #16
 8002812:	d17c      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	333f      	adds	r3, #63	; 0x3f
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d122      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3358      	adds	r3, #88	; 0x58
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	440a      	add	r2, r1
 8002854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fc04 	bl	8006076 <USB_HC_Halt>
 800286e:	e045      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	333f      	adds	r3, #63	; 0x3f
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002898:	2b02      	cmp	r3, #2
 800289a:	d12f      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3358      	adds	r3, #88	; 0x58
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d121      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	335d      	adds	r3, #93	; 0x5d
 80028c8:	2203      	movs	r2, #3
 80028ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fbbd 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2310      	movs	r3, #16
 800290c:	6093      	str	r3, [r2, #8]
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d119      	bne.n	800297a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	461a      	mov	r2, r3
 8002954:	2304      	movs	r3, #4
 8002956:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	0151      	lsls	r1, r2, #5
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	440a      	add	r2, r1
 800296e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002978:	e33e      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	d141      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2320      	movs	r3, #32
 80029a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	333d      	adds	r3, #61	; 0x3d
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	f040 831f 	bne.w	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	333d      	adds	r3, #61	; 0x3d
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	335c      	adds	r3, #92	; 0x5c
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fb32 	bl	8006076 <USB_HC_Halt>
}
 8002a12:	e2f1      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d13f      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	335d      	adds	r3, #93	; 0x5d
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333d      	adds	r3, #61	; 0x3d
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	3358      	adds	r3, #88	; 0x58
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	0151      	lsls	r1, r2, #5
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 faf0 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2340      	movs	r3, #64	; 0x40
 8002aa6:	6093      	str	r3, [r2, #8]
}
 8002aa8:	e2a6      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d122      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	0151      	lsls	r1, r2, #5
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fac2 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b04:	6093      	str	r3, [r2, #8]
}
 8002b06:	e277      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d135      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3358      	adds	r3, #88	; 0x58
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	0151      	lsls	r1, r2, #5
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	440a      	add	r2, r1
 8002b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fa8a 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	335d      	adds	r3, #93	; 0x5d
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
}
 8002b88:	e236      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d12b      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2308      	movs	r3, #8
 8002bb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	0151      	lsls	r1, r2, #5
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	440a      	add	r2, r1
 8002bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fa4a 	bl	8006076 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	335d      	adds	r3, #93	; 0x5d
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	e1ff      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d155      	bne.n	8002cba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3358      	adds	r3, #88	; 0x58
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	335d      	adds	r3, #93	; 0x5d
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	333d      	adds	r3, #61	; 0x3d
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d114      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	333c      	adds	r3, #60	; 0x3c
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	333d      	adds	r3, #61	; 0x3d
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	0151      	lsls	r1, r2, #5
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	440a      	add	r2, r1
 8002c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 f9e8 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	6093      	str	r3, [r2, #8]
}
 8002cb8:	e19e      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d12b      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	0151      	lsls	r1, r2, #5
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f9bb 	bl	8006076 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	335d      	adds	r3, #93	; 0x5d
 8002d10:	2206      	movs	r2, #6
 8002d12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	6093      	str	r3, [r2, #8]
}
 8002d26:	e167      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d135      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	0151      	lsls	r1, r2, #5
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	440a      	add	r2, r1
 8002d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f983 	bl	8006076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2310      	movs	r3, #16
 8002d80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	335d      	adds	r3, #93	; 0x5d
 8002da6:	2208      	movs	r2, #8
 8002da8:	701a      	strb	r2, [r3, #0]
}
 8002daa:	e125      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 811a 	bne.w	8002ff8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	0151      	lsls	r1, r2, #5
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	440a      	add	r2, r1
 8002dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dde:	f023 0302 	bic.w	r3, r3, #2
 8002de2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	335d      	adds	r3, #93	; 0x5d
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d137      	bne.n	8002e6a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	335c      	adds	r3, #92	; 0x5c
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	333f      	adds	r3, #63	; 0x3f
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d00b      	beq.n	8002e3c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	333f      	adds	r3, #63	; 0x3f
 8002e34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	f040 80c5 	bne.w	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3351      	adds	r3, #81	; 0x51
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3351      	adds	r3, #81	; 0x51
 8002e64:	4602      	mov	r2, r0
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e0ad      	b.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	335d      	adds	r3, #93	; 0x5d
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d10a      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	335c      	adds	r3, #92	; 0x5c
 8002e90:	2202      	movs	r2, #2
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e097      	b.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	335d      	adds	r3, #93	; 0x5d
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d10a      	bne.n	8002ec2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e081      	b.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	335d      	adds	r3, #93	; 0x5d
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10a      	bne.n	8002eee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	335c      	adds	r3, #92	; 0x5c
 8002ee8:	2205      	movs	r2, #5
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e06b      	b.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	335d      	adds	r3, #93	; 0x5d
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d00a      	beq.n	8002f1a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	335d      	adds	r3, #93	; 0x5d
 8002f14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d155      	bne.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	3358      	adds	r3, #88	; 0x58
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1c59      	adds	r1, r3, #1
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4403      	add	r3, r0
 8002f3c:	3358      	adds	r3, #88	; 0x58
 8002f3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3358      	adds	r3, #88	; 0x58
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d914      	bls.n	8002f80 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3358      	adds	r3, #88	; 0x58
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	335c      	adds	r3, #92	; 0x5c
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e009      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	335c      	adds	r3, #92	; 0x5c
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002faa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	b2d8      	uxtb	r0, r3
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4601      	mov	r1, r0
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f005 f8b4 	bl	8008160 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	0c5b      	lsrs	r3, r3, #17
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003034:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d003      	beq.n	8003044 <HCD_RXQLVL_IRQHandler+0x44>
 800303c:	2b05      	cmp	r3, #5
 800303e:	f000 8082 	beq.w	8003146 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003042:	e083      	b.n	800314c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d07f      	beq.n	800314a <HCD_RXQLVL_IRQHandler+0x14a>
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	3344      	adds	r3, #68	; 0x44
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d074      	beq.n	800314a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3344      	adds	r3, #68	; 0x44
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	b292      	uxth	r2, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f002 fb9b 	bl	80057b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3344      	adds	r3, #68	; 0x44
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	18d1      	adds	r1, r2, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4403      	add	r3, r0
 80030a4:	3344      	adds	r3, #68	; 0x44
 80030a6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	334c      	adds	r3, #76	; 0x4c
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	18d1      	adds	r1, r2, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4403      	add	r3, r0
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HCD_RXQLVL_IRQHandler+0x154>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d031      	beq.n	800314a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003104:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	3350      	adds	r3, #80	; 0x50
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	4602      	mov	r2, r0
 8003142:	701a      	strb	r2, [r3, #0]
      break;
 8003144:	e001      	b.n	800314a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800314a:	bf00      	nop
  }
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	1ff80000 	.word	0x1ff80000

08003158 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003184:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d113      	bne.n	80031b8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10a      	bne.n	80031b0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80031a8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f004 ffbc 	bl	8008128 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d147      	bne.n	8003252 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d129      	bne.n	8003228 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d113      	bne.n	8003204 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031e6:	d106      	bne.n	80031f6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2102      	movs	r1, #2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fc1c 	bl	8005a2c <USB_InitFSLSPClkSel>
 80031f4:	e011      	b.n	800321a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fc15 	bl	8005a2c <USB_InitFSLSPClkSel>
 8003202:	e00a      	b.n	800321a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d106      	bne.n	800321a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003212:	461a      	mov	r2, r3
 8003214:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003218:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f004 ffae 	bl	800817c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f004 ff81 	bl	8008128 <HAL_HCD_Connect_Callback>
 8003226:	e014      	b.n	8003252 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f004 ffb5 	bl	8008198 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800323c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003240:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003250:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d103      	bne.n	8003264 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f043 0320 	orr.w	r3, r3, #32
 8003262:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e11f      	b.n	80034ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fe1c 	bl	8000edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032dc:	f000 fd3e 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a7b      	ldr	r2, [pc, #492]	; (80034d4 <HAL_I2C_Init+0x25c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <HAL_I2C_Init+0x84>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a7a      	ldr	r2, [pc, #488]	; (80034d8 <HAL_I2C_Init+0x260>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e006      	b.n	800330a <HAL_I2C_Init+0x92>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_I2C_Init+0x264>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0db      	b.n	80034ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <HAL_I2C_Init+0x268>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a64      	ldr	r2, [pc, #400]	; (80034d4 <HAL_I2C_Init+0x25c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d802      	bhi.n	800334c <HAL_I2C_Init+0xd4>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	e009      	b.n	8003360 <HAL_I2C_Init+0xe8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	4a63      	ldr	r2, [pc, #396]	; (80034e4 <HAL_I2C_Init+0x26c>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003372:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4956      	ldr	r1, [pc, #344]	; (80034d4 <HAL_I2C_Init+0x25c>)
 800337c:	428b      	cmp	r3, r1
 800337e:	d80d      	bhi.n	800339c <HAL_I2C_Init+0x124>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e59      	subs	r1, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fbb1 f3f3 	udiv	r3, r1, r3
 800338e:	3301      	adds	r3, #1
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	2b04      	cmp	r3, #4
 8003396:	bf38      	it	cc
 8003398:	2304      	movcc	r3, #4
 800339a:	e04f      	b.n	800343c <HAL_I2C_Init+0x1c4>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <HAL_I2C_Init+0x150>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e012      	b.n	80033ee <HAL_I2C_Init+0x176>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Init+0x17e>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e022      	b.n	800343c <HAL_I2C_Init+0x1c4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <HAL_I2C_Init+0x1a4>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e58      	subs	r0, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	440b      	add	r3, r1
 800340c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341a:	e00f      	b.n	800343c <HAL_I2C_Init+0x1c4>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6809      	ldr	r1, [r1, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800346a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6911      	ldr	r1, [r2, #16]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	430b      	orrs	r3, r1
 800347e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	000186a0 	.word	0x000186a0
 80034d8:	001e847f 	.word	0x001e847f
 80034dc:	003d08ff 	.word	0x003d08ff
 80034e0:	431bde83 	.word	0x431bde83
 80034e4:	10624dd3 	.word	0x10624dd3

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e25b      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003506:	4ba3      	ldr	r3, [pc, #652]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00c      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4ba0      	ldr	r3, [pc, #640]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351a:	2b08      	cmp	r3, #8
 800351c:	d112      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b9d      	ldr	r3, [pc, #628]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b99      	ldr	r3, [pc, #612]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e236      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a90      	ldr	r2, [pc, #576]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a8a      	ldr	r2, [pc, #552]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a83      	ldr	r2, [pc, #524]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd ff10 	bl	80013c4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd ff0c 	bl	80013c4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1fb      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd fefc 	bl	80013c4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fd fef8 	bl	80013c4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1e7      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11c      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1bb      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4952      	ldr	r1, [pc, #328]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	e03a      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_RCC_OscConfig+0x2b0>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd feb1 	bl	80013c4 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003666:	f7fd fead 	bl	80013c4 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e19c      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4940      	ldr	r1, [pc, #256]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
 8003698:	e015      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x2b0>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fe90 	bl	80013c4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fd fe8c 	bl	80013c4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e17b      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d030      	beq.n	8003734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_OscConfig+0x2b4>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd fe70 	bl	80013c4 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fd fe6c 	bl	80013c4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e15b      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
 8003706:	e015      	b.n	8003734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x2b4>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fd fe59 	bl	80013c4 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003716:	f7fd fe55 	bl	80013c4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e144      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a0 	beq.w	8003882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <HAL_RCC_OscConfig+0x2b8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fd fe1b 	bl	80013c4 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e011      	b.n	80037b6 <HAL_RCC_OscConfig+0x2ce>
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
 80037a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fd fe0e 	bl	80013c4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0fd      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b81      	ldr	r3, [pc, #516]	; (80039bc <HAL_RCC_OscConfig+0x4d4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
 80037ca:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a7c      	ldr	r2, [pc, #496]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	e01c      	b.n	8003812 <HAL_RCC_OscConfig+0x32a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x312>
 80037e0:	4b77      	ldr	r3, [pc, #476]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b74      	ldr	r3, [pc, #464]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a73      	ldr	r2, [pc, #460]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0x32a>
 80037fa:	4b71      	ldr	r3, [pc, #452]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a70      	ldr	r2, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	4b6e      	ldr	r3, [pc, #440]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a6d      	ldr	r2, [pc, #436]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d015      	beq.n	8003846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fd fdd3 	bl	80013c4 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fdcf 	bl	80013c4 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0bc      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ee      	beq.n	8003822 <HAL_RCC_OscConfig+0x33a>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fd fdbd 	bl	80013c4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd fdb9 	bl	80013c4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0a6      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8092 	beq.w	80039b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388c:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d05c      	beq.n	8003952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d141      	bne.n	8003924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <HAL_RCC_OscConfig+0x4dc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fd8d 	bl	80013c4 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fd89 	bl	80013c4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e078      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	4933      	ldr	r1, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f6:	4b33      	ldr	r3, [pc, #204]	; (80039c4 <HAL_RCC_OscConfig+0x4dc>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fd62 	bl	80013c4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fd5e 	bl	80013c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04d      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x41c>
 8003922:	e045      	b.n	80039b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x4dc>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd fd4b 	bl	80013c4 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd fd47 	bl	80013c4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e036      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x44a>
 8003950:	e02e      	b.n	80039b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e029      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_RCC_OscConfig+0x4d8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	429a      	cmp	r2, r3
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d115      	bne.n	80039ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003986:	4013      	ands	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d106      	bne.n	80039ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470060 	.word	0x42470060

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0cc      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d90c      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e067      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4934      	ldr	r1, [pc, #208]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fc84 	bl	80013c4 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fd fc80 	bl	80013c4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20c      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f821 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b52:	4601      	mov	r1, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	fa21 f303 	lsr.w	r3, r1, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fbe4 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08009830 	.word	0x08009830
 8003b8c:	20000010 	.word	0x20000010
 8003b90:	20000014 	.word	0x20000014

08003b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d008      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x38>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 80b4 	bne.w	8003d28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bc2:	60bb      	str	r3, [r7, #8]
       break;
 8003bc4:	e0b3      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc6:	4b5e      	ldr	r3, [pc, #376]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bc8:	60bb      	str	r3, [r7, #8]
      break;
 8003bca:	e0b0      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd6:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04a      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	ea03 0501 	and.w	r5, r3, r1
 8003bf8:	ea04 0602 	and.w	r6, r4, r2
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4632      	mov	r2, r6
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	0154      	lsls	r4, r2, #5
 8003c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c0e:	014b      	lsls	r3, r1, #5
 8003c10:	4619      	mov	r1, r3
 8003c12:	4622      	mov	r2, r4
 8003c14:	1b49      	subs	r1, r1, r5
 8003c16:	eb62 0206 	sbc.w	r2, r2, r6
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	0194      	lsls	r4, r2, #6
 8003c24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c28:	018b      	lsls	r3, r1, #6
 8003c2a:	1a5b      	subs	r3, r3, r1
 8003c2c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	00e2      	lsls	r2, r4, #3
 8003c3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c3e:	00d9      	lsls	r1, r3, #3
 8003c40:	460b      	mov	r3, r1
 8003c42:	4614      	mov	r4, r2
 8003c44:	195b      	adds	r3, r3, r5
 8003c46:	eb44 0406 	adc.w	r4, r4, r6
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	0262      	lsls	r2, r4, #9
 8003c54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c58:	0259      	lsls	r1, r3, #9
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	4621      	mov	r1, r4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f04f 0400 	mov.w	r4, #0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f7fc fb08 	bl	8000280 <__aeabi_uldivmod>
 8003c70:	4603      	mov	r3, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e049      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	f04f 0400 	mov.w	r4, #0
 8003c82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea03 0501 	and.w	r5, r3, r1
 8003c8e:	ea04 0602 	and.w	r6, r4, r2
 8003c92:	4629      	mov	r1, r5
 8003c94:	4632      	mov	r2, r6
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	f04f 0400 	mov.w	r4, #0
 8003c9e:	0154      	lsls	r4, r2, #5
 8003ca0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ca4:	014b      	lsls	r3, r1, #5
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4622      	mov	r2, r4
 8003caa:	1b49      	subs	r1, r1, r5
 8003cac:	eb62 0206 	sbc.w	r2, r2, r6
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	0194      	lsls	r4, r2, #6
 8003cba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	1a5b      	subs	r3, r3, r1
 8003cc2:	eb64 0402 	sbc.w	r4, r4, r2
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	00e2      	lsls	r2, r4, #3
 8003cd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cd4:	00d9      	lsls	r1, r3, #3
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	195b      	adds	r3, r3, r5
 8003cdc:	eb44 0406 	adc.w	r4, r4, r6
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	02a2      	lsls	r2, r4, #10
 8003cea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cee:	0299      	lsls	r1, r3, #10
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	f7fc fabd 	bl	8000280 <__aeabi_uldivmod>
 8003d06:	4603      	mov	r3, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	60bb      	str	r3, [r7, #8]
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d2a:	60bb      	str	r3, [r7, #8]
      break;
 8003d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	007a1200 	.word	0x007a1200

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000010 	.word	0x20000010

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff0 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d64:	4601      	mov	r1, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0a9b      	lsrs	r3, r3, #10
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	08009840 	.word	0x08009840

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff ffdc 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0b5b      	lsrs	r3, r3, #13
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	08009840 	.word	0x08009840

08003dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e056      	b.n	8003e6c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fd f8c7 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 0104 	and.w	r1, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e01d      	b.n	8003ec2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd f8ae 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fa76 	bl	80043a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d007      	beq.n	8003efc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e01d      	b.n	8003f60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f815 	bl	8003f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f000 fa27 	bl	80043a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fcf2 	bl	8004978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_TIM_PWM_Start+0x74>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_TIM_PWM_Start+0x2c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_TIM_PWM_Start+0x78>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_PWM_Start+0x30>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_TIM_PWM_Start+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b06      	cmp	r3, #6
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fcb4 	bl	8004978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <HAL_TIM_PWM_Stop+0xa8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_PWM_Stop+0x2c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <HAL_TIM_PWM_Stop+0xac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_TIM_PWM_Stop+0x30>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_TIM_PWM_Stop+0x32>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d017      	beq.n	800405e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	f241 1311 	movw	r3, #4369	; 0x1111
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_TIM_PWM_Stop+0x66>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	f240 4344 	movw	r3, #1092	; 0x444
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_TIM_PWM_Stop+0x66>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	f241 1311 	movw	r3, #4369	; 0x1111
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <HAL_TIM_PWM_Stop+0x96>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	f240 4344 	movw	r3, #1092	; 0x444
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d107      	bne.n	800408e <HAL_TIM_PWM_Stop+0x96>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0b4      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x184>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	f200 809f 	bhi.w	8004218 <HAL_TIM_PWM_ConfigChannel+0x170>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004219 	.word	0x08004219
 80040e8:	08004219 	.word	0x08004219
 80040ec:	08004219 	.word	0x08004219
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004219 	.word	0x08004219
 80040f8:	08004219 	.word	0x08004219
 80040fc:	08004219 	.word	0x08004219
 8004100:	08004197 	.word	0x08004197
 8004104:	08004219 	.word	0x08004219
 8004108:	08004219 	.word	0x08004219
 800410c:	08004219 	.word	0x08004219
 8004110:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f9e2 	bl	80044e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
      break;
 8004152:	e062      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fa32 	bl	80045c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]
      break;
 8004194:	e041      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa87 	bl	80046b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      break;
 80041d4:	e021      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fadb 	bl	8004798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      break;
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004218:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIM_ConfigClockSource+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e0a6      	b.n	800439a <HAL_TIM_ConfigClockSource+0x166>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800426a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004272:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d067      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0x120>
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d80b      	bhi.n	80042a0 <HAL_TIM_ConfigClockSource+0x6c>
 8004288:	2b10      	cmp	r3, #16
 800428a:	d073      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x140>
 800428c:	2b10      	cmp	r3, #16
 800428e:	d802      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x62>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06f      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004294:	e078      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004296:	2b20      	cmp	r3, #32
 8004298:	d06c      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x140>
 800429a:	2b30      	cmp	r3, #48	; 0x30
 800429c:	d06a      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800429e:	e073      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042a0:	2b70      	cmp	r3, #112	; 0x70
 80042a2:	d00d      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x8c>
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d804      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x7e>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d033      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0xe0>
 80042ac:	2b60      	cmp	r3, #96	; 0x60
 80042ae:	d041      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042b0:	e06a      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d066      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x152>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d017      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042be:	e063      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 fb32 	bl	8004938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e04c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f000 fb1b 	bl	8004938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004310:	609a      	str	r2, [r3, #8]
      break;
 8004312:	e039      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	461a      	mov	r2, r3
 8004322:	f000 fa8f 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2150      	movs	r1, #80	; 0x50
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fae8 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004332:	e029      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	461a      	mov	r2, r3
 8004342:	f000 faae 	bl	80048a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2160      	movs	r1, #96	; 0x60
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fad8 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004352:	e019      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	461a      	mov	r2, r3
 8004362:	f000 fa6f 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fac8 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004372:	e009      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 fabf 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a40      	ldr	r2, [pc, #256]	; (80044b8 <TIM_Base_SetConfig+0x114>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d00f      	beq.n	80043e4 <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3d      	ldr	r2, [pc, #244]	; (80044bc <TIM_Base_SetConfig+0x118>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <TIM_Base_SetConfig+0x11c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <TIM_Base_SetConfig+0x120>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3a      	ldr	r2, [pc, #232]	; (80044c8 <TIM_Base_SetConfig+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d108      	bne.n	80043f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <TIM_Base_SetConfig+0x114>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d02b      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d027      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <TIM_Base_SetConfig+0x118>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d023      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <TIM_Base_SetConfig+0x11c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <TIM_Base_SetConfig+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01b      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <TIM_Base_SetConfig+0x124>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d017      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <TIM_Base_SetConfig+0x128>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <TIM_Base_SetConfig+0x12c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <TIM_Base_SetConfig+0x130>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <TIM_Base_SetConfig+0x134>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a24      	ldr	r2, [pc, #144]	; (80044dc <TIM_Base_SetConfig+0x138>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <TIM_Base_SetConfig+0x13c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <TIM_Base_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0xf8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <TIM_Base_SetConfig+0x124>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	615a      	str	r2, [r3, #20]
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800
 80044d8:	40001800 	.word	0x40001800
 80044dc:	40001c00 	.word	0x40001c00
 80044e0:	40002000 	.word	0x40002000

080044e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 0302 	bic.w	r3, r3, #2
 800452c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a20      	ldr	r2, [pc, #128]	; (80045bc <TIM_OC1_SetConfig+0xd8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_OC1_SetConfig+0x64>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <TIM_OC1_SetConfig+0xdc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10c      	bne.n	8004562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0308 	bic.w	r3, r3, #8
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <TIM_OC1_SetConfig+0xd8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC1_SetConfig+0x8e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_OC1_SetConfig+0xdc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d111      	bne.n	8004596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40010000 	.word	0x40010000
 80045c0:	40010400 	.word	0x40010400

080045c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0210 	bic.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0320 	bic.w	r3, r3, #32
 800460e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <TIM_OC2_SetConfig+0xe4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC2_SetConfig+0x68>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <TIM_OC2_SetConfig+0xe8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10d      	bne.n	8004648 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004646:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <TIM_OC2_SetConfig+0xe4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC2_SetConfig+0x94>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <TIM_OC2_SetConfig+0xe8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d113      	bne.n	8004680 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800465e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010400 	.word	0x40010400

080046b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a21      	ldr	r2, [pc, #132]	; (8004790 <TIM_OC3_SetConfig+0xe0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_OC3_SetConfig+0x66>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a20      	ldr	r2, [pc, #128]	; (8004794 <TIM_OC3_SetConfig+0xe4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10d      	bne.n	8004732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800471c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <TIM_OC3_SetConfig+0xe0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_OC3_SetConfig+0x92>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <TIM_OC3_SetConfig+0xe4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d113      	bne.n	800476a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40010000 	.word	0x40010000
 8004794:	40010400 	.word	0x40010400

08004798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	031b      	lsls	r3, r3, #12
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <TIM_OC4_SetConfig+0xa4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC4_SetConfig+0x68>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <TIM_OC4_SetConfig+0xa8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40010400 	.word	0x40010400

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2201      	movs	r2, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e05a      	b.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d01d      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10c      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40001800 	.word	0x40001800

08004abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e03f      	b.n	8004b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fb1c 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f9b1 	bl	8004e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b088      	sub	sp, #32
 8004b5a:	af02      	add	r7, sp, #8
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	f040 8083 	bne.w	8004c7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_Transmit+0x2e>
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e07b      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Transmit+0x40>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e074      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2221      	movs	r2, #33	; 0x21
 8004ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bac:	f7fc fc0a 	bl	80013c4 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004bc6:	e042      	b.n	8004c4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d122      	bne.n	8004c26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8f2 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e042      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	e017      	b.n	8004c4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	e013      	b.n	8004c4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f8cf 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e01f      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	60ba      	str	r2, [r7, #8]
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1b7      	bne.n	8004bc8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f8b6 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e006      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 8090 	bne.w	8004dca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_Receive+0x2e>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e088      	b.n	8004dcc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Receive+0x40>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e081      	b.n	8004dcc <HAL_UART_Receive+0x144>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2222      	movs	r2, #34	; 0x22
 8004cda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004cde:	f7fc fb71 	bl	80013c4 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cf8:	e05c      	b.n	8004db4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d10:	d12b      	bne.n	8004d6a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f859 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e04f      	b.n	8004dcc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10c      	bne.n	8004d52 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	e030      	b.n	8004db4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	e024      	b.n	8004db4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2120      	movs	r1, #32
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f82d 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e023      	b.n	8004dcc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d108      	bne.n	8004d9e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	60ba      	str	r2, [r7, #8]
 8004d98:	b2ca      	uxtb	r2, r1
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e00a      	b.n	8004db4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1c59      	adds	r1, r3, #1
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d19d      	bne.n	8004cfa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	e02c      	b.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d028      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004df4:	f7fc fae6 	bl	80013c4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d21d      	bcs.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e00f      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d0c3      	beq.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004eaa:	f023 030c 	bic.w	r3, r3, #12
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed6:	f040 818b 	bne.w	80051f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4ac1      	ldr	r2, [pc, #772]	; (80051e4 <UART_SetConfig+0x37c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d005      	beq.n	8004ef0 <UART_SetConfig+0x88>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4abf      	ldr	r2, [pc, #764]	; (80051e8 <UART_SetConfig+0x380>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	f040 80bd 	bne.w	800506a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe ff48 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	461d      	mov	r5, r3
 8004efa:	f04f 0600 	mov.w	r6, #0
 8004efe:	46a8      	mov	r8, r5
 8004f00:	46b1      	mov	r9, r6
 8004f02:	eb18 0308 	adds.w	r3, r8, r8
 8004f06:	eb49 0409 	adc.w	r4, r9, r9
 8004f0a:	4698      	mov	r8, r3
 8004f0c:	46a1      	mov	r9, r4
 8004f0e:	eb18 0805 	adds.w	r8, r8, r5
 8004f12:	eb49 0906 	adc.w	r9, r9, r6
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f2a:	4688      	mov	r8, r1
 8004f2c:	4691      	mov	r9, r2
 8004f2e:	eb18 0005 	adds.w	r0, r8, r5
 8004f32:	eb49 0106 	adc.w	r1, r9, r6
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	f04f 0600 	mov.w	r6, #0
 8004f40:	196b      	adds	r3, r5, r5
 8004f42:	eb46 0406 	adc.w	r4, r6, r6
 8004f46:	461a      	mov	r2, r3
 8004f48:	4623      	mov	r3, r4
 8004f4a:	f7fb f999 	bl	8000280 <__aeabi_uldivmod>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	461a      	mov	r2, r3
 8004f54:	4ba5      	ldr	r3, [pc, #660]	; (80051ec <UART_SetConfig+0x384>)
 8004f56:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	461d      	mov	r5, r3
 8004f64:	f04f 0600 	mov.w	r6, #0
 8004f68:	46a9      	mov	r9, r5
 8004f6a:	46b2      	mov	sl, r6
 8004f6c:	eb19 0309 	adds.w	r3, r9, r9
 8004f70:	eb4a 040a 	adc.w	r4, sl, sl
 8004f74:	4699      	mov	r9, r3
 8004f76:	46a2      	mov	sl, r4
 8004f78:	eb19 0905 	adds.w	r9, r9, r5
 8004f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f94:	4689      	mov	r9, r1
 8004f96:	4692      	mov	sl, r2
 8004f98:	eb19 0005 	adds.w	r0, r9, r5
 8004f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	f04f 0600 	mov.w	r6, #0
 8004faa:	196b      	adds	r3, r5, r5
 8004fac:	eb46 0406 	adc.w	r4, r6, r6
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	f7fb f964 	bl	8000280 <__aeabi_uldivmod>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4b8b      	ldr	r3, [pc, #556]	; (80051ec <UART_SetConfig+0x384>)
 8004fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	2164      	movs	r1, #100	; 0x64
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	3332      	adds	r3, #50	; 0x32
 8004fd2:	4a86      	ldr	r2, [pc, #536]	; (80051ec <UART_SetConfig+0x384>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fe0:	4498      	add	r8, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	f04f 0600 	mov.w	r6, #0
 8004fea:	46a9      	mov	r9, r5
 8004fec:	46b2      	mov	sl, r6
 8004fee:	eb19 0309 	adds.w	r3, r9, r9
 8004ff2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ff6:	4699      	mov	r9, r3
 8004ff8:	46a2      	mov	sl, r4
 8004ffa:	eb19 0905 	adds.w	r9, r9, r5
 8004ffe:	eb4a 0a06 	adc.w	sl, sl, r6
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005016:	4689      	mov	r9, r1
 8005018:	4692      	mov	sl, r2
 800501a:	eb19 0005 	adds.w	r0, r9, r5
 800501e:	eb4a 0106 	adc.w	r1, sl, r6
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	461d      	mov	r5, r3
 8005028:	f04f 0600 	mov.w	r6, #0
 800502c:	196b      	adds	r3, r5, r5
 800502e:	eb46 0406 	adc.w	r4, r6, r6
 8005032:	461a      	mov	r2, r3
 8005034:	4623      	mov	r3, r4
 8005036:	f7fb f923 	bl	8000280 <__aeabi_uldivmod>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	461a      	mov	r2, r3
 8005040:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <UART_SetConfig+0x384>)
 8005042:	fba3 1302 	umull	r1, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2164      	movs	r1, #100	; 0x64
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	3332      	adds	r3, #50	; 0x32
 8005054:	4a65      	ldr	r2, [pc, #404]	; (80051ec <UART_SetConfig+0x384>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f003 0207 	and.w	r2, r3, #7
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4442      	add	r2, r8
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	e26f      	b.n	800554a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800506a:	f7fe fe77 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800506e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	461d      	mov	r5, r3
 8005074:	f04f 0600 	mov.w	r6, #0
 8005078:	46a8      	mov	r8, r5
 800507a:	46b1      	mov	r9, r6
 800507c:	eb18 0308 	adds.w	r3, r8, r8
 8005080:	eb49 0409 	adc.w	r4, r9, r9
 8005084:	4698      	mov	r8, r3
 8005086:	46a1      	mov	r9, r4
 8005088:	eb18 0805 	adds.w	r8, r8, r5
 800508c:	eb49 0906 	adc.w	r9, r9, r6
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800509c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050a4:	4688      	mov	r8, r1
 80050a6:	4691      	mov	r9, r2
 80050a8:	eb18 0005 	adds.w	r0, r8, r5
 80050ac:	eb49 0106 	adc.w	r1, r9, r6
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	461d      	mov	r5, r3
 80050b6:	f04f 0600 	mov.w	r6, #0
 80050ba:	196b      	adds	r3, r5, r5
 80050bc:	eb46 0406 	adc.w	r4, r6, r6
 80050c0:	461a      	mov	r2, r3
 80050c2:	4623      	mov	r3, r4
 80050c4:	f7fb f8dc 	bl	8000280 <__aeabi_uldivmod>
 80050c8:	4603      	mov	r3, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b47      	ldr	r3, [pc, #284]	; (80051ec <UART_SetConfig+0x384>)
 80050d0:	fba3 2302 	umull	r2, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	461d      	mov	r5, r3
 80050de:	f04f 0600 	mov.w	r6, #0
 80050e2:	46a9      	mov	r9, r5
 80050e4:	46b2      	mov	sl, r6
 80050e6:	eb19 0309 	adds.w	r3, r9, r9
 80050ea:	eb4a 040a 	adc.w	r4, sl, sl
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	eb19 0905 	adds.w	r9, r9, r5
 80050f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800510a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800510e:	4689      	mov	r9, r1
 8005110:	4692      	mov	sl, r2
 8005112:	eb19 0005 	adds.w	r0, r9, r5
 8005116:	eb4a 0106 	adc.w	r1, sl, r6
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	461d      	mov	r5, r3
 8005120:	f04f 0600 	mov.w	r6, #0
 8005124:	196b      	adds	r3, r5, r5
 8005126:	eb46 0406 	adc.w	r4, r6, r6
 800512a:	461a      	mov	r2, r3
 800512c:	4623      	mov	r3, r4
 800512e:	f7fb f8a7 	bl	8000280 <__aeabi_uldivmod>
 8005132:	4603      	mov	r3, r0
 8005134:	460c      	mov	r4, r1
 8005136:	461a      	mov	r2, r3
 8005138:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <UART_SetConfig+0x384>)
 800513a:	fba3 1302 	umull	r1, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2164      	movs	r1, #100	; 0x64
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	3332      	adds	r3, #50	; 0x32
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <UART_SetConfig+0x384>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515a:	4498      	add	r8, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	461d      	mov	r5, r3
 8005160:	f04f 0600 	mov.w	r6, #0
 8005164:	46a9      	mov	r9, r5
 8005166:	46b2      	mov	sl, r6
 8005168:	eb19 0309 	adds.w	r3, r9, r9
 800516c:	eb4a 040a 	adc.w	r4, sl, sl
 8005170:	4699      	mov	r9, r3
 8005172:	46a2      	mov	sl, r4
 8005174:	eb19 0905 	adds.w	r9, r9, r5
 8005178:	eb4a 0a06 	adc.w	sl, sl, r6
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800518c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005190:	4689      	mov	r9, r1
 8005192:	4692      	mov	sl, r2
 8005194:	eb19 0005 	adds.w	r0, r9, r5
 8005198:	eb4a 0106 	adc.w	r1, sl, r6
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	461d      	mov	r5, r3
 80051a2:	f04f 0600 	mov.w	r6, #0
 80051a6:	196b      	adds	r3, r5, r5
 80051a8:	eb46 0406 	adc.w	r4, r6, r6
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	f7fb f866 	bl	8000280 <__aeabi_uldivmod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <UART_SetConfig+0x384>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a07      	ldr	r2, [pc, #28]	; (80051ec <UART_SetConfig+0x384>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4442      	add	r2, r8
 80051e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80051e2:	e1b2      	b.n	800554a <UART_SetConfig+0x6e2>
 80051e4:	40011000 	.word	0x40011000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4ad7      	ldr	r2, [pc, #860]	; (8005554 <UART_SetConfig+0x6ec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d005      	beq.n	8005206 <UART_SetConfig+0x39e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4ad6      	ldr	r2, [pc, #856]	; (8005558 <UART_SetConfig+0x6f0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	f040 80d1 	bne.w	80053a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005206:	f7fe fdbd 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 800520a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	469a      	mov	sl, r3
 8005210:	f04f 0b00 	mov.w	fp, #0
 8005214:	46d0      	mov	r8, sl
 8005216:	46d9      	mov	r9, fp
 8005218:	eb18 0308 	adds.w	r3, r8, r8
 800521c:	eb49 0409 	adc.w	r4, r9, r9
 8005220:	4698      	mov	r8, r3
 8005222:	46a1      	mov	r9, r4
 8005224:	eb18 080a 	adds.w	r8, r8, sl
 8005228:	eb49 090b 	adc.w	r9, r9, fp
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005238:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800523c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005240:	4688      	mov	r8, r1
 8005242:	4691      	mov	r9, r2
 8005244:	eb1a 0508 	adds.w	r5, sl, r8
 8005248:	eb4b 0609 	adc.w	r6, fp, r9
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4619      	mov	r1, r3
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	0094      	lsls	r4, r2, #2
 8005260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	4628      	mov	r0, r5
 800526c:	4631      	mov	r1, r6
 800526e:	f7fb f807 	bl	8000280 <__aeabi_uldivmod>
 8005272:	4603      	mov	r3, r0
 8005274:	460c      	mov	r4, r1
 8005276:	461a      	mov	r2, r3
 8005278:	4bb8      	ldr	r3, [pc, #736]	; (800555c <UART_SetConfig+0x6f4>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	469b      	mov	fp, r3
 8005288:	f04f 0c00 	mov.w	ip, #0
 800528c:	46d9      	mov	r9, fp
 800528e:	46e2      	mov	sl, ip
 8005290:	eb19 0309 	adds.w	r3, r9, r9
 8005294:	eb4a 040a 	adc.w	r4, sl, sl
 8005298:	4699      	mov	r9, r3
 800529a:	46a2      	mov	sl, r4
 800529c:	eb19 090b 	adds.w	r9, r9, fp
 80052a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052b8:	4689      	mov	r9, r1
 80052ba:	4692      	mov	sl, r2
 80052bc:	eb1b 0509 	adds.w	r5, fp, r9
 80052c0:	eb4c 060a 	adc.w	r6, ip, sl
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4619      	mov	r1, r3
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f04f 0400 	mov.w	r4, #0
 80052d6:	0094      	lsls	r4, r2, #2
 80052d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052dc:	008b      	lsls	r3, r1, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	4623      	mov	r3, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	4631      	mov	r1, r6
 80052e6:	f7fa ffcb 	bl	8000280 <__aeabi_uldivmod>
 80052ea:	4603      	mov	r3, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b9a      	ldr	r3, [pc, #616]	; (800555c <UART_SetConfig+0x6f4>)
 80052f2:	fba3 1302 	umull	r1, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2164      	movs	r1, #100	; 0x64
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	; 0x32
 8005304:	4a95      	ldr	r2, [pc, #596]	; (800555c <UART_SetConfig+0x6f4>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005310:	4498      	add	r8, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	469b      	mov	fp, r3
 8005316:	f04f 0c00 	mov.w	ip, #0
 800531a:	46d9      	mov	r9, fp
 800531c:	46e2      	mov	sl, ip
 800531e:	eb19 0309 	adds.w	r3, r9, r9
 8005322:	eb4a 040a 	adc.w	r4, sl, sl
 8005326:	4699      	mov	r9, r3
 8005328:	46a2      	mov	sl, r4
 800532a:	eb19 090b 	adds.w	r9, r9, fp
 800532e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005332:	f04f 0100 	mov.w	r1, #0
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800533e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005346:	4689      	mov	r9, r1
 8005348:	4692      	mov	sl, r2
 800534a:	eb1b 0509 	adds.w	r5, fp, r9
 800534e:	eb4c 060a 	adc.w	r6, ip, sl
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4619      	mov	r1, r3
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	0094      	lsls	r4, r2, #2
 8005366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800536a:	008b      	lsls	r3, r1, #2
 800536c:	461a      	mov	r2, r3
 800536e:	4623      	mov	r3, r4
 8005370:	4628      	mov	r0, r5
 8005372:	4631      	mov	r1, r6
 8005374:	f7fa ff84 	bl	8000280 <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	461a      	mov	r2, r3
 800537e:	4b77      	ldr	r3, [pc, #476]	; (800555c <UART_SetConfig+0x6f4>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a72      	ldr	r2, [pc, #456]	; (800555c <UART_SetConfig+0x6f4>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f003 020f 	and.w	r2, r3, #15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4442      	add	r2, r8
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	e0d0      	b.n	800554a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe fcd8 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 80053ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	469a      	mov	sl, r3
 80053b2:	f04f 0b00 	mov.w	fp, #0
 80053b6:	46d0      	mov	r8, sl
 80053b8:	46d9      	mov	r9, fp
 80053ba:	eb18 0308 	adds.w	r3, r8, r8
 80053be:	eb49 0409 	adc.w	r4, r9, r9
 80053c2:	4698      	mov	r8, r3
 80053c4:	46a1      	mov	r9, r4
 80053c6:	eb18 080a 	adds.w	r8, r8, sl
 80053ca:	eb49 090b 	adc.w	r9, r9, fp
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053e2:	4688      	mov	r8, r1
 80053e4:	4691      	mov	r9, r2
 80053e6:	eb1a 0508 	adds.w	r5, sl, r8
 80053ea:	eb4b 0609 	adc.w	r6, fp, r9
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4619      	mov	r1, r3
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	f04f 0400 	mov.w	r4, #0
 8005400:	0094      	lsls	r4, r2, #2
 8005402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	461a      	mov	r2, r3
 800540a:	4623      	mov	r3, r4
 800540c:	4628      	mov	r0, r5
 800540e:	4631      	mov	r1, r6
 8005410:	f7fa ff36 	bl	8000280 <__aeabi_uldivmod>
 8005414:	4603      	mov	r3, r0
 8005416:	460c      	mov	r4, r1
 8005418:	461a      	mov	r2, r3
 800541a:	4b50      	ldr	r3, [pc, #320]	; (800555c <UART_SetConfig+0x6f4>)
 800541c:	fba3 2302 	umull	r2, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	469b      	mov	fp, r3
 800542a:	f04f 0c00 	mov.w	ip, #0
 800542e:	46d9      	mov	r9, fp
 8005430:	46e2      	mov	sl, ip
 8005432:	eb19 0309 	adds.w	r3, r9, r9
 8005436:	eb4a 040a 	adc.w	r4, sl, sl
 800543a:	4699      	mov	r9, r3
 800543c:	46a2      	mov	sl, r4
 800543e:	eb19 090b 	adds.w	r9, r9, fp
 8005442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800545a:	4689      	mov	r9, r1
 800545c:	4692      	mov	sl, r2
 800545e:	eb1b 0509 	adds.w	r5, fp, r9
 8005462:	eb4c 060a 	adc.w	r6, ip, sl
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4619      	mov	r1, r3
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	f04f 0400 	mov.w	r4, #0
 8005478:	0094      	lsls	r4, r2, #2
 800547a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800547e:	008b      	lsls	r3, r1, #2
 8005480:	461a      	mov	r2, r3
 8005482:	4623      	mov	r3, r4
 8005484:	4628      	mov	r0, r5
 8005486:	4631      	mov	r1, r6
 8005488:	f7fa fefa 	bl	8000280 <__aeabi_uldivmod>
 800548c:	4603      	mov	r3, r0
 800548e:	460c      	mov	r4, r1
 8005490:	461a      	mov	r2, r3
 8005492:	4b32      	ldr	r3, [pc, #200]	; (800555c <UART_SetConfig+0x6f4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	3332      	adds	r3, #50	; 0x32
 80054a6:	4a2d      	ldr	r2, [pc, #180]	; (800555c <UART_SetConfig+0x6f4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b2:	4498      	add	r8, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	469b      	mov	fp, r3
 80054b8:	f04f 0c00 	mov.w	ip, #0
 80054bc:	46d9      	mov	r9, fp
 80054be:	46e2      	mov	sl, ip
 80054c0:	eb19 0309 	adds.w	r3, r9, r9
 80054c4:	eb4a 040a 	adc.w	r4, sl, sl
 80054c8:	4699      	mov	r9, r3
 80054ca:	46a2      	mov	sl, r4
 80054cc:	eb19 090b 	adds.w	r9, r9, fp
 80054d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054e8:	4689      	mov	r9, r1
 80054ea:	4692      	mov	sl, r2
 80054ec:	eb1b 0509 	adds.w	r5, fp, r9
 80054f0:	eb4c 060a 	adc.w	r6, ip, sl
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	0094      	lsls	r4, r2, #2
 8005508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	461a      	mov	r2, r3
 8005510:	4623      	mov	r3, r4
 8005512:	4628      	mov	r0, r5
 8005514:	4631      	mov	r1, r6
 8005516:	f7fa feb3 	bl	8000280 <__aeabi_uldivmod>
 800551a:	4603      	mov	r3, r0
 800551c:	460c      	mov	r4, r1
 800551e:	461a      	mov	r2, r3
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <UART_SetConfig+0x6f4>)
 8005522:	fba3 1302 	umull	r1, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a09      	ldr	r2, [pc, #36]	; (800555c <UART_SetConfig+0x6f4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4442      	add	r2, r8
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	e7ff      	b.n	800554a <UART_SetConfig+0x6e2>
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	40011000 	.word	0x40011000
 8005558:	40011400 	.word	0x40011400
 800555c:	51eb851f 	.word	0x51eb851f

08005560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005560:	b084      	sub	sp, #16
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	f107 001c 	add.w	r0, r7, #28
 800556e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b01      	cmp	r3, #1
 8005576:	d122      	bne.n	80055be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d105      	bne.n	80055b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f94a 	bl	800584c <USB_CoreReset>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e01a      	b.n	80055f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f93e 	bl	800584c <USB_CoreReset>
 80055d0:	4603      	mov	r3, r0
 80055d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
 80055e6:	e005      	b.n	80055f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10b      	bne.n	8005612 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f043 0206 	orr.w	r2, r3, #6
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800561e:	b004      	add	sp, #16
 8005620:	4770      	bx	lr

08005622 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f043 0201 	orr.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 0201 	bic.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d106      	bne.n	8005692 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	e00b      	b.n	80056aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	e001      	b.n	80056aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e003      	b.n	80056b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056aa:	2032      	movs	r0, #50	; 0x32
 80056ac:	f7fb fe96 	bl	80013dc <HAL_Delay>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <USB_FlushTxFifo+0x48>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e006      	b.n	80056f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d0f0      	beq.n	80056d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	00030d40 	.word	0x00030d40

08005708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2210      	movs	r2, #16
 8005718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <USB_FlushRxFifo+0x40>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e006      	b.n	800573a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d0f0      	beq.n	800571a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	00030d40 	.word	0x00030d40

0800574c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	; 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	460b      	mov	r3, r1
 800575c:	71fb      	strb	r3, [r7, #7]
 800575e:	4613      	mov	r3, r2
 8005760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800576a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11a      	bne.n	80057a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005772:	88bb      	ldrh	r3, [r7, #4]
 8005774:	3303      	adds	r3, #3
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e00f      	b.n	80057a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	031a      	lsls	r2, r3, #12
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	461a      	mov	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3304      	adds	r3, #4
 8005798:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	3301      	adds	r3, #1
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3eb      	bcc.n	8005780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b089      	sub	sp, #36	; 0x24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	4613      	mov	r3, r2
 80057c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	3303      	adds	r3, #3
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e00b      	b.n	80057f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3304      	adds	r3, #4
 80057ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3ef      	bcc.n	80057da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3724      	adds	r7, #36	; 0x24
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0301 	and.w	r3, r3, #1
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <USB_CoreReset+0x64>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e01b      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	daf2      	bge.n	8005858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <USB_CoreReset+0x64>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d0f0      	beq.n	8005882 <USB_CoreReset+0x36>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	00030d40 	.word	0x00030d40

080058b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 001c 	add.w	r0, r7, #28
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	2b03      	cmp	r3, #3
 800590a:	d10a      	bne.n	8005922 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e014      	b.n	800594c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e009      	b.n	800594c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005946:	f023 0304 	bic.w	r3, r3, #4
 800594a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800594c:	2110      	movs	r1, #16
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff feb4 	bl	80056bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fed7 	bl	8005708 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e015      	b.n	800598c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	461a      	mov	r2, r3
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	461a      	mov	r2, r3
 8005982:	2300      	movs	r3, #0
 8005984:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	429a      	cmp	r2, r3
 8005992:	d3e5      	bcc.n	8005960 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005994:	2101      	movs	r1, #1
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8ac 	bl	8005af4 <USB_DriveVbus>

  HAL_Delay(200U);
 800599c:	20c8      	movs	r0, #200	; 0xc8
 800599e:	f7fb fd1d 	bl	80013dc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <USB_HostInit+0x164>)
 80059c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a13      	ldr	r2, [pc, #76]	; (8005a1c <USB_HostInit+0x168>)
 80059ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059d2:	e009      	b.n	80059e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <USB_HostInit+0x16c>)
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <USB_HostInit+0x170>)
 80059e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f043 0210 	orr.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <USB_HostInit+0x174>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a12:	b004      	add	sp, #16
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	01000200 	.word	0x01000200
 8005a1c:	00e00300 	.word	0x00e00300
 8005a20:	00600080 	.word	0x00600080
 8005a24:	004000e0 	.word	0x004000e0
 8005a28:	a3200008 	.word	0xa3200008

08005a2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a64:	4313      	orrs	r3, r2
 8005a66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d107      	bne.n	8005a7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a74:	461a      	mov	r2, r3
 8005a76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a7a:	6053      	str	r3, [r2, #4]
 8005a7c:	e009      	b.n	8005a92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d106      	bne.n	8005a92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ac0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ace:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ad0:	2064      	movs	r0, #100	; 0x64
 8005ad2:	f7fb fc83 	bl	80013dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ae4:	200a      	movs	r0, #10
 8005ae6:	f7fb fc79 	bl	80013dc <HAL_Delay>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <USB_DriveVbus+0x44>
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d106      	bne.n	8005b38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d109      	bne.n	8005b58 <USB_DriveVbus+0x64>
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	0c5b      	lsrs	r3, r3, #17
 8005b84:	f003 0303 	and.w	r3, r3, #3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	b29b      	uxth	r3, r3
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	70fb      	strb	r3, [r7, #3]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70bb      	strb	r3, [r7, #2]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	461a      	mov	r2, r3
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d87e      	bhi.n	8005cf4 <USB_HC_Init+0x13c>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <USB_HC_Init+0x44>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c0d 	.word	0x08005c0d
 8005c00:	08005cb7 	.word	0x08005cb7
 8005c04:	08005c0d 	.word	0x08005c0d
 8005c08:	08005c79 	.word	0x08005c79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	da10      	bge.n	8005c4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005c48:	e057      	b.n	8005cfa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d051      	beq.n	8005cfa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c74:	60d3      	str	r3, [r2, #12]
      break;
 8005c76:	e040      	b.n	8005cfa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	461a      	mov	r2, r3
 8005c86:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da34      	bge.n	8005cfe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005cb4:	e023      	b.n	8005cfe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f240 2325 	movw	r3, #549	; 0x225
 8005cc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da17      	bge.n	8005d02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005cf0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005cf2:	e006      	b.n	8005d02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf8:	e004      	b.n	8005d04 <USB_HC_Init+0x14c>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <USB_HC_Init+0x14c>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <USB_HC_Init+0x14c>
      break;
 8005d02:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	2101      	movs	r1, #1
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da03      	bge.n	8005d3e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	e001      	b.n	8005d42 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d103      	bne.n	8005d52 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d56:	787b      	ldrb	r3, [r7, #1]
 8005d58:	059b      	lsls	r3, r3, #22
 8005d5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d5e:	78bb      	ldrb	r3, [r7, #2]
 8005d60:	02db      	lsls	r3, r3, #11
 8005d62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d6c:	049b      	lsls	r3, r3, #18
 8005d6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	0159      	lsls	r1, r3, #5
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d92:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d10f      	bne.n	8005dbc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop

08005dcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d028      	beq.n	8005e48 <USB_HC_StartXfer+0x7c>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	791b      	ldrb	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d124      	bne.n	8005e48 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <USB_HC_StartXfer+0x50>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	795b      	ldrb	r3, [r3, #5]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa2e 	bl	8006274 <USB_DoPing>
      return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e112      	b.n	8006042 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d112      	bne.n	8005e48 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e40:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d018      	beq.n	8005e82 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	8912      	ldrh	r2, [r2, #8]
 8005e58:	4413      	add	r3, r2
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	8912      	ldrh	r2, [r2, #8]
 8005e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e68:	8b7b      	ldrh	r3, [r7, #26]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d90b      	bls.n	8005e86 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e6e:	8b7b      	ldrh	r3, [r7, #26]
 8005e70:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	8912      	ldrh	r2, [r2, #8]
 8005e78:	fb02 f203 	mul.w	r2, r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	611a      	str	r2, [r3, #16]
 8005e80:	e001      	b.n	8005e86 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e82:	2301      	movs	r3, #1
 8005e84:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	8912      	ldrh	r2, [r2, #8]
 8005e94:	fb02 f203 	mul.w	r2, r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ea6:	04d9      	lsls	r1, r3, #19
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <USB_HC_StartXfer+0x280>)
 8005eaa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	7a9b      	ldrb	r3, [r3, #10]
 8005eb2:	075b      	lsls	r3, r3, #29
 8005eb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eb8:	69f9      	ldr	r1, [r7, #28]
 8005eba:	0148      	lsls	r0, r1, #5
 8005ebc:	6a39      	ldr	r1, [r7, #32]
 8005ebe:	4401      	add	r1, r0
 8005ec0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ec4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ec6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68d9      	ldr	r1, [r3, #12]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	460a      	mov	r2, r1
 8005ee0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	7e7b      	ldrb	r3, [r7, #25]
 8005f2a:	075b      	lsls	r3, r3, #29
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	0148      	lsls	r0, r1, #5
 8005f30:	6a39      	ldr	r1, [r7, #32]
 8005f32:	4401      	add	r1, r0
 8005f34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a41      	ldr	r2, [pc, #260]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f4e:	4b40      	ldr	r3, [pc, #256]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f56:	4a3e      	ldr	r2, [pc, #248]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	78db      	ldrb	r3, [r3, #3]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f62:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	4a39      	ldr	r2, [pc, #228]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e005      	b.n	8005f7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f70:	4b37      	ldr	r3, [pc, #220]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f78:	4a35      	ldr	r2, [pc, #212]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	4a32      	ldr	r2, [pc, #200]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <USB_HC_StartXfer+0x284>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d14e      	bne.n	8006040 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	78db      	ldrb	r3, [r3, #3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d14a      	bne.n	8006040 <USB_HC_StartXfer+0x274>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d046      	beq.n	8006040 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	79db      	ldrb	r3, [r3, #7]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d830      	bhi.n	800601c <USB_HC_StartXfer+0x250>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <USB_HC_StartXfer+0x1f4>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	08005ff5 	.word	0x08005ff5
 8005fc8:	08005fd1 	.word	0x08005fd1
 8005fcc:	08005ff5 	.word	0x08005ff5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	089b      	lsrs	r3, r3, #2
 8005fd8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005fda:	8afa      	ldrh	r2, [r7, #22]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d91c      	bls.n	8006020 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]
          }
          break;
 8005ff2:	e015      	b.n	8006020 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	3303      	adds	r3, #3
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ffe:	8afa      	ldrh	r2, [r7, #22]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	b29b      	uxth	r3, r3
 800600a:	429a      	cmp	r2, r3
 800600c:	d90a      	bls.n	8006024 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	619a      	str	r2, [r3, #24]
          }
          break;
 800601a:	e003      	b.n	8006024 <USB_HC_StartXfer+0x258>

        default:
          break;
 800601c:	bf00      	nop
 800601e:	e002      	b.n	8006026 <USB_HC_StartXfer+0x25a>
          break;
 8006020:	bf00      	nop
 8006022:	e000      	b.n	8006026 <USB_HC_StartXfer+0x25a>
          break;
 8006024:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	68d9      	ldr	r1, [r3, #12]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785a      	ldrb	r2, [r3, #1]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	b298      	uxth	r0, r3
 8006034:	2300      	movs	r3, #0
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4603      	mov	r3, r0
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fb86 	bl	800574c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	; 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	1ff80000 	.word	0x1ff80000
 8006050:	2000022c 	.word	0x2000022c

08006054 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	b29b      	uxth	r3, r3
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006076:	b480      	push	{r7}
 8006078:	b087      	sub	sp, #28
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	0c9b      	lsrs	r3, r3, #18
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <USB_HC_Halt+0x3a>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d16c      	bne.n	800618a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ce:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d143      	bne.n	8006164 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	440a      	add	r2, r1
 8006112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800613a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	3301      	adds	r3, #1
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d81d      	bhi.n	8006186 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006160:	d0ec      	beq.n	800613c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006162:	e080      	b.n	8006266 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	440a      	add	r2, r1
 800617a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800617e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006182:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006184:	e06f      	b.n	8006266 <USB_HC_Halt+0x1f0>
          break;
 8006186:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006188:	e06d      	b.n	8006266 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d143      	bne.n	8006242 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006218:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	3301      	adds	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006226:	d81d      	bhi.n	8006264 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800623a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623e:	d0ec      	beq.n	800621a <USB_HC_Halt+0x1a4>
 8006240:	e011      	b.n	8006266 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	440a      	add	r2, r1
 8006258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e000      	b.n	8006266 <USB_HC_Halt+0x1f0>
          break;
 8006264:	bf00      	nop
    }
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006288:	2301      	movs	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	04da      	lsls	r2, r3, #19
 8006290:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <USB_DoPing+0x74>)
 8006292:	4013      	ands	r3, r2
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	1ff80000 	.word	0x1ff80000

080062ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f9a1 	bl	8005644 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006302:	2110      	movs	r1, #16
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff f9d9 	bl	80056bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff f9fc 	bl	8005708 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	e01f      	b.n	8006356 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800632c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006334:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800633c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	461a      	mov	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	3301      	adds	r3, #1
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b0f      	cmp	r3, #15
 800635a:	d9dc      	bls.n	8006316 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e034      	b.n	80063cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006378:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006380:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3301      	adds	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a8:	d80c      	bhi.n	80063c4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c0:	d0ec      	beq.n	800639c <USB_StopHost+0xb0>
 80063c2:	e000      	b.n	80063c6 <USB_StopHost+0xda>
        break;
 80063c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d9c7      	bls.n	8006362 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d8:	461a      	mov	r2, r3
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295
 80063e6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff f91a 	bl	8005622 <USB_EnableGlobalInt>

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80063f8:	b590      	push	{r4, r7, lr}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006400:	2302      	movs	r3, #2
 8006402:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006404:	2301      	movs	r3, #1
 8006406:	2202      	movs	r2, #2
 8006408:	2102      	movs	r1, #2
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fc3a 	bl	8006c84 <USBH_FindInterface>
 8006410:	4603      	mov	r3, r0
 8006412:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	f000 812a 	beq.w	8006670 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fc13 	bl	8006c4c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800642c:	2050      	movs	r0, #80	; 0x50
 800642e:	f002 f8df 	bl	80085f0 <malloc>
 8006432:	4603      	mov	r3, r0
 8006434:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	211a      	movs	r1, #26
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b25b      	sxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	da15      	bge.n	8006484 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	211a      	movs	r1, #26
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	211a      	movs	r1, #26
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fd21 	bl	8007ed2 <USBH_AllocPipe>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	7819      	ldrb	r1, [r3, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	7858      	ldrb	r0, [r3, #1]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	8952      	ldrh	r2, [r2, #10]
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	2203      	movs	r2, #3
 80064b4:	9201      	str	r2, [sp, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4623      	mov	r3, r4
 80064ba:	4602      	mov	r2, r0
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fcd9 	bl	8007e74 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 ffe0 	bl	8008490 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80064d0:	2300      	movs	r3, #0
 80064d2:	2200      	movs	r2, #0
 80064d4:	210a      	movs	r1, #10
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fbd4 	bl	8006c84 <USBH_FindInterface>
 80064dc:	4603      	mov	r3, r0
 80064de:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2bff      	cmp	r3, #255	; 0xff
 80064e4:	f000 80c4 	beq.w	8006670 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	211a      	movs	r1, #26
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da16      	bge.n	800652e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	211a      	movs	r1, #26
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	835a      	strh	r2, [r3, #26]
 800652c:	e015      	b.n	800655a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	211a      	movs	r1, #26
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	211a      	movs	r1, #26
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	211a      	movs	r1, #26
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	4413      	add	r3, r2
 8006566:	f203 3352 	addw	r3, r3, #850	; 0x352
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b25b      	sxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	da16      	bge.n	80065a0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	211a      	movs	r1, #26
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	211a      	movs	r1, #26
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	835a      	strh	r2, [r3, #26]
 800659e:	e015      	b.n	80065cc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	211a      	movs	r1, #26
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 3352 	addw	r3, r3, #850	; 0x352
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	211a      	movs	r1, #26
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	7b9b      	ldrb	r3, [r3, #14]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fc7d 	bl	8007ed2 <USBH_AllocPipe>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	7bdb      	ldrb	r3, [r3, #15]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fc73 	bl	8007ed2 <USBH_AllocPipe>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	7b59      	ldrb	r1, [r3, #13]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	7b98      	ldrb	r0, [r3, #14]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	8b12      	ldrh	r2, [r2, #24]
 800660c:	9202      	str	r2, [sp, #8]
 800660e:	2202      	movs	r2, #2
 8006610:	9201      	str	r2, [sp, #4]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	4623      	mov	r3, r4
 8006616:	4602      	mov	r2, r0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fc2b 	bl	8007e74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	7b19      	ldrb	r1, [r3, #12]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	7bd8      	ldrb	r0, [r3, #15]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	8b52      	ldrh	r2, [r2, #26]
 8006636:	9202      	str	r2, [sp, #8]
 8006638:	2202      	movs	r2, #2
 800663a:	9201      	str	r2, [sp, #4]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4623      	mov	r3, r4
 8006640:	4602      	mov	r2, r0
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fc16 	bl	8007e74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	7b5b      	ldrb	r3, [r3, #13]
 8006654:	2200      	movs	r2, #0
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 ff19 	bl	8008490 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	7b1b      	ldrb	r3, [r3, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 ff12 	bl	8008490 <USBH_LL_SetToggle>
      status = USBH_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bd90      	pop	{r4, r7, pc}

0800667a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fc09 	bl	8007eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fc31 	bl	8007f0e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	7b1b      	ldrb	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b1b      	ldrb	r3, [r3, #12]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 fbf6 	bl	8007eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fc1e 	bl	8007f0e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	7b5b      	ldrb	r3, [r3, #13]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00e      	beq.n	80066fe <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	7b5b      	ldrb	r3, [r3, #13]
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fbe3 	bl	8007eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	7b5b      	ldrb	r3, [r3, #13]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fc0b 	bl	8007f0e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4618      	mov	r0, r3
 8006714:	f001 ff74 	bl	8008600 <free>
    phost->pActiveClass->pData = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006734:	2302      	movs	r3, #2
 8006736:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3340      	adds	r3, #64	; 0x40
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f8b2 	bl	80068b2 <GetLineCoding>
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800675e:	2102      	movs	r1, #2
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
  }
  return status;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006790:	2b04      	cmp	r3, #4
 8006792:	d877      	bhi.n	8006884 <USBH_CDC_Process+0x114>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USBH_CDC_Process+0x2c>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067b1 	.word	0x080067b1
 80067a0:	080067b7 	.word	0x080067b7
 80067a4:	080067e7 	.word	0x080067e7
 80067a8:	0800685b 	.word	0x0800685b
 80067ac:	08006869 	.word	0x08006869
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
    break;
 80067b4:	e06d      	b.n	8006892 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f897 	bl	80068f0 <SetLineCoding>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80067d4:	e058      	b.n	8006888 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d055      	beq.n	8006888 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2204      	movs	r2, #4
 80067e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80067e4:	e050      	b.n	8006888 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	3340      	adds	r3, #64	; 0x40
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f860 	bl	80068b2 <GetLineCoding>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d126      	bne.n	800684a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680e:	791b      	ldrb	r3, [r3, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d13b      	bne.n	800688c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006820:	429a      	cmp	r2, r3
 8006822:	d133      	bne.n	800688c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006830:	429a      	cmp	r2, r3
 8006832:	d12b      	bne.n	800688c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800683c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800683e:	429a      	cmp	r2, r3
 8006840:	d124      	bne.n	800688c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f95a 	bl	8006afc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006848:	e020      	b.n	800688c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d01d      	beq.n	800688c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2204      	movs	r2, #4
 8006854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006858:	e018      	b.n	800688c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f867 	bl	800692e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8dc 	bl	8006a1e <CDC_ProcessReception>
    break;
 8006866:	e014      	b.n	8006892 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006868:	2100      	movs	r1, #0
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fece 	bl	800760c <USBH_ClrFeature>
 8006870:	4603      	mov	r3, r0
 8006872:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006882:	e005      	b.n	8006890 <USBH_CDC_Process+0x120>

  default:
    break;
 8006884:	bf00      	nop
 8006886:	e004      	b.n	8006892 <USBH_CDC_Process+0x122>
    break;
 8006888:	bf00      	nop
 800688a:	e002      	b.n	8006892 <USBH_CDC_Process+0x122>
    break;
 800688c:	bf00      	nop
 800688e:	e000      	b.n	8006892 <USBH_CDC_Process+0x122>
    break;
 8006890:	bf00      	nop

  }

  return status;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	22a1      	movs	r2, #161	; 0xa1
 80068c0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2221      	movs	r2, #33	; 0x21
 80068c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2207      	movs	r2, #7
 80068d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2207      	movs	r2, #7
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f873 	bl	80079cc <USBH_CtlReq>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2221      	movs	r2, #33	; 0x21
 80068fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2207      	movs	r2, #7
 8006916:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2207      	movs	r2, #7
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f854 	bl	80079cc <USBH_CtlReq>
 8006924:	4603      	mov	r3, r0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af02      	add	r7, sp, #8
 8006934:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006940:	2300      	movs	r3, #0
 8006942:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800694a:	2b01      	cmp	r3, #1
 800694c:	d002      	beq.n	8006954 <CDC_ProcessTransmission+0x26>
 800694e:	2b02      	cmp	r3, #2
 8006950:	d025      	beq.n	800699e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006952:	e060      	b.n	8006a16 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	8b12      	ldrh	r2, [r2, #24]
 800695c:	4293      	cmp	r3, r2
 800695e:	d90c      	bls.n	800697a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	69d9      	ldr	r1, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8b1a      	ldrh	r2, [r3, #24]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	7b58      	ldrb	r0, [r3, #13]
 800696c:	2301      	movs	r3, #1
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4603      	mov	r3, r0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fa3b 	bl	8007dee <USBH_BulkSendData>
 8006978:	e00c      	b.n	8006994 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	7b58      	ldrb	r0, [r3, #13]
 8006988:	2301      	movs	r3, #1
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fa2d 	bl	8007dee <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800699c:	e03b      	b.n	8006a16 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	7b5b      	ldrb	r3, [r3, #13]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fd49 	bl	800843c <USBH_LL_GetURBState>
 80069aa:	4603      	mov	r3, r0
 80069ac:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d128      	bne.n	8006a06 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	8b12      	ldrh	r2, [r2, #24]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d90e      	bls.n	80069de <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	8b12      	ldrh	r2, [r2, #24]
 80069c8:	1a9a      	subs	r2, r3, r2
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	8b12      	ldrh	r2, [r2, #24]
 80069d6:	441a      	add	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	61da      	str	r2, [r3, #28]
 80069dc:	e002      	b.n	80069e4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80069f4:	e00e      	b.n	8006a14 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f868 	bl	8006ad4 <USBH_CDC_TransmitCallback>
    break;
 8006a04:	e006      	b.n	8006a14 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d103      	bne.n	8006a14 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a14:	bf00      	nop
  }
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d002      	beq.n	8006a44 <CDC_ProcessReception+0x26>
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d00e      	beq.n	8006a60 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006a42:	e043      	b.n	8006acc <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a19      	ldr	r1, [r3, #32]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	8b5a      	ldrh	r2, [r3, #26]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	7b1b      	ldrb	r3, [r3, #12]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f9f1 	bl	8007e38 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006a5e:	e035      	b.n	8006acc <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	7b1b      	ldrb	r3, [r3, #12]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fce8 	bl	800843c <USBH_LL_GetURBState>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006a70:	7cfb      	ldrb	r3, [r7, #19]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d129      	bne.n	8006aca <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	7b1b      	ldrb	r3, [r3, #12]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fc4b 	bl	8008318 <USBH_LL_GetLastXferSize>
 8006a82:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d016      	beq.n	8006abc <CDC_ProcessReception+0x9e>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	8b5b      	ldrh	r3, [r3, #26]
 8006a92:	461a      	mov	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d910      	bls.n	8006abc <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	441a      	add	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006aba:	e006      	b.n	8006aca <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f80f 	bl	8006ae8 <USBH_CDC_ReceiveCallback>
    break;
 8006aca:	bf00      	nop
  }
}
 8006acc:	bf00      	nop
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e019      	b.n	8006b5c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	79fa      	ldrb	r2, [r7, #7]
 8006b2c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f80f 	bl	8006b64 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f001 fb2d 	bl	80081b4 <USBH_LL_Init>

  return USBH_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b70:	e008      	b.n	8006b84 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	32e0      	adds	r2, #224	; 0xe0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b0e      	cmp	r3, #14
 8006b88:	d9f3      	bls.n	8006b72 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	e009      	b.n	8006ba4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006baa:	d3f1      	bcc.n	8006b90 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2240      	movs	r2, #64	; 0x40
 8006bd0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d017      	beq.n	8006c3a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10f      	bne.n	8006c34 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	33dc      	adds	r3, #220	; 0xdc
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e004      	b.n	8006c3e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e001      	b.n	8006c3e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d204      	bcs.n	8006c72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	78fa      	ldrb	r2, [r7, #3]
 8006c6c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006c70:	e001      	b.n	8006c76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c72:	2302      	movs	r3, #2
 8006c74:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	70fb      	strb	r3, [r7, #3]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70bb      	strb	r3, [r7, #2]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006cac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cae:	e025      	b.n	8006cfc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	221a      	movs	r2, #26
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	3308      	adds	r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	795b      	ldrb	r3, [r3, #5]
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d002      	beq.n	8006cd2 <USBH_FindInterface+0x4e>
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	2bff      	cmp	r3, #255	; 0xff
 8006cd0:	d111      	bne.n	8006cf6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006cd6:	78ba      	ldrb	r2, [r7, #2]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d002      	beq.n	8006ce2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006cdc:	78bb      	ldrb	r3, [r7, #2]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d109      	bne.n	8006cf6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006ce6:	787a      	ldrb	r2, [r7, #1]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d002      	beq.n	8006cf2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	2bff      	cmp	r3, #255	; 0xff
 8006cf0:	d101      	bne.n	8006cf6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	e006      	b.n	8006d04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d9d6      	bls.n	8006cb0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d02:	23ff      	movs	r3, #255	; 0xff
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fa87 	bl	800822c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006d1e:	2101      	movs	r1, #1
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fb9e 	bl	8008462 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af04      	add	r7, sp, #16
 8006d36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 faec 	bl	800731e <USBH_IsPortEnabled>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10c      	bne.n	8006d66 <USBH_Process+0x36>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d002      	beq.n	8006d66 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2203      	movs	r2, #3
 8006d64:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b0b      	cmp	r3, #11
 8006d6e:	f200 814c 	bhi.w	800700a <USBH_Process+0x2da>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBH_Process+0x48>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006da9 	.word	0x08006da9
 8006d7c:	08006dcb 	.word	0x08006dcb
 8006d80:	08006ddf 	.word	0x08006ddf
 8006d84:	08006fe5 	.word	0x08006fe5
 8006d88:	0800700b 	.word	0x0800700b
 8006d8c:	08006e6d 	.word	0x08006e6d
 8006d90:	08006f9b 	.word	0x08006f9b
 8006d94:	08006e9d 	.word	0x08006e9d
 8006d98:	08006ebd 	.word	0x08006ebd
 8006d9c:	08006edd 	.word	0x08006edd
 8006da0:	08006f0b 	.word	0x08006f0b
 8006da4:	08006fcd 	.word	0x08006fcd
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 812c 	beq.w	800700e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006dbc:	20c8      	movs	r0, #200	; 0xc8
 8006dbe:	f001 fb9a 	bl	80084f6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fa8d 	bl	80082e2 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006dc8:	e121      	b.n	800700e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	f040 811e 	bne.w	8007012 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006ddc:	e119      	b.n	8007012 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006dde:	2064      	movs	r0, #100	; 0x64
 8006de0:	f001 fb89 	bl	80084f6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fa57 	bl	8008298 <USBH_LL_GetSpeed>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2205      	movs	r2, #5
 8006df8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f868 	bl	8007ed2 <USBH_AllocPipe>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f860 	bl	8007ed2 <USBH_AllocPipe>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7919      	ldrb	r1, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006e2e:	b292      	uxth	r2, r2
 8006e30:	9202      	str	r2, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	9201      	str	r2, [sp, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2280      	movs	r2, #128	; 0x80
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f819 	bl	8007e74 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7959      	ldrb	r1, [r3, #5]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006e56:	b292      	uxth	r2, r2
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4603      	mov	r3, r0
 8006e62:	2200      	movs	r2, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f805 	bl	8007e74 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e6a:	e0e3      	b.n	8007034 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f8e7 	bl	8007040 <USBH_HandleEnum>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f040 80ce 	bne.w	8007016 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d103      	bne.n	8006e94 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2208      	movs	r2, #8
 8006e90:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006e92:	e0c0      	b.n	8007016 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2207      	movs	r2, #7
 8006e98:	701a      	strb	r2, [r3, #0]
    break;
 8006e9a:	e0bc      	b.n	8007016 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80b9 	beq.w	800701a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eae:	2101      	movs	r1, #1
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006eba:	e0ae      	b.n	800701a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb59 	bl	800757e <USBH_SetCfg>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f040 80a5 	bne.w	800701e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2209      	movs	r2, #9
 8006ed8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006eda:	e0a0      	b.n	800701e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fb69 	bl	80075c4 <USBH_SetFeature>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 8094 	bne.w	8007022 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	220a      	movs	r2, #10
 8006efe:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f00:	e08f      	b.n	8007022 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	220a      	movs	r2, #10
 8006f06:	701a      	strb	r2, [r3, #0]
    break;
 8006f08:	e08b      	b.n	8007022 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8088 	beq.w	8007026 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e017      	b.n	8006f54 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	33dc      	adds	r3, #220	; 0xdc
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	791a      	ldrb	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d108      	bne.n	8006f4e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	33dc      	adds	r3, #220	; 0xdc
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	3301      	adds	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0e4      	beq.n	8006f24 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d016      	beq.n	8006f92 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2206      	movs	r2, #6
 8006f7a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f82:	2103      	movs	r1, #3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f88:	e04d      	b.n	8007026 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	220d      	movs	r2, #13
 8006f8e:	701a      	strb	r2, [r3, #0]
    break;
 8006f90:	e049      	b.n	8007026 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	220d      	movs	r2, #13
 8006f96:	701a      	strb	r2, [r3, #0]
    break;
 8006f98:	e045      	b.n	8007026 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d136      	bne.n	800702a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	220b      	movs	r2, #11
 8006fc0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006fc2:	e032      	b.n	800702a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	220d      	movs	r2, #13
 8006fc8:	701a      	strb	r2, [r3, #0]
    break;
 8006fca:	e02e      	b.n	800702a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02b      	beq.n	800702e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
    }
    break;
 8006fe2:	e024      	b.n	800702e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fdbd 	bl	8006b64 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01e      	beq.n	8007032 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007008:	e013      	b.n	8007032 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800700a:	bf00      	nop
 800700c:	e012      	b.n	8007034 <USBH_Process+0x304>
    break;
 800700e:	bf00      	nop
 8007010:	e010      	b.n	8007034 <USBH_Process+0x304>
    break;
 8007012:	bf00      	nop
 8007014:	e00e      	b.n	8007034 <USBH_Process+0x304>
    break;
 8007016:	bf00      	nop
 8007018:	e00c      	b.n	8007034 <USBH_Process+0x304>
    break;
 800701a:	bf00      	nop
 800701c:	e00a      	b.n	8007034 <USBH_Process+0x304>
    break;
 800701e:	bf00      	nop
 8007020:	e008      	b.n	8007034 <USBH_Process+0x304>
    break;
 8007022:	bf00      	nop
 8007024:	e006      	b.n	8007034 <USBH_Process+0x304>
    break;
 8007026:	bf00      	nop
 8007028:	e004      	b.n	8007034 <USBH_Process+0x304>
    break;
 800702a:	bf00      	nop
 800702c:	e002      	b.n	8007034 <USBH_Process+0x304>
    break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <USBH_Process+0x304>
    break;
 8007032:	bf00      	nop
  }
 return USBH_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop

08007040 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af04      	add	r7, sp, #16
 8007046:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b07      	cmp	r3, #7
 8007052:	f200 80f8 	bhi.w	8007246 <USBH_HandleEnum+0x206>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <USBH_HandleEnum+0x1c>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800707d 	.word	0x0800707d
 8007060:	080070ef 	.word	0x080070ef
 8007064:	08007107 	.word	0x08007107
 8007068:	0800717d 	.word	0x0800717d
 800706c:	08007193 	.word	0x08007193
 8007070:	080071af 	.word	0x080071af
 8007074:	080071e3 	.word	0x080071e3
 8007078:	08007217 	.word	0x08007217
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800707c:	2108      	movs	r1, #8
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9ad 	bl	80073de <USBH_Get_DevDesc>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 80df 	bne.w	800724a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7919      	ldrb	r1, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80070b0:	b292      	uxth	r2, r2
 80070b2:	9202      	str	r2, [sp, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fed8 	bl	8007e74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	7959      	ldrb	r1, [r3, #5]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80070d8:	b292      	uxth	r2, r2
 80070da:	9202      	str	r2, [sp, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	9201      	str	r2, [sp, #4]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	4603      	mov	r3, r0
 80070e4:	2200      	movs	r2, #0
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fec4 	bl	8007e74 <USBH_OpenPipe>

    }
    break;
 80070ec:	e0ad      	b.n	800724a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80070ee:	2112      	movs	r1, #18
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f974 	bl	80073de <USBH_Get_DevDesc>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 80a8 	bne.w	800724e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007104:	e0a3      	b.n	800724e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007106:	2101      	movs	r1, #1
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa14 	bl	8007536 <USBH_SetAddress>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 809e 	bne.w	8007252 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007116:	2002      	movs	r0, #2
 8007118:	f001 f9ed 	bl	80084f6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7919      	ldrb	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800713e:	b292      	uxth	r2, r2
 8007140:	9202      	str	r2, [sp, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fe91 	bl	8007e74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7959      	ldrb	r1, [r3, #5]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007166:	b292      	uxth	r2, r2
 8007168:	9202      	str	r2, [sp, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4603      	mov	r3, r0
 8007172:	2200      	movs	r2, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fe7d 	bl	8007e74 <USBH_OpenPipe>
    }
    break;
 800717a:	e06a      	b.n	8007252 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800717c:	2109      	movs	r1, #9
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f955 	bl	800742e <USBH_Get_CfgDesc>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d165      	bne.n	8007256 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007190:	e061      	b.n	8007256 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f947 	bl	800742e <USBH_Get_CfgDesc>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d159      	bne.n	800725a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2205      	movs	r2, #5
 80071aa:	705a      	strb	r2, [r3, #1]
    }
    break;
 80071ac:	e055      	b.n	800725a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d010      	beq.n	80071da <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80071c4:	23ff      	movs	r3, #255	; 0xff
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f955 	bl	8007476 <USBH_Get_StringDesc>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d145      	bne.n	800725e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2206      	movs	r2, #6
 80071d6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80071d8:	e041      	b.n	800725e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2206      	movs	r2, #6
 80071de:	705a      	strb	r2, [r3, #1]
    break;
 80071e0:	e03d      	b.n	800725e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80071f8:	23ff      	movs	r3, #255	; 0xff
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f93b 	bl	8007476 <USBH_Get_StringDesc>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d12d      	bne.n	8007262 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2207      	movs	r2, #7
 800720a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800720c:	e029      	b.n	8007262 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2207      	movs	r2, #7
 8007212:	705a      	strb	r2, [r3, #1]
    break;
 8007214:	e025      	b.n	8007262 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800722c:	23ff      	movs	r3, #255	; 0xff
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f921 	bl	8007476 <USBH_Get_StringDesc>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d115      	bne.n	8007266 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800723e:	e012      	b.n	8007266 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	e00f      	b.n	8007266 <USBH_HandleEnum+0x226>

  default:
    break;
 8007246:	bf00      	nop
 8007248:	e00e      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 800724a:	bf00      	nop
 800724c:	e00c      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 800724e:	bf00      	nop
 8007250:	e00a      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 8007252:	bf00      	nop
 8007254:	e008      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 8007256:	bf00      	nop
 8007258:	e006      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 800725a:	bf00      	nop
 800725c:	e004      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <USBH_HandleEnum+0x228>
    break;
 8007266:	bf00      	nop
  }
  return Status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f804 	bl	80072b6 <USBH_HandleSof>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b0b      	cmp	r3, #11
 80072c6:	d10a      	bne.n	80072de <USBH_HandleSof+0x28>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
  }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80072f6:	bf00      	nop
}
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007312:	bf00      	nop
}
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00e      	beq.n	800737a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007362:	2104      	movs	r1, #4
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
 8007368:	e007      	b.n	800737a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007370:	2b01      	cmp	r3, #1
 8007372:	d102      	bne.n	800737a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 ff68 	bl	8008262 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	791b      	ldrb	r3, [r3, #4]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fdb8 	bl	8007f0e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	795b      	ldrb	r3, [r3, #5]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fdb2 	bl	8007f0e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073c2:	2105      	movs	r1, #5
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 ff2f 	bl	800822c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2203      	movs	r2, #3
 80073d2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af02      	add	r7, sp, #8
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073fc:	2100      	movs	r1, #0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f864 	bl	80074cc <USBH_GetDescriptor>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	b292      	uxth	r2, r2
 800741e:	4619      	mov	r1, r3
 8007420:	f000 f918 	bl	8007654 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af02      	add	r7, sp, #8
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	331c      	adds	r3, #28
 800743e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007440:	887b      	ldrh	r3, [r7, #2]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f83d 	bl	80074cc <USBH_GetDescriptor>
 8007452:	4603      	mov	r3, r0
 8007454:	72fb      	strb	r3, [r7, #11]
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d107      	bne.n	800746c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007462:	887a      	ldrh	r2, [r7, #2]
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f964 	bl	8007734 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800746c:	7afb      	ldrb	r3, [r7, #11]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b088      	sub	sp, #32
 800747a:	af02      	add	r7, sp, #8
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	461a      	mov	r2, r3
 8007482:	460b      	mov	r3, r1
 8007484:	72fb      	strb	r3, [r7, #11]
 8007486:	4613      	mov	r3, r2
 8007488:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	b29b      	uxth	r3, r3
 800748e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007492:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	460b      	mov	r3, r1
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f812 	bl	80074cc <USBH_GetDescriptor>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d107      	bne.n	80074c2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074b8:	893a      	ldrh	r2, [r7, #8]
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fa37 	bl	8007930 <USBH_ParseStringDesc>
  }
  return status;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	72fb      	strb	r3, [r7, #11]
 80074da:	4613      	mov	r3, r2
 80074dc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	789b      	ldrb	r3, [r3, #2]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d11c      	bne.n	8007520 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2206      	movs	r2, #6
 80074f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	893a      	ldrh	r2, [r7, #8]
 80074fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80074fe:	893b      	ldrh	r3, [r7, #8]
 8007500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007508:	d104      	bne.n	8007514 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f240 4209 	movw	r2, #1033	; 0x409
 8007510:	829a      	strh	r2, [r3, #20]
 8007512:	e002      	b.n	800751a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8b3a      	ldrh	r2, [r7, #24]
 800751e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007520:	8b3b      	ldrh	r3, [r7, #24]
 8007522:	461a      	mov	r2, r3
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fa50 	bl	80079cc <USBH_CtlReq>
 800752c:	4603      	mov	r3, r0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	789b      	ldrb	r3, [r3, #2]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10f      	bne.n	800756a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2205      	movs	r2, #5
 8007554:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	b29a      	uxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800756a:	2200      	movs	r2, #0
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa2c 	bl	80079cc <USBH_CtlReq>
 8007574:	4603      	mov	r3, r0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	789b      	ldrb	r3, [r3, #2]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10e      	bne.n	80075b0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2209      	movs	r2, #9
 800759c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	887a      	ldrh	r2, [r7, #2]
 80075a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa09 	bl	80079cc <USBH_CtlReq>
 80075ba:	4603      	mov	r3, r0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10f      	bne.n	80075f8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2203      	movs	r2, #3
 80075e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9e5 	bl	80079cc <USBH_CtlReq>
 8007602:	4603      	mov	r3, r0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	789b      	ldrb	r3, [r3, #2]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d10f      	bne.n	8007640 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007640:	2200      	movs	r2, #0
 8007642:	2100      	movs	r1, #0
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9c1 	bl	80079cc <USBH_CtlReq>
 800764a:	4603      	mov	r3, r0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	785a      	ldrb	r2, [r3, #1]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3302      	adds	r3, #2
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b29a      	uxth	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3303      	adds	r3, #3
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	791a      	ldrb	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	795a      	ldrb	r2, [r3, #5]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	799a      	ldrb	r2, [r3, #6]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	79da      	ldrb	r2, [r3, #7]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d939      	bls.n	8007728 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	3308      	adds	r3, #8
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	3309      	adds	r3, #9
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	4313      	orrs	r3, r2
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	330a      	adds	r3, #10
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	330b      	adds	r3, #11
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	330c      	adds	r3, #12
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	330d      	adds	r3, #13
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	7b9a      	ldrb	r2, [r3, #14]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	7bda      	ldrb	r2, [r3, #15]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	7c1a      	ldrb	r2, [r3, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	7c5a      	ldrb	r2, [r3, #17]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	745a      	strb	r2, [r3, #17]
  }
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	781a      	ldrb	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785a      	ldrb	r2, [r3, #1]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3302      	adds	r3, #2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b29a      	uxth	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3303      	adds	r3, #3
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	4313      	orrs	r3, r2
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	791a      	ldrb	r2, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	795a      	ldrb	r2, [r3, #5]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	799a      	ldrb	r2, [r3, #6]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	79da      	ldrb	r2, [r3, #7]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	7a1a      	ldrb	r2, [r3, #8]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d95f      	bls.n	8007870 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80077b0:	2309      	movs	r3, #9
 80077b2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077b8:	e051      	b.n	800785e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077ba:	f107 0316 	add.w	r3, r7, #22
 80077be:	4619      	mov	r1, r3
 80077c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077c2:	f000 f8e8 	bl	8007996 <USBH_GetNextDesc>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d146      	bne.n	800785e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80077d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d4:	221a      	movs	r2, #26
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	3308      	adds	r3, #8
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	3302      	adds	r3, #2
 80077e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80077e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077e6:	69f8      	ldr	r0, [r7, #28]
 80077e8:	f000 f846 	bl	8007878 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077f6:	e022      	b.n	800783e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80077f8:	f107 0316 	add.w	r3, r7, #22
 80077fc:	4619      	mov	r1, r3
 80077fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007800:	f000 f8c9 	bl	8007996 <USBH_GetNextDesc>
 8007804:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b05      	cmp	r3, #5
 800780c:	d117      	bne.n	800783e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800780e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007812:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007816:	3201      	adds	r2, #1
 8007818:	00d2      	lsls	r2, r2, #3
 800781a:	211a      	movs	r1, #26
 800781c:	fb01 f303 	mul.w	r3, r1, r3
 8007820:	4413      	add	r3, r2
 8007822:	3308      	adds	r3, #8
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	3304      	adds	r3, #4
 800782a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800782c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800782e:	69b8      	ldr	r0, [r7, #24]
 8007830:	f000 f851 	bl	80078d6 <USBH_ParseEPDesc>
            ep_ix++;
 8007834:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007838:	3301      	adds	r3, #1
 800783a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007846:	429a      	cmp	r2, r3
 8007848:	d204      	bcs.n	8007854 <USBH_ParseCfgDesc+0x120>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	885a      	ldrh	r2, [r3, #2]
 800784e:	8afb      	ldrh	r3, [r7, #22]
 8007850:	429a      	cmp	r2, r3
 8007852:	d8d1      	bhi.n	80077f8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007858:	3301      	adds	r3, #1
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800785e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007862:	2b01      	cmp	r3, #1
 8007864:	d804      	bhi.n	8007870 <USBH_ParseCfgDesc+0x13c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	885a      	ldrh	r2, [r3, #2]
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	429a      	cmp	r2, r3
 800786e:	d8a4      	bhi.n	80077ba <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007870:	bf00      	nop
 8007872:	3728      	adds	r7, #40	; 0x28
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785a      	ldrb	r2, [r3, #1]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	789a      	ldrb	r2, [r3, #2]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	78da      	ldrb	r2, [r3, #3]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	791a      	ldrb	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	795a      	ldrb	r2, [r3, #5]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	799a      	ldrb	r2, [r3, #6]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	79da      	ldrb	r2, [r3, #7]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	7a1a      	ldrb	r2, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	721a      	strb	r2, [r3, #8]
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	785a      	ldrb	r2, [r3, #1]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	789a      	ldrb	r2, [r3, #2]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	78da      	ldrb	r2, [r3, #3]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3304      	adds	r3, #4
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29a      	uxth	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	3305      	adds	r3, #5
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b29b      	uxth	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	799a      	ldrb	r2, [r3, #6]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	719a      	strb	r2, [r3, #6]
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d120      	bne.n	800798a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	1e9a      	subs	r2, r3, #2
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	4293      	cmp	r3, r2
 8007952:	bf28      	it	cs
 8007954:	4613      	movcs	r3, r2
 8007956:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3302      	adds	r3, #2
 800795c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800795e:	2300      	movs	r3, #0
 8007960:	82fb      	strh	r3, [r7, #22]
 8007962:	e00b      	b.n	800797c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007964:	8afb      	ldrh	r3, [r7, #22]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3301      	adds	r3, #1
 8007974:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007976:	8afb      	ldrh	r3, [r7, #22]
 8007978:	3302      	adds	r3, #2
 800797a:	82fb      	strh	r3, [r7, #22]
 800797c:	8afa      	ldrh	r2, [r7, #22]
 800797e:	8abb      	ldrh	r3, [r7, #20]
 8007980:	429a      	cmp	r2, r3
 8007982:	d3ef      	bcc.n	8007964 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
  }
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	881a      	ldrh	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4413      	add	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80079be:	68fb      	ldr	r3, [r7, #12]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80079da:	2301      	movs	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	789b      	ldrb	r3, [r3, #2]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d002      	beq.n	80079ec <USBH_CtlReq+0x20>
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d00f      	beq.n	8007a0a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80079ea:	e034      	b.n	8007a56 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	88fa      	ldrh	r2, [r7, #6]
 80079f6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2202      	movs	r2, #2
 8007a02:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
    break;
 8007a08:	e025      	b.n	8007a56 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f828 	bl	8007a60 <USBH_HandleControl>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d108      	bne.n	8007a2c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
    break;
 8007a2a:	e013      	b.n	8007a54 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d108      	bne.n	8007a44 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	75fb      	strb	r3, [r7, #23]
    break;
 8007a42:	e007      	b.n	8007a54 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d104      	bne.n	8007a54 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007a50:	2302      	movs	r3, #2
 8007a52:	75fb      	strb	r3, [r7, #23]
    break;
 8007a54:	bf00      	nop
  }
  return status;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7e1b      	ldrb	r3, [r3, #24]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	2b0a      	cmp	r3, #10
 8007a78:	f200 814c 	bhi.w	8007d14 <USBH_HandleControl+0x2b4>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <USBH_HandleControl+0x24>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007acb 	.word	0x08007acb
 8007a8c:	08007b35 	.word	0x08007b35
 8007a90:	08007b5b 	.word	0x08007b5b
 8007a94:	08007b93 	.word	0x08007b93
 8007a98:	08007bbf 	.word	0x08007bbf
 8007a9c:	08007c11 	.word	0x08007c11
 8007aa0:	08007c33 	.word	0x08007c33
 8007aa4:	08007c6f 	.word	0x08007c6f
 8007aa8:	08007c97 	.word	0x08007c97
 8007aac:	08007cd5 	.word	0x08007cd5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f103 0110 	add.w	r1, r3, #16
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f939 	bl	8007d34 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	761a      	strb	r2, [r3, #24]
    break;
 8007ac8:	e12f      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fcb3 	bl	800843c <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d11e      	bne.n	8007b1e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7c1b      	ldrb	r3, [r3, #16]
 8007ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ae8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8adb      	ldrh	r3, [r3, #22]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007af2:	7b7b      	ldrb	r3, [r7, #13]
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d103      	bne.n	8007b00 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2203      	movs	r2, #3
 8007afc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007afe:	e10b      	b.n	8007d18 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2205      	movs	r2, #5
 8007b04:	761a      	strb	r2, [r3, #24]
    break;
 8007b06:	e107      	b.n	8007d18 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007b08:	7b7b      	ldrb	r3, [r7, #13]
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d103      	bne.n	8007b16 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2209      	movs	r2, #9
 8007b12:	761a      	strb	r2, [r3, #24]
    break;
 8007b14:	e100      	b.n	8007d18 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2207      	movs	r2, #7
 8007b1a:	761a      	strb	r2, [r3, #24]
    break;
 8007b1c:	e0fc      	b.n	8007d18 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d003      	beq.n	8007b2c <USBH_HandleControl+0xcc>
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f040 80f6 	bne.w	8007d18 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	220b      	movs	r2, #11
 8007b30:	761a      	strb	r2, [r3, #24]
    break;
 8007b32:	e0f1      	b.n	8007d18 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6899      	ldr	r1, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	899a      	ldrh	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f930 	bl	8007db2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	761a      	strb	r2, [r3, #24]
    break;
 8007b58:	e0e7      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	791b      	ldrb	r3, [r3, #4]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc6b 	bl	800843c <USBH_LL_GetURBState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d102      	bne.n	8007b76 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2209      	movs	r2, #9
 8007b74:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d102      	bne.n	8007b82 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b80:	e0cc      	b.n	8007d1c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	f040 80c9 	bne.w	8007d1c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220b      	movs	r2, #11
 8007b8e:	761a      	strb	r2, [r3, #24]
    break;
 8007b90:	e0c4      	b.n	8007d1c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6899      	ldr	r1, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	899a      	ldrh	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7958      	ldrb	r0, [r3, #5]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f8df 	bl	8007d68 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2206      	movs	r2, #6
 8007bba:	761a      	strb	r2, [r3, #24]
    break;
 8007bbc:	e0b5      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	795b      	ldrb	r3, [r3, #5]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fc39 	bl	800843c <USBH_LL_GetURBState>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2207      	movs	r2, #7
 8007bd8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bda:	e0a1      	b.n	8007d20 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	d105      	bne.n	8007bee <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	220c      	movs	r2, #12
 8007be6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007be8:	2303      	movs	r3, #3
 8007bea:	73fb      	strb	r3, [r7, #15]
    break;
 8007bec:	e098      	b.n	8007d20 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d103      	bne.n	8007bfc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2205      	movs	r2, #5
 8007bf8:	761a      	strb	r2, [r3, #24]
    break;
 8007bfa:	e091      	b.n	8007d20 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	f040 808e 	bne.w	8007d20 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	220b      	movs	r2, #11
 8007c08:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0e:	e087      	b.n	8007d20 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	791b      	ldrb	r3, [r3, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8ca 	bl	8007db2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	761a      	strb	r2, [r3, #24]

    break;
 8007c30:	e07b      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fbff 	bl	800843c <USBH_LL_GetURBState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d105      	bne.n	8007c54 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220d      	movs	r2, #13
 8007c4c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c52:	e067      	b.n	8007d24 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d103      	bne.n	8007c62 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	220b      	movs	r2, #11
 8007c5e:	761a      	strb	r2, [r3, #24]
    break;
 8007c60:	e060      	b.n	8007d24 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d15d      	bne.n	8007d24 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6c:	e05a      	b.n	8007d24 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	795a      	ldrb	r2, [r3, #5]
 8007c72:	2301      	movs	r3, #1
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f873 	bl	8007d68 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220a      	movs	r2, #10
 8007c92:	761a      	strb	r2, [r3, #24]
    break;
 8007c94:	e049      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fbcd 	bl	800843c <USBH_LL_GetURBState>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d105      	bne.n	8007cb8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	220d      	movs	r2, #13
 8007cb4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007cb6:	e037      	b.n	8007d28 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d103      	bne.n	8007cc6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2209      	movs	r2, #9
 8007cc2:	761a      	strb	r2, [r3, #24]
    break;
 8007cc4:	e030      	b.n	8007d28 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d12d      	bne.n	8007d28 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220b      	movs	r2, #11
 8007cd0:	761a      	strb	r2, [r3, #24]
    break;
 8007cd2:	e029      	b.n	8007d28 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7e5b      	ldrb	r3, [r3, #25]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	765a      	strb	r2, [r3, #25]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7e5b      	ldrb	r3, [r3, #25]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d809      	bhi.n	8007cfc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 faba 	bl	8008262 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007cfa:	e016      	b.n	8007d2a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d02:	2106      	movs	r1, #6
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	73fb      	strb	r3, [r7, #15]
    break;
 8007d12:	e00a      	b.n	8007d2a <USBH_HandleControl+0x2ca>

  default:
    break;
 8007d14:	bf00      	nop
 8007d16:	e008      	b.n	8007d2a <USBH_HandleControl+0x2ca>
    break;
 8007d18:	bf00      	nop
 8007d1a:	e006      	b.n	8007d2a <USBH_HandleControl+0x2ca>
    break;
 8007d1c:	bf00      	nop
 8007d1e:	e004      	b.n	8007d2a <USBH_HandleControl+0x2ca>
    break;
 8007d20:	bf00      	nop
 8007d22:	e002      	b.n	8007d2a <USBH_HandleControl+0x2ca>
    break;
 8007d24:	bf00      	nop
 8007d26:	e000      	b.n	8007d2a <USBH_HandleControl+0x2ca>
    break;
 8007d28:	bf00      	nop
  }
  return status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d42:	79f9      	ldrb	r1, [r7, #7]
 8007d44:	2300      	movs	r3, #0
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	2308      	movs	r3, #8
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	2300      	movs	r3, #0
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	2200      	movs	r2, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fb3e 	bl	80083da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af04      	add	r7, sp, #16
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4611      	mov	r1, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	460b      	mov	r3, r1
 8007d78:	80fb      	strh	r3, [r7, #6]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d8c:	7979      	ldrb	r1, [r7, #5]
 8007d8e:	7e3b      	ldrb	r3, [r7, #24]
 8007d90:	9303      	str	r3, [sp, #12]
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2200      	movs	r2, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fb19 	bl	80083da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af04      	add	r7, sp, #16
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007dc8:	7979      	ldrb	r1, [r7, #5]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2201      	movs	r2, #1
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fafb 	bl	80083da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007de4:	2300      	movs	r3, #0

}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b088      	sub	sp, #32
 8007df2:	af04      	add	r7, sp, #16
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	80fb      	strh	r3, [r7, #6]
 8007e00:	4613      	mov	r3, r2
 8007e02:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e12:	7979      	ldrb	r1, [r7, #5]
 8007e14:	7e3b      	ldrb	r3, [r7, #24]
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	2301      	movs	r3, #1
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2302      	movs	r3, #2
 8007e26:	2200      	movs	r2, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fad6 	bl	80083da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af04      	add	r7, sp, #16
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	460b      	mov	r3, r1
 8007e48:	80fb      	strh	r3, [r7, #6]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e4e:	7979      	ldrb	r1, [r7, #5]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2302      	movs	r3, #2
 8007e62:	2201      	movs	r2, #1
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fab8 	bl	80083da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af04      	add	r7, sp, #16
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	70fb      	strb	r3, [r7, #3]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70bb      	strb	r3, [r7, #2]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007e8e:	7878      	ldrb	r0, [r7, #1]
 8007e90:	78ba      	ldrb	r2, [r7, #2]
 8007e92:	78f9      	ldrb	r1, [r7, #3]
 8007e94:	8b3b      	ldrh	r3, [r7, #24]
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	7d3b      	ldrb	r3, [r7, #20]
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	7c3b      	ldrb	r3, [r7, #16]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa4b 	bl	800833e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007ea8:	2300      	movs	r3, #0

}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa6a 	bl	800839c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ec8:	2300      	movs	r3, #0

}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f831 	bl	8007f46 <USBH_GetFreePipe>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ee8:	89fb      	ldrh	r3, [r7, #14]
 8007eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	89fa      	ldrh	r2, [r7, #14]
 8007ef6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32e0      	adds	r2, #224	; 0xe0
 8007efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007f02:	89fb      	ldrh	r3, [r7, #14]
 8007f04:	b2db      	uxtb	r3, r3
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	2b0a      	cmp	r3, #10
 8007f1e:	d80b      	bhi.n	8007f38 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32e0      	adds	r2, #224	; 0xe0
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	32e0      	adds	r2, #224	; 0xe0
 8007f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e00e      	b.n	8007f76 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32e0      	adds	r2, #224	; 0xe0
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	e007      	b.n	8007f80 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	3301      	adds	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b0a      	cmp	r3, #10
 8007f7a:	d9ed      	bls.n	8007f58 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f90:	2201      	movs	r2, #1
 8007f92:	490e      	ldr	r1, [pc, #56]	; (8007fcc <MX_USB_HOST_Init+0x40>)
 8007f94:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <MX_USB_HOST_Init+0x44>)
 8007f96:	f7fe fdbb 	bl	8006b10 <USBH_Init>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007fa0:	f7f8 ff6c 	bl	8000e7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007fa4:	490b      	ldr	r1, [pc, #44]	; (8007fd4 <MX_USB_HOST_Init+0x48>)
 8007fa6:	480a      	ldr	r0, [pc, #40]	; (8007fd0 <MX_USB_HOST_Init+0x44>)
 8007fa8:	f7fe fe25 	bl	8006bf6 <USBH_RegisterClass>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007fb2:	f7f8 ff63 	bl	8000e7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007fb6:	4806      	ldr	r0, [pc, #24]	; (8007fd0 <MX_USB_HOST_Init+0x44>)
 8007fb8:	f7fe feaa 	bl	8006d10 <USBH_Start>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007fc2:	f7f8 ff5b 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	20000410 	.word	0x20000410
 8007fd4:	2000001c 	.word	0x2000001c

08007fd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007fdc:	4802      	ldr	r0, [pc, #8]	; (8007fe8 <MX_USB_HOST_Process+0x10>)
 8007fde:	f7fe fea7 	bl	8006d30 <USBH_Process>
}
 8007fe2:	bf00      	nop
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000410 	.word	0x20000410

08007fec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d819      	bhi.n	8008034 <USBH_UserProcess+0x48>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <USBH_UserProcess+0x1c>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	08008035 	.word	0x08008035
 800800c:	08008025 	.word	0x08008025
 8008010:	08008035 	.word	0x08008035
 8008014:	0800802d 	.word	0x0800802d
 8008018:	0800801d 	.word	0x0800801d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <USBH_UserProcess+0x58>)
 800801e:	2203      	movs	r2, #3
 8008020:	701a      	strb	r2, [r3, #0]
  break;
 8008022:	e008      	b.n	8008036 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <USBH_UserProcess+0x58>)
 8008026:	2202      	movs	r2, #2
 8008028:	701a      	strb	r2, [r3, #0]
  break;
 800802a:	e004      	b.n	8008036 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <USBH_UserProcess+0x58>)
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
  break;
 8008032:	e000      	b.n	8008036 <USBH_UserProcess+0x4a>

  default:
  break;
 8008034:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20000230 	.word	0x20000230

08008048 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08a      	sub	sp, #40	; 0x28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	60da      	str	r2, [r3, #12]
 800805e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008068:	d147      	bne.n	80080fa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800806a:	2300      	movs	r3, #0
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	4b25      	ldr	r3, [pc, #148]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	4a24      	ldr	r2, [pc, #144]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	6313      	str	r3, [r2, #48]	; 0x30
 800807a:	4b22      	ldr	r3, [pc, #136]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 800807c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800808a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008090:	2300      	movs	r3, #0
 8008092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	4619      	mov	r1, r3
 800809a:	481b      	ldr	r0, [pc, #108]	; (8008108 <HAL_HCD_MspInit+0xc0>)
 800809c:	f7f9 fad2 	bl	8001644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80080a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a6:	2302      	movs	r3, #2
 80080a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ae:	2300      	movs	r3, #0
 80080b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080b2:	230a      	movs	r3, #10
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b6:	f107 0314 	add.w	r3, r7, #20
 80080ba:	4619      	mov	r1, r3
 80080bc:	4812      	ldr	r0, [pc, #72]	; (8008108 <HAL_HCD_MspInit+0xc0>)
 80080be:	f7f9 fac1 	bl	8001644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080c2:	4b10      	ldr	r3, [pc, #64]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	4a0f      	ldr	r2, [pc, #60]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	6353      	str	r3, [r2, #52]	; 0x34
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	4a0b      	ldr	r2, [pc, #44]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 80080d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080dc:	6453      	str	r3, [r2, #68]	; 0x44
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_HCD_MspInit+0xbc>)
 80080e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	2043      	movs	r0, #67	; 0x43
 80080f0:	f7f9 fa71 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080f4:	2043      	movs	r0, #67	; 0x43
 80080f6:	f7f9 fa8a 	bl	800160e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080fa:	bf00      	nop
 80080fc:	3728      	adds	r7, #40	; 0x28
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800
 8008108:	40020000 	.word	0x40020000

0800810c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff f8b9 	bl	8007292 <USBH_LL_IncTimer>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff f8fe 	bl	8007338 <USBH_LL_Connect>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f916 	bl	8007384 <USBH_LL_Disconnect>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
 800816c:	4613      	mov	r3, r2
 800816e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff f8ab 	bl	80072e6 <USBH_LL_PortEnabled>
} 
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff f8ab 	bl	8007302 <USBH_LL_PortDisabled>
} 
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d12a      	bne.n	800821c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80081c6:	4a18      	ldr	r2, [pc, #96]	; (8008228 <USBH_LL_Init+0x74>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a15      	ldr	r2, [pc, #84]	; (8008228 <USBH_LL_Init+0x74>)
 80081d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <USBH_LL_Init+0x74>)
 80081d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081dc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <USBH_LL_Init+0x74>)
 80081e0:	2208      	movs	r2, #8
 80081e2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <USBH_LL_Init+0x74>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <USBH_LL_Init+0x74>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <USBH_LL_Init+0x74>)
 80081f2:	2202      	movs	r2, #2
 80081f4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <USBH_LL_Init+0x74>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80081fc:	480a      	ldr	r0, [pc, #40]	; (8008228 <USBH_LL_Init+0x74>)
 80081fe:	f7f9 fbd4 	bl	80019aa <HAL_HCD_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008208:	f7f8 fe38 	bl	8000e7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800820c:	4806      	ldr	r0, [pc, #24]	; (8008228 <USBH_LL_Init+0x74>)
 800820e:	f7f9 ffcf 	bl	80021b0 <HAL_HCD_GetCurrentFrame>
 8008212:	4603      	mov	r3, r0
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff f82c 	bl	8007274 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200007dc 	.word	0x200007dc

0800822c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008242:	4618      	mov	r0, r3
 8008244:	f7f9 ff3c 	bl	80020c0 <HAL_HCD_Start>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f95c 	bl	800850c <USBH_Get_USB_Status>
 8008254:	4603      	mov	r3, r0
 8008256:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008258:	7bbb      	ldrb	r3, [r7, #14]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008278:	4618      	mov	r0, r3
 800827a:	f7f9 ff44 	bl	8002106 <HAL_HCD_Stop>
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f941 	bl	800850c <USBH_Get_USB_Status>
 800828a:	4603      	mov	r3, r0
 800828c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800828e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f9 ff8e 	bl	80021cc <HAL_HCD_GetCurrentSpeed>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d007      	beq.n	80082c6 <USBH_LL_GetSpeed+0x2e>
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d302      	bcc.n	80082c0 <USBH_LL_GetSpeed+0x28>
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d006      	beq.n	80082cc <USBH_LL_GetSpeed+0x34>
 80082be:	e008      	b.n	80082d2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	e008      	b.n	80082d8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ca:	e005      	b.n	80082d8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80082cc:	2302      	movs	r3, #2
 80082ce:	73fb      	strb	r3, [r7, #15]
    break;
 80082d0:	e002      	b.n	80082d8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
    break;
 80082d6:	bf00      	nop
  }
  return  speed;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f9 ff21 	bl	8002140 <HAL_HCD_ResetPort>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f901 	bl	800850c <USBH_Get_USB_Status>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7f9 ff29 	bl	8002186 <HAL_HCD_HC_GetXferCount>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800833e:	b590      	push	{r4, r7, lr}
 8008340:	b089      	sub	sp, #36	; 0x24
 8008342:	af04      	add	r7, sp, #16
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	4608      	mov	r0, r1
 8008348:	4611      	mov	r1, r2
 800834a:	461a      	mov	r2, r3
 800834c:	4603      	mov	r3, r0
 800834e:	70fb      	strb	r3, [r7, #3]
 8008350:	460b      	mov	r3, r1
 8008352:	70bb      	strb	r3, [r7, #2]
 8008354:	4613      	mov	r3, r2
 8008356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008366:	787c      	ldrb	r4, [r7, #1]
 8008368:	78ba      	ldrb	r2, [r7, #2]
 800836a:	78f9      	ldrb	r1, [r7, #3]
 800836c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4623      	mov	r3, r4
 800837e:	f7f9 fb76 	bl	8001a6e <HAL_HCD_HC_Init>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f8bf 	bl	800850c <USBH_Get_USB_Status>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008392:	7bbb      	ldrb	r3, [r7, #14]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}

0800839c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083b6:	78fa      	ldrb	r2, [r7, #3]
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7f9 fbef 	bl	8001b9e <HAL_HCD_HC_Halt>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f8a0 	bl	800850c <USBH_Get_USB_Status>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80083da:	b590      	push	{r4, r7, lr}
 80083dc:	b089      	sub	sp, #36	; 0x24
 80083de:	af04      	add	r7, sp, #16
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	461a      	mov	r2, r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	70fb      	strb	r3, [r7, #3]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70bb      	strb	r3, [r7, #2]
 80083f0:	4613      	mov	r3, r2
 80083f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008402:	787c      	ldrb	r4, [r7, #1]
 8008404:	78ba      	ldrb	r2, [r7, #2]
 8008406:	78f9      	ldrb	r1, [r7, #3]
 8008408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	f897 3020 	ldrb.w	r3, [r7, #32]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4623      	mov	r3, r4
 800841e:	f7f9 fbe1 	bl	8001be4 <HAL_HCD_HC_SubmitRequest>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f86f 	bl	800850c <USBH_Get_USB_Status>
 800842e:	4603      	mov	r3, r0
 8008430:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008432:	7bbb      	ldrb	r3, [r7, #14]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	bd90      	pop	{r4, r7, pc}

0800843c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f7f9 fe82 	bl	800215c <HAL_HCD_HC_GetURBState>
 8008458:	4603      	mov	r3, r0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008474:	2b01      	cmp	r3, #1
 8008476:	d103      	bne.n	8008480 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f872 	bl	8008564 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008480:	20c8      	movs	r0, #200	; 0xc8
 8008482:	f7f8 ffab 	bl	80013dc <HAL_Delay>
  return USBH_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	4613      	mov	r3, r2
 800849e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	440b      	add	r3, r1
 80084b6:	333b      	adds	r3, #59	; 0x3b
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	68f9      	ldr	r1, [r7, #12]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	440b      	add	r3, r1
 80084cc:	3350      	adds	r3, #80	; 0x50
 80084ce:	78ba      	ldrb	r2, [r7, #2]
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e009      	b.n	80084e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	440b      	add	r3, r1
 80084e2:	3351      	adds	r3, #81	; 0x51
 80084e4:	78ba      	ldrb	r2, [r7, #2]
 80084e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7f8 ff6c 	bl	80013dc <HAL_Delay>
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d817      	bhi.n	8008550 <USBH_Get_USB_Status+0x44>
 8008520:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <USBH_Get_USB_Status+0x1c>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008539 	.word	0x08008539
 800852c:	0800853f 	.word	0x0800853f
 8008530:	08008545 	.word	0x08008545
 8008534:	0800854b 	.word	0x0800854b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
    break;
 800853c:	e00b      	b.n	8008556 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800853e:	2302      	movs	r3, #2
 8008540:	73fb      	strb	r3, [r7, #15]
    break;
 8008542:	e008      	b.n	8008556 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
    break;
 8008548:	e005      	b.n	8008556 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800854a:	2302      	movs	r3, #2
 800854c:	73fb      	strb	r3, [r7, #15]
    break;
 800854e:	e002      	b.n	8008556 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008550:	2302      	movs	r3, #2
 8008552:	73fb      	strb	r3, [r7, #15]
    break;
 8008554:	bf00      	nop
  }
  return usb_status;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	e001      	b.n	8008582 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	461a      	mov	r2, r3
 8008586:	2101      	movs	r1, #1
 8008588:	4803      	ldr	r0, [pc, #12]	; (8008598 <MX_DriverVbusFS+0x34>)
 800858a:	f7f9 f9f5 	bl	8001978 <HAL_GPIO_WritePin>
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40020800 	.word	0x40020800

0800859c <__errno>:
 800859c:	4b01      	ldr	r3, [pc, #4]	; (80085a4 <__errno+0x8>)
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	2000003c 	.word	0x2000003c

080085a8 <__libc_init_array>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4e0d      	ldr	r6, [pc, #52]	; (80085e0 <__libc_init_array+0x38>)
 80085ac:	4c0d      	ldr	r4, [pc, #52]	; (80085e4 <__libc_init_array+0x3c>)
 80085ae:	1ba4      	subs	r4, r4, r6
 80085b0:	10a4      	asrs	r4, r4, #2
 80085b2:	2500      	movs	r5, #0
 80085b4:	42a5      	cmp	r5, r4
 80085b6:	d109      	bne.n	80085cc <__libc_init_array+0x24>
 80085b8:	4e0b      	ldr	r6, [pc, #44]	; (80085e8 <__libc_init_array+0x40>)
 80085ba:	4c0c      	ldr	r4, [pc, #48]	; (80085ec <__libc_init_array+0x44>)
 80085bc:	f001 f91c 	bl	80097f8 <_init>
 80085c0:	1ba4      	subs	r4, r4, r6
 80085c2:	10a4      	asrs	r4, r4, #2
 80085c4:	2500      	movs	r5, #0
 80085c6:	42a5      	cmp	r5, r4
 80085c8:	d105      	bne.n	80085d6 <__libc_init_array+0x2e>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085d0:	4798      	blx	r3
 80085d2:	3501      	adds	r5, #1
 80085d4:	e7ee      	b.n	80085b4 <__libc_init_array+0xc>
 80085d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085da:	4798      	blx	r3
 80085dc:	3501      	adds	r5, #1
 80085de:	e7f2      	b.n	80085c6 <__libc_init_array+0x1e>
 80085e0:	08009a0c 	.word	0x08009a0c
 80085e4:	08009a0c 	.word	0x08009a0c
 80085e8:	08009a0c 	.word	0x08009a0c
 80085ec:	08009a10 	.word	0x08009a10

080085f0 <malloc>:
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <malloc+0xc>)
 80085f2:	4601      	mov	r1, r0
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	f000 b861 	b.w	80086bc <_malloc_r>
 80085fa:	bf00      	nop
 80085fc:	2000003c 	.word	0x2000003c

08008600 <free>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <free+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f000 b80b 	b.w	8008620 <_free_r>
 800860a:	bf00      	nop
 800860c:	2000003c 	.word	0x2000003c

08008610 <memset>:
 8008610:	4402      	add	r2, r0
 8008612:	4603      	mov	r3, r0
 8008614:	4293      	cmp	r3, r2
 8008616:	d100      	bne.n	800861a <memset+0xa>
 8008618:	4770      	bx	lr
 800861a:	f803 1b01 	strb.w	r1, [r3], #1
 800861e:	e7f9      	b.n	8008614 <memset+0x4>

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d045      	beq.n	80086b4 <_free_r+0x94>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f8f8 	bl	8008828 <__malloc_lock>
 8008638:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <_free_r+0x98>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	4610      	mov	r0, r2
 800863e:	b933      	cbnz	r3, 800864e <_free_r+0x2e>
 8008640:	6063      	str	r3, [r4, #4]
 8008642:	6014      	str	r4, [r2, #0]
 8008644:	4628      	mov	r0, r5
 8008646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800864a:	f000 b8ee 	b.w	800882a <__malloc_unlock>
 800864e:	42a3      	cmp	r3, r4
 8008650:	d90c      	bls.n	800866c <_free_r+0x4c>
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	1862      	adds	r2, r4, r1
 8008656:	4293      	cmp	r3, r2
 8008658:	bf04      	itt	eq
 800865a:	681a      	ldreq	r2, [r3, #0]
 800865c:	685b      	ldreq	r3, [r3, #4]
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	bf04      	itt	eq
 8008662:	1852      	addeq	r2, r2, r1
 8008664:	6022      	streq	r2, [r4, #0]
 8008666:	6004      	str	r4, [r0, #0]
 8008668:	e7ec      	b.n	8008644 <_free_r+0x24>
 800866a:	4613      	mov	r3, r2
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	b10a      	cbz	r2, 8008674 <_free_r+0x54>
 8008670:	42a2      	cmp	r2, r4
 8008672:	d9fa      	bls.n	800866a <_free_r+0x4a>
 8008674:	6819      	ldr	r1, [r3, #0]
 8008676:	1858      	adds	r0, r3, r1
 8008678:	42a0      	cmp	r0, r4
 800867a:	d10b      	bne.n	8008694 <_free_r+0x74>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	4401      	add	r1, r0
 8008680:	1858      	adds	r0, r3, r1
 8008682:	4282      	cmp	r2, r0
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	d1dd      	bne.n	8008644 <_free_r+0x24>
 8008688:	6810      	ldr	r0, [r2, #0]
 800868a:	6852      	ldr	r2, [r2, #4]
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	4401      	add	r1, r0
 8008690:	6019      	str	r1, [r3, #0]
 8008692:	e7d7      	b.n	8008644 <_free_r+0x24>
 8008694:	d902      	bls.n	800869c <_free_r+0x7c>
 8008696:	230c      	movs	r3, #12
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	e7d3      	b.n	8008644 <_free_r+0x24>
 800869c:	6820      	ldr	r0, [r4, #0]
 800869e:	1821      	adds	r1, r4, r0
 80086a0:	428a      	cmp	r2, r1
 80086a2:	bf04      	itt	eq
 80086a4:	6811      	ldreq	r1, [r2, #0]
 80086a6:	6852      	ldreq	r2, [r2, #4]
 80086a8:	6062      	str	r2, [r4, #4]
 80086aa:	bf04      	itt	eq
 80086ac:	1809      	addeq	r1, r1, r0
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	605c      	str	r4, [r3, #4]
 80086b2:	e7c7      	b.n	8008644 <_free_r+0x24>
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	bf00      	nop
 80086b8:	20000234 	.word	0x20000234

080086bc <_malloc_r>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	1ccd      	adds	r5, r1, #3
 80086c0:	f025 0503 	bic.w	r5, r5, #3
 80086c4:	3508      	adds	r5, #8
 80086c6:	2d0c      	cmp	r5, #12
 80086c8:	bf38      	it	cc
 80086ca:	250c      	movcc	r5, #12
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	4606      	mov	r6, r0
 80086d0:	db01      	blt.n	80086d6 <_malloc_r+0x1a>
 80086d2:	42a9      	cmp	r1, r5
 80086d4:	d903      	bls.n	80086de <_malloc_r+0x22>
 80086d6:	230c      	movs	r3, #12
 80086d8:	6033      	str	r3, [r6, #0]
 80086da:	2000      	movs	r0, #0
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	f000 f8a3 	bl	8008828 <__malloc_lock>
 80086e2:	4a21      	ldr	r2, [pc, #132]	; (8008768 <_malloc_r+0xac>)
 80086e4:	6814      	ldr	r4, [r2, #0]
 80086e6:	4621      	mov	r1, r4
 80086e8:	b991      	cbnz	r1, 8008710 <_malloc_r+0x54>
 80086ea:	4c20      	ldr	r4, [pc, #128]	; (800876c <_malloc_r+0xb0>)
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	b91b      	cbnz	r3, 80086f8 <_malloc_r+0x3c>
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 f83d 	bl	8008770 <_sbrk_r>
 80086f6:	6020      	str	r0, [r4, #0]
 80086f8:	4629      	mov	r1, r5
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f838 	bl	8008770 <_sbrk_r>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d124      	bne.n	800874e <_malloc_r+0x92>
 8008704:	230c      	movs	r3, #12
 8008706:	6033      	str	r3, [r6, #0]
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f88e 	bl	800882a <__malloc_unlock>
 800870e:	e7e4      	b.n	80086da <_malloc_r+0x1e>
 8008710:	680b      	ldr	r3, [r1, #0]
 8008712:	1b5b      	subs	r3, r3, r5
 8008714:	d418      	bmi.n	8008748 <_malloc_r+0x8c>
 8008716:	2b0b      	cmp	r3, #11
 8008718:	d90f      	bls.n	800873a <_malloc_r+0x7e>
 800871a:	600b      	str	r3, [r1, #0]
 800871c:	50cd      	str	r5, [r1, r3]
 800871e:	18cc      	adds	r4, r1, r3
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f882 	bl	800882a <__malloc_unlock>
 8008726:	f104 000b 	add.w	r0, r4, #11
 800872a:	1d23      	adds	r3, r4, #4
 800872c:	f020 0007 	bic.w	r0, r0, #7
 8008730:	1ac3      	subs	r3, r0, r3
 8008732:	d0d3      	beq.n	80086dc <_malloc_r+0x20>
 8008734:	425a      	negs	r2, r3
 8008736:	50e2      	str	r2, [r4, r3]
 8008738:	e7d0      	b.n	80086dc <_malloc_r+0x20>
 800873a:	428c      	cmp	r4, r1
 800873c:	684b      	ldr	r3, [r1, #4]
 800873e:	bf16      	itet	ne
 8008740:	6063      	strne	r3, [r4, #4]
 8008742:	6013      	streq	r3, [r2, #0]
 8008744:	460c      	movne	r4, r1
 8008746:	e7eb      	b.n	8008720 <_malloc_r+0x64>
 8008748:	460c      	mov	r4, r1
 800874a:	6849      	ldr	r1, [r1, #4]
 800874c:	e7cc      	b.n	80086e8 <_malloc_r+0x2c>
 800874e:	1cc4      	adds	r4, r0, #3
 8008750:	f024 0403 	bic.w	r4, r4, #3
 8008754:	42a0      	cmp	r0, r4
 8008756:	d005      	beq.n	8008764 <_malloc_r+0xa8>
 8008758:	1a21      	subs	r1, r4, r0
 800875a:	4630      	mov	r0, r6
 800875c:	f000 f808 	bl	8008770 <_sbrk_r>
 8008760:	3001      	adds	r0, #1
 8008762:	d0cf      	beq.n	8008704 <_malloc_r+0x48>
 8008764:	6025      	str	r5, [r4, #0]
 8008766:	e7db      	b.n	8008720 <_malloc_r+0x64>
 8008768:	20000234 	.word	0x20000234
 800876c:	20000238 	.word	0x20000238

08008770 <_sbrk_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4c06      	ldr	r4, [pc, #24]	; (800878c <_sbrk_r+0x1c>)
 8008774:	2300      	movs	r3, #0
 8008776:	4605      	mov	r5, r0
 8008778:	4608      	mov	r0, r1
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	f7f8 fd50 	bl	8001220 <_sbrk>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_sbrk_r+0x1a>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	b103      	cbz	r3, 800878a <_sbrk_r+0x1a>
 8008788:	602b      	str	r3, [r5, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20000aa0 	.word	0x20000aa0

08008790 <siprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	b500      	push	{lr}
 8008794:	b09c      	sub	sp, #112	; 0x70
 8008796:	ab1d      	add	r3, sp, #116	; 0x74
 8008798:	9002      	str	r0, [sp, #8]
 800879a:	9006      	str	r0, [sp, #24]
 800879c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087a0:	4809      	ldr	r0, [pc, #36]	; (80087c8 <siprintf+0x38>)
 80087a2:	9107      	str	r1, [sp, #28]
 80087a4:	9104      	str	r1, [sp, #16]
 80087a6:	4909      	ldr	r1, [pc, #36]	; (80087cc <siprintf+0x3c>)
 80087a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	6800      	ldr	r0, [r0, #0]
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	a902      	add	r1, sp, #8
 80087b4:	f000 f894 	bl	80088e0 <_svfiprintf_r>
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	b01c      	add	sp, #112	; 0x70
 80087c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c4:	b003      	add	sp, #12
 80087c6:	4770      	bx	lr
 80087c8:	2000003c 	.word	0x2000003c
 80087cc:	ffff0208 	.word	0xffff0208

080087d0 <siscanf>:
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b530      	push	{r4, r5, lr}
 80087d4:	b09c      	sub	sp, #112	; 0x70
 80087d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80087d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80087dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80087e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80087e4:	9002      	str	r0, [sp, #8]
 80087e6:	9006      	str	r0, [sp, #24]
 80087e8:	f7f7 fcf2 	bl	80001d0 <strlen>
 80087ec:	4b0b      	ldr	r3, [pc, #44]	; (800881c <siscanf+0x4c>)
 80087ee:	9003      	str	r0, [sp, #12]
 80087f0:	9007      	str	r0, [sp, #28]
 80087f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f4:	480a      	ldr	r0, [pc, #40]	; (8008820 <siscanf+0x50>)
 80087f6:	9401      	str	r4, [sp, #4]
 80087f8:	2300      	movs	r3, #0
 80087fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80087fc:	9314      	str	r3, [sp, #80]	; 0x50
 80087fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008802:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008806:	462a      	mov	r2, r5
 8008808:	4623      	mov	r3, r4
 800880a:	a902      	add	r1, sp, #8
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f000 f9b9 	bl	8008b84 <__ssvfiscanf_r>
 8008812:	b01c      	add	sp, #112	; 0x70
 8008814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008818:	b003      	add	sp, #12
 800881a:	4770      	bx	lr
 800881c:	08008825 	.word	0x08008825
 8008820:	2000003c 	.word	0x2000003c

08008824 <__seofread>:
 8008824:	2000      	movs	r0, #0
 8008826:	4770      	bx	lr

08008828 <__malloc_lock>:
 8008828:	4770      	bx	lr

0800882a <__malloc_unlock>:
 800882a:	4770      	bx	lr

0800882c <__ssputs_r>:
 800882c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	688e      	ldr	r6, [r1, #8]
 8008832:	429e      	cmp	r6, r3
 8008834:	4682      	mov	sl, r0
 8008836:	460c      	mov	r4, r1
 8008838:	4690      	mov	r8, r2
 800883a:	4699      	mov	r9, r3
 800883c:	d837      	bhi.n	80088ae <__ssputs_r+0x82>
 800883e:	898a      	ldrh	r2, [r1, #12]
 8008840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008844:	d031      	beq.n	80088aa <__ssputs_r+0x7e>
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	6909      	ldr	r1, [r1, #16]
 800884a:	1a6f      	subs	r7, r5, r1
 800884c:	6965      	ldr	r5, [r4, #20]
 800884e:	2302      	movs	r3, #2
 8008850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008854:	fb95 f5f3 	sdiv	r5, r5, r3
 8008858:	f109 0301 	add.w	r3, r9, #1
 800885c:	443b      	add	r3, r7
 800885e:	429d      	cmp	r5, r3
 8008860:	bf38      	it	cc
 8008862:	461d      	movcc	r5, r3
 8008864:	0553      	lsls	r3, r2, #21
 8008866:	d530      	bpl.n	80088ca <__ssputs_r+0x9e>
 8008868:	4629      	mov	r1, r5
 800886a:	f7ff ff27 	bl	80086bc <_malloc_r>
 800886e:	4606      	mov	r6, r0
 8008870:	b950      	cbnz	r0, 8008888 <__ssputs_r+0x5c>
 8008872:	230c      	movs	r3, #12
 8008874:	f8ca 3000 	str.w	r3, [sl]
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008888:	463a      	mov	r2, r7
 800888a:	6921      	ldr	r1, [r4, #16]
 800888c:	f000 ff54 	bl	8009738 <memcpy>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889a:	81a3      	strh	r3, [r4, #12]
 800889c:	6126      	str	r6, [r4, #16]
 800889e:	6165      	str	r5, [r4, #20]
 80088a0:	443e      	add	r6, r7
 80088a2:	1bed      	subs	r5, r5, r7
 80088a4:	6026      	str	r6, [r4, #0]
 80088a6:	60a5      	str	r5, [r4, #8]
 80088a8:	464e      	mov	r6, r9
 80088aa:	454e      	cmp	r6, r9
 80088ac:	d900      	bls.n	80088b0 <__ssputs_r+0x84>
 80088ae:	464e      	mov	r6, r9
 80088b0:	4632      	mov	r2, r6
 80088b2:	4641      	mov	r1, r8
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	f000 ff4a 	bl	800974e <memmove>
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	1b9b      	subs	r3, r3, r6
 80088be:	60a3      	str	r3, [r4, #8]
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	441e      	add	r6, r3
 80088c4:	6026      	str	r6, [r4, #0]
 80088c6:	2000      	movs	r0, #0
 80088c8:	e7dc      	b.n	8008884 <__ssputs_r+0x58>
 80088ca:	462a      	mov	r2, r5
 80088cc:	f000 ff58 	bl	8009780 <_realloc_r>
 80088d0:	4606      	mov	r6, r0
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d1e2      	bne.n	800889c <__ssputs_r+0x70>
 80088d6:	6921      	ldr	r1, [r4, #16]
 80088d8:	4650      	mov	r0, sl
 80088da:	f7ff fea1 	bl	8008620 <_free_r>
 80088de:	e7c8      	b.n	8008872 <__ssputs_r+0x46>

080088e0 <_svfiprintf_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	461d      	mov	r5, r3
 80088e6:	898b      	ldrh	r3, [r1, #12]
 80088e8:	061f      	lsls	r7, r3, #24
 80088ea:	b09d      	sub	sp, #116	; 0x74
 80088ec:	4680      	mov	r8, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	4616      	mov	r6, r2
 80088f2:	d50f      	bpl.n	8008914 <_svfiprintf_r+0x34>
 80088f4:	690b      	ldr	r3, [r1, #16]
 80088f6:	b96b      	cbnz	r3, 8008914 <_svfiprintf_r+0x34>
 80088f8:	2140      	movs	r1, #64	; 0x40
 80088fa:	f7ff fedf 	bl	80086bc <_malloc_r>
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	6120      	str	r0, [r4, #16]
 8008902:	b928      	cbnz	r0, 8008910 <_svfiprintf_r+0x30>
 8008904:	230c      	movs	r3, #12
 8008906:	f8c8 3000 	str.w	r3, [r8]
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	e0c8      	b.n	8008aa2 <_svfiprintf_r+0x1c2>
 8008910:	2340      	movs	r3, #64	; 0x40
 8008912:	6163      	str	r3, [r4, #20]
 8008914:	2300      	movs	r3, #0
 8008916:	9309      	str	r3, [sp, #36]	; 0x24
 8008918:	2320      	movs	r3, #32
 800891a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800891e:	2330      	movs	r3, #48	; 0x30
 8008920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008924:	9503      	str	r5, [sp, #12]
 8008926:	f04f 0b01 	mov.w	fp, #1
 800892a:	4637      	mov	r7, r6
 800892c:	463d      	mov	r5, r7
 800892e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008932:	b10b      	cbz	r3, 8008938 <_svfiprintf_r+0x58>
 8008934:	2b25      	cmp	r3, #37	; 0x25
 8008936:	d13e      	bne.n	80089b6 <_svfiprintf_r+0xd6>
 8008938:	ebb7 0a06 	subs.w	sl, r7, r6
 800893c:	d00b      	beq.n	8008956 <_svfiprintf_r+0x76>
 800893e:	4653      	mov	r3, sl
 8008940:	4632      	mov	r2, r6
 8008942:	4621      	mov	r1, r4
 8008944:	4640      	mov	r0, r8
 8008946:	f7ff ff71 	bl	800882c <__ssputs_r>
 800894a:	3001      	adds	r0, #1
 800894c:	f000 80a4 	beq.w	8008a98 <_svfiprintf_r+0x1b8>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	4453      	add	r3, sl
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	783b      	ldrb	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 809d 	beq.w	8008a98 <_svfiprintf_r+0x1b8>
 800895e:	2300      	movs	r3, #0
 8008960:	f04f 32ff 	mov.w	r2, #4294967295
 8008964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	9307      	str	r3, [sp, #28]
 800896c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008970:	931a      	str	r3, [sp, #104]	; 0x68
 8008972:	462f      	mov	r7, r5
 8008974:	2205      	movs	r2, #5
 8008976:	f817 1b01 	ldrb.w	r1, [r7], #1
 800897a:	4850      	ldr	r0, [pc, #320]	; (8008abc <_svfiprintf_r+0x1dc>)
 800897c:	f7f7 fc30 	bl	80001e0 <memchr>
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	b9d0      	cbnz	r0, 80089ba <_svfiprintf_r+0xda>
 8008984:	06d9      	lsls	r1, r3, #27
 8008986:	bf44      	itt	mi
 8008988:	2220      	movmi	r2, #32
 800898a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800898e:	071a      	lsls	r2, r3, #28
 8008990:	bf44      	itt	mi
 8008992:	222b      	movmi	r2, #43	; 0x2b
 8008994:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008998:	782a      	ldrb	r2, [r5, #0]
 800899a:	2a2a      	cmp	r2, #42	; 0x2a
 800899c:	d015      	beq.n	80089ca <_svfiprintf_r+0xea>
 800899e:	9a07      	ldr	r2, [sp, #28]
 80089a0:	462f      	mov	r7, r5
 80089a2:	2000      	movs	r0, #0
 80089a4:	250a      	movs	r5, #10
 80089a6:	4639      	mov	r1, r7
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	; 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94d      	bls.n	8008a4e <_svfiprintf_r+0x16e>
 80089b2:	b1b8      	cbz	r0, 80089e4 <_svfiprintf_r+0x104>
 80089b4:	e00f      	b.n	80089d6 <_svfiprintf_r+0xf6>
 80089b6:	462f      	mov	r7, r5
 80089b8:	e7b8      	b.n	800892c <_svfiprintf_r+0x4c>
 80089ba:	4a40      	ldr	r2, [pc, #256]	; (8008abc <_svfiprintf_r+0x1dc>)
 80089bc:	1a80      	subs	r0, r0, r2
 80089be:	fa0b f000 	lsl.w	r0, fp, r0
 80089c2:	4318      	orrs	r0, r3
 80089c4:	9004      	str	r0, [sp, #16]
 80089c6:	463d      	mov	r5, r7
 80089c8:	e7d3      	b.n	8008972 <_svfiprintf_r+0x92>
 80089ca:	9a03      	ldr	r2, [sp, #12]
 80089cc:	1d11      	adds	r1, r2, #4
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	9103      	str	r1, [sp, #12]
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	db01      	blt.n	80089da <_svfiprintf_r+0xfa>
 80089d6:	9207      	str	r2, [sp, #28]
 80089d8:	e004      	b.n	80089e4 <_svfiprintf_r+0x104>
 80089da:	4252      	negs	r2, r2
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	9207      	str	r2, [sp, #28]
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	783b      	ldrb	r3, [r7, #0]
 80089e6:	2b2e      	cmp	r3, #46	; 0x2e
 80089e8:	d10c      	bne.n	8008a04 <_svfiprintf_r+0x124>
 80089ea:	787b      	ldrb	r3, [r7, #1]
 80089ec:	2b2a      	cmp	r3, #42	; 0x2a
 80089ee:	d133      	bne.n	8008a58 <_svfiprintf_r+0x178>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	9203      	str	r2, [sp, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bfb8      	it	lt
 80089fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a00:	3702      	adds	r7, #2
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	4d2e      	ldr	r5, [pc, #184]	; (8008ac0 <_svfiprintf_r+0x1e0>)
 8008a06:	7839      	ldrb	r1, [r7, #0]
 8008a08:	2203      	movs	r2, #3
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f7f7 fbe8 	bl	80001e0 <memchr>
 8008a10:	b138      	cbz	r0, 8008a22 <_svfiprintf_r+0x142>
 8008a12:	2340      	movs	r3, #64	; 0x40
 8008a14:	1b40      	subs	r0, r0, r5
 8008a16:	fa03 f000 	lsl.w	r0, r3, r0
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	4303      	orrs	r3, r0
 8008a1e:	3701      	adds	r7, #1
 8008a20:	9304      	str	r3, [sp, #16]
 8008a22:	7839      	ldrb	r1, [r7, #0]
 8008a24:	4827      	ldr	r0, [pc, #156]	; (8008ac4 <_svfiprintf_r+0x1e4>)
 8008a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a2a:	2206      	movs	r2, #6
 8008a2c:	1c7e      	adds	r6, r7, #1
 8008a2e:	f7f7 fbd7 	bl	80001e0 <memchr>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d038      	beq.n	8008aa8 <_svfiprintf_r+0x1c8>
 8008a36:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <_svfiprintf_r+0x1e8>)
 8008a38:	bb13      	cbnz	r3, 8008a80 <_svfiprintf_r+0x1a0>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	3307      	adds	r3, #7
 8008a3e:	f023 0307 	bic.w	r3, r3, #7
 8008a42:	3308      	adds	r3, #8
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a48:	444b      	add	r3, r9
 8008a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4c:	e76d      	b.n	800892a <_svfiprintf_r+0x4a>
 8008a4e:	fb05 3202 	mla	r2, r5, r2, r3
 8008a52:	2001      	movs	r0, #1
 8008a54:	460f      	mov	r7, r1
 8008a56:	e7a6      	b.n	80089a6 <_svfiprintf_r+0xc6>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	3701      	adds	r7, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	250a      	movs	r5, #10
 8008a62:	4638      	mov	r0, r7
 8008a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a68:	3a30      	subs	r2, #48	; 0x30
 8008a6a:	2a09      	cmp	r2, #9
 8008a6c:	d903      	bls.n	8008a76 <_svfiprintf_r+0x196>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0c8      	beq.n	8008a04 <_svfiprintf_r+0x124>
 8008a72:	9105      	str	r1, [sp, #20]
 8008a74:	e7c6      	b.n	8008a04 <_svfiprintf_r+0x124>
 8008a76:	fb05 2101 	mla	r1, r5, r1, r2
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	e7f0      	b.n	8008a62 <_svfiprintf_r+0x182>
 8008a80:	ab03      	add	r3, sp, #12
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4622      	mov	r2, r4
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <_svfiprintf_r+0x1ec>)
 8008a88:	a904      	add	r1, sp, #16
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	f3af 8000 	nop.w
 8008a90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a94:	4681      	mov	r9, r0
 8008a96:	d1d6      	bne.n	8008a46 <_svfiprintf_r+0x166>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	065b      	lsls	r3, r3, #25
 8008a9c:	f53f af35 	bmi.w	800890a <_svfiprintf_r+0x2a>
 8008aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aa2:	b01d      	add	sp, #116	; 0x74
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	4622      	mov	r2, r4
 8008aae:	4b07      	ldr	r3, [pc, #28]	; (8008acc <_svfiprintf_r+0x1ec>)
 8008ab0:	a904      	add	r1, sp, #16
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f000 fa2c 	bl	8008f10 <_printf_i>
 8008ab8:	e7ea      	b.n	8008a90 <_svfiprintf_r+0x1b0>
 8008aba:	bf00      	nop
 8008abc:	08009848 	.word	0x08009848
 8008ac0:	0800984e 	.word	0x0800984e
 8008ac4:	08009852 	.word	0x08009852
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	0800882d 	.word	0x0800882d

08008ad0 <_sungetc_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	1c4b      	adds	r3, r1, #1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	d103      	bne.n	8008ae0 <_sungetc_r+0x10>
 8008ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8008adc:	4628      	mov	r0, r5
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	8993      	ldrh	r3, [r2, #12]
 8008ae2:	f023 0320 	bic.w	r3, r3, #32
 8008ae6:	8193      	strh	r3, [r2, #12]
 8008ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aea:	6852      	ldr	r2, [r2, #4]
 8008aec:	b2cd      	uxtb	r5, r1
 8008aee:	b18b      	cbz	r3, 8008b14 <_sungetc_r+0x44>
 8008af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008af2:	4293      	cmp	r3, r2
 8008af4:	dd08      	ble.n	8008b08 <_sungetc_r+0x38>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	1e5a      	subs	r2, r3, #1
 8008afa:	6022      	str	r2, [r4, #0]
 8008afc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008b00:	6863      	ldr	r3, [r4, #4]
 8008b02:	3301      	adds	r3, #1
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	e7e9      	b.n	8008adc <_sungetc_r+0xc>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f000 fdb7 	bl	800967c <__submore>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0f1      	beq.n	8008af6 <_sungetc_r+0x26>
 8008b12:	e7e1      	b.n	8008ad8 <_sungetc_r+0x8>
 8008b14:	6921      	ldr	r1, [r4, #16]
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	b151      	cbz	r1, 8008b30 <_sungetc_r+0x60>
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	d208      	bcs.n	8008b30 <_sungetc_r+0x60>
 8008b1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b22:	42a9      	cmp	r1, r5
 8008b24:	d104      	bne.n	8008b30 <_sungetc_r+0x60>
 8008b26:	3b01      	subs	r3, #1
 8008b28:	3201      	adds	r2, #1
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	6062      	str	r2, [r4, #4]
 8008b2e:	e7d5      	b.n	8008adc <_sungetc_r+0xc>
 8008b30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b38:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b3e:	4623      	mov	r3, r4
 8008b40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7dc      	b.n	8008b04 <_sungetc_r+0x34>

08008b4a <__ssrefill_r>:
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b50:	b169      	cbz	r1, 8008b6e <__ssrefill_r+0x24>
 8008b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d001      	beq.n	8008b5e <__ssrefill_r+0x14>
 8008b5a:	f7ff fd61 	bl	8008620 <_free_r>
 8008b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	2000      	movs	r0, #0
 8008b64:	6360      	str	r0, [r4, #52]	; 0x34
 8008b66:	b113      	cbz	r3, 8008b6e <__ssrefill_r+0x24>
 8008b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	bd10      	pop	{r4, pc}
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	2300      	movs	r3, #0
 8008b74:	6063      	str	r3, [r4, #4]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f043 0320 	orr.w	r3, r3, #32
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	e7f3      	b.n	8008b6c <__ssrefill_r+0x22>

08008b84 <__ssvfiscanf_r>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	2100      	movs	r1, #0
 8008b90:	9144      	str	r1, [sp, #272]	; 0x110
 8008b92:	9145      	str	r1, [sp, #276]	; 0x114
 8008b94:	499f      	ldr	r1, [pc, #636]	; (8008e14 <__ssvfiscanf_r+0x290>)
 8008b96:	91a0      	str	r1, [sp, #640]	; 0x280
 8008b98:	f10d 0804 	add.w	r8, sp, #4
 8008b9c:	499e      	ldr	r1, [pc, #632]	; (8008e18 <__ssvfiscanf_r+0x294>)
 8008b9e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008e1c <__ssvfiscanf_r+0x298>
 8008ba2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	4692      	mov	sl, r2
 8008baa:	91a1      	str	r1, [sp, #644]	; 0x284
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	270a      	movs	r7, #10
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 812a 	beq.w	8008e0e <__ssvfiscanf_r+0x28a>
 8008bba:	4655      	mov	r5, sl
 8008bbc:	f000 fd9c 	bl	80096f8 <__locale_ctype_ptr>
 8008bc0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008bc4:	4458      	add	r0, fp
 8008bc6:	7843      	ldrb	r3, [r0, #1]
 8008bc8:	f013 0308 	ands.w	r3, r3, #8
 8008bcc:	d01c      	beq.n	8008c08 <__ssvfiscanf_r+0x84>
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dd12      	ble.n	8008bfa <__ssvfiscanf_r+0x76>
 8008bd4:	f000 fd90 	bl	80096f8 <__locale_ctype_ptr>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	4410      	add	r0, r2
 8008bde:	7842      	ldrb	r2, [r0, #1]
 8008be0:	0712      	lsls	r2, r2, #28
 8008be2:	d401      	bmi.n	8008be8 <__ssvfiscanf_r+0x64>
 8008be4:	46aa      	mov	sl, r5
 8008be6:	e7e3      	b.n	8008bb0 <__ssvfiscanf_r+0x2c>
 8008be8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008bea:	3201      	adds	r2, #1
 8008bec:	9245      	str	r2, [sp, #276]	; 0x114
 8008bee:	6862      	ldr	r2, [r4, #4]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	6062      	str	r2, [r4, #4]
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	e7e9      	b.n	8008bce <__ssvfiscanf_r+0x4a>
 8008bfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4798      	blx	r3
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0e6      	beq.n	8008bd4 <__ssvfiscanf_r+0x50>
 8008c06:	e7ed      	b.n	8008be4 <__ssvfiscanf_r+0x60>
 8008c08:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008c0c:	f040 8082 	bne.w	8008d14 <__ssvfiscanf_r+0x190>
 8008c10:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c12:	9341      	str	r3, [sp, #260]	; 0x104
 8008c14:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008c18:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1a:	d103      	bne.n	8008c24 <__ssvfiscanf_r+0xa0>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	9341      	str	r3, [sp, #260]	; 0x104
 8008c20:	f10a 0502 	add.w	r5, sl, #2
 8008c24:	46aa      	mov	sl, r5
 8008c26:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008c2a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c2e:	2a09      	cmp	r2, #9
 8008c30:	d922      	bls.n	8008c78 <__ssvfiscanf_r+0xf4>
 8008c32:	2203      	movs	r2, #3
 8008c34:	4879      	ldr	r0, [pc, #484]	; (8008e1c <__ssvfiscanf_r+0x298>)
 8008c36:	f7f7 fad3 	bl	80001e0 <memchr>
 8008c3a:	b138      	cbz	r0, 8008c4c <__ssvfiscanf_r+0xc8>
 8008c3c:	eba0 0309 	sub.w	r3, r0, r9
 8008c40:	2001      	movs	r0, #1
 8008c42:	4098      	lsls	r0, r3
 8008c44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c46:	4318      	orrs	r0, r3
 8008c48:	9041      	str	r0, [sp, #260]	; 0x104
 8008c4a:	46aa      	mov	sl, r5
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b67      	cmp	r3, #103	; 0x67
 8008c52:	f10a 0501 	add.w	r5, sl, #1
 8008c56:	d82b      	bhi.n	8008cb0 <__ssvfiscanf_r+0x12c>
 8008c58:	2b65      	cmp	r3, #101	; 0x65
 8008c5a:	f080 809f 	bcs.w	8008d9c <__ssvfiscanf_r+0x218>
 8008c5e:	2b47      	cmp	r3, #71	; 0x47
 8008c60:	d810      	bhi.n	8008c84 <__ssvfiscanf_r+0x100>
 8008c62:	2b45      	cmp	r3, #69	; 0x45
 8008c64:	f080 809a 	bcs.w	8008d9c <__ssvfiscanf_r+0x218>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d06c      	beq.n	8008d46 <__ssvfiscanf_r+0x1c2>
 8008c6c:	2b25      	cmp	r3, #37	; 0x25
 8008c6e:	d051      	beq.n	8008d14 <__ssvfiscanf_r+0x190>
 8008c70:	2303      	movs	r3, #3
 8008c72:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c74:	9742      	str	r7, [sp, #264]	; 0x108
 8008c76:	e027      	b.n	8008cc8 <__ssvfiscanf_r+0x144>
 8008c78:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008c7a:	fb07 1303 	mla	r3, r7, r3, r1
 8008c7e:	3b30      	subs	r3, #48	; 0x30
 8008c80:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c82:	e7cf      	b.n	8008c24 <__ssvfiscanf_r+0xa0>
 8008c84:	2b5b      	cmp	r3, #91	; 0x5b
 8008c86:	d06a      	beq.n	8008d5e <__ssvfiscanf_r+0x1da>
 8008c88:	d80c      	bhi.n	8008ca4 <__ssvfiscanf_r+0x120>
 8008c8a:	2b58      	cmp	r3, #88	; 0x58
 8008c8c:	d1f0      	bne.n	8008c70 <__ssvfiscanf_r+0xec>
 8008c8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c94:	9241      	str	r2, [sp, #260]	; 0x104
 8008c96:	2210      	movs	r2, #16
 8008c98:	9242      	str	r2, [sp, #264]	; 0x108
 8008c9a:	2b6e      	cmp	r3, #110	; 0x6e
 8008c9c:	bf8c      	ite	hi
 8008c9e:	2304      	movhi	r3, #4
 8008ca0:	2303      	movls	r3, #3
 8008ca2:	e010      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008ca4:	2b63      	cmp	r3, #99	; 0x63
 8008ca6:	d065      	beq.n	8008d74 <__ssvfiscanf_r+0x1f0>
 8008ca8:	2b64      	cmp	r3, #100	; 0x64
 8008caa:	d1e1      	bne.n	8008c70 <__ssvfiscanf_r+0xec>
 8008cac:	9742      	str	r7, [sp, #264]	; 0x108
 8008cae:	e7f4      	b.n	8008c9a <__ssvfiscanf_r+0x116>
 8008cb0:	2b70      	cmp	r3, #112	; 0x70
 8008cb2:	d04b      	beq.n	8008d4c <__ssvfiscanf_r+0x1c8>
 8008cb4:	d826      	bhi.n	8008d04 <__ssvfiscanf_r+0x180>
 8008cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8008cb8:	d062      	beq.n	8008d80 <__ssvfiscanf_r+0x1fc>
 8008cba:	d84c      	bhi.n	8008d56 <__ssvfiscanf_r+0x1d2>
 8008cbc:	2b69      	cmp	r3, #105	; 0x69
 8008cbe:	d1d7      	bne.n	8008c70 <__ssvfiscanf_r+0xec>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9342      	str	r3, [sp, #264]	; 0x108
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dd68      	ble.n	8008da0 <__ssvfiscanf_r+0x21c>
 8008cce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cd0:	0659      	lsls	r1, r3, #25
 8008cd2:	d407      	bmi.n	8008ce4 <__ssvfiscanf_r+0x160>
 8008cd4:	f000 fd10 	bl	80096f8 <__locale_ctype_ptr>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	4410      	add	r0, r2
 8008cde:	7842      	ldrb	r2, [r0, #1]
 8008ce0:	0712      	lsls	r2, r2, #28
 8008ce2:	d464      	bmi.n	8008dae <__ssvfiscanf_r+0x22a>
 8008ce4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	dc73      	bgt.n	8008dd2 <__ssvfiscanf_r+0x24e>
 8008cea:	466b      	mov	r3, sp
 8008cec:	4622      	mov	r2, r4
 8008cee:	a941      	add	r1, sp, #260	; 0x104
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 fa1f 	bl	8009134 <_scanf_chars>
 8008cf6:	2801      	cmp	r0, #1
 8008cf8:	f000 8089 	beq.w	8008e0e <__ssvfiscanf_r+0x28a>
 8008cfc:	2802      	cmp	r0, #2
 8008cfe:	f47f af71 	bne.w	8008be4 <__ssvfiscanf_r+0x60>
 8008d02:	e01d      	b.n	8008d40 <__ssvfiscanf_r+0x1bc>
 8008d04:	2b75      	cmp	r3, #117	; 0x75
 8008d06:	d0d1      	beq.n	8008cac <__ssvfiscanf_r+0x128>
 8008d08:	2b78      	cmp	r3, #120	; 0x78
 8008d0a:	d0c0      	beq.n	8008c8e <__ssvfiscanf_r+0x10a>
 8008d0c:	2b73      	cmp	r3, #115	; 0x73
 8008d0e:	d1af      	bne.n	8008c70 <__ssvfiscanf_r+0xec>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e7d8      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd0c      	ble.n	8008d34 <__ssvfiscanf_r+0x1b0>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	781a      	ldrb	r2, [r3, #0]
 8008d1e:	455a      	cmp	r2, fp
 8008d20:	d175      	bne.n	8008e0e <__ssvfiscanf_r+0x28a>
 8008d22:	3301      	adds	r3, #1
 8008d24:	6862      	ldr	r2, [r4, #4]
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008d2a:	3a01      	subs	r2, #1
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	6062      	str	r2, [r4, #4]
 8008d30:	9345      	str	r3, [sp, #276]	; 0x114
 8008d32:	e757      	b.n	8008be4 <__ssvfiscanf_r+0x60>
 8008d34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d36:	4621      	mov	r1, r4
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4798      	blx	r3
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0ec      	beq.n	8008d1a <__ssvfiscanf_r+0x196>
 8008d40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d159      	bne.n	8008dfa <__ssvfiscanf_r+0x276>
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4a:	e05c      	b.n	8008e06 <__ssvfiscanf_r+0x282>
 8008d4c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d4e:	f042 0220 	orr.w	r2, r2, #32
 8008d52:	9241      	str	r2, [sp, #260]	; 0x104
 8008d54:	e79b      	b.n	8008c8e <__ssvfiscanf_r+0x10a>
 8008d56:	2308      	movs	r3, #8
 8008d58:	9342      	str	r3, [sp, #264]	; 0x108
 8008d5a:	2304      	movs	r3, #4
 8008d5c:	e7b3      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4640      	mov	r0, r8
 8008d62:	f000 fb3f 	bl	80093e4 <__sccl>
 8008d66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6c:	9341      	str	r3, [sp, #260]	; 0x104
 8008d6e:	4605      	mov	r5, r0
 8008d70:	2301      	movs	r3, #1
 8008d72:	e7a8      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008d74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7a:	9341      	str	r3, [sp, #260]	; 0x104
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e7a2      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008d80:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008d82:	06c3      	lsls	r3, r0, #27
 8008d84:	f53f af2e 	bmi.w	8008be4 <__ssvfiscanf_r+0x60>
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d8c:	1d19      	adds	r1, r3, #4
 8008d8e:	9100      	str	r1, [sp, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	07c0      	lsls	r0, r0, #31
 8008d94:	bf4c      	ite	mi
 8008d96:	801a      	strhmi	r2, [r3, #0]
 8008d98:	601a      	strpl	r2, [r3, #0]
 8008d9a:	e723      	b.n	8008be4 <__ssvfiscanf_r+0x60>
 8008d9c:	2305      	movs	r3, #5
 8008d9e:	e792      	b.n	8008cc6 <__ssvfiscanf_r+0x142>
 8008da0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008da2:	4621      	mov	r1, r4
 8008da4:	4630      	mov	r0, r6
 8008da6:	4798      	blx	r3
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d090      	beq.n	8008cce <__ssvfiscanf_r+0x14a>
 8008dac:	e7c8      	b.n	8008d40 <__ssvfiscanf_r+0x1bc>
 8008dae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008db0:	3201      	adds	r2, #1
 8008db2:	9245      	str	r2, [sp, #276]	; 0x114
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	3a01      	subs	r2, #1
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	6062      	str	r2, [r4, #4]
 8008dbc:	dd02      	ble.n	8008dc4 <__ssvfiscanf_r+0x240>
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	e787      	b.n	8008cd4 <__ssvfiscanf_r+0x150>
 8008dc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4798      	blx	r3
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d081      	beq.n	8008cd4 <__ssvfiscanf_r+0x150>
 8008dd0:	e7b6      	b.n	8008d40 <__ssvfiscanf_r+0x1bc>
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	dc06      	bgt.n	8008de4 <__ssvfiscanf_r+0x260>
 8008dd6:	466b      	mov	r3, sp
 8008dd8:	4622      	mov	r2, r4
 8008dda:	a941      	add	r1, sp, #260	; 0x104
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f000 fa0d 	bl	80091fc <_scanf_i>
 8008de2:	e788      	b.n	8008cf6 <__ssvfiscanf_r+0x172>
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <__ssvfiscanf_r+0x29c>)
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f43f aefc 	beq.w	8008be4 <__ssvfiscanf_r+0x60>
 8008dec:	466b      	mov	r3, sp
 8008dee:	4622      	mov	r2, r4
 8008df0:	a941      	add	r1, sp, #260	; 0x104
 8008df2:	4630      	mov	r0, r6
 8008df4:	f3af 8000 	nop.w
 8008df8:	e77d      	b.n	8008cf6 <__ssvfiscanf_r+0x172>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e00:	bf18      	it	ne
 8008e02:	f04f 30ff 	movne.w	r0, #4294967295
 8008e06:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e10:	e7f9      	b.n	8008e06 <__ssvfiscanf_r+0x282>
 8008e12:	bf00      	nop
 8008e14:	08008ad1 	.word	0x08008ad1
 8008e18:	08008b4b 	.word	0x08008b4b
 8008e1c:	0800984e 	.word	0x0800984e
 8008e20:	00000000 	.word	0x00000000

08008e24 <_printf_common>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4691      	mov	r9, r2
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	688a      	ldr	r2, [r1, #8]
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	bfb8      	it	lt
 8008e38:	4613      	movlt	r3, r2
 8008e3a:	f8c9 3000 	str.w	r3, [r9]
 8008e3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e42:	4606      	mov	r6, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	b112      	cbz	r2, 8008e4e <_printf_common+0x2a>
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f8c9 3000 	str.w	r3, [r9]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e58:	3302      	addmi	r3, #2
 8008e5a:	f8c9 3000 	strmi.w	r3, [r9]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d107      	bne.n	8008e76 <_printf_common+0x52>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	42ab      	cmp	r3, r5
 8008e74:	dc28      	bgt.n	8008ec8 <_printf_common+0xa4>
 8008e76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	3300      	adds	r3, #0
 8008e7e:	bf18      	it	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	0692      	lsls	r2, r2, #26
 8008e84:	d42d      	bmi.n	8008ee2 <_printf_common+0xbe>
 8008e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	47c0      	blx	r8
 8008e90:	3001      	adds	r0, #1
 8008e92:	d020      	beq.n	8008ed6 <_printf_common+0xb2>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	68e5      	ldr	r5, [r4, #12]
 8008e98:	f8d9 2000 	ldr.w	r2, [r9]
 8008e9c:	f003 0306 	and.w	r3, r3, #6
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	bf08      	it	eq
 8008ea4:	1aad      	subeq	r5, r5, r2
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	6922      	ldr	r2, [r4, #16]
 8008eaa:	bf0c      	ite	eq
 8008eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb0:	2500      	movne	r5, #0
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	bfc4      	itt	gt
 8008eb6:	1a9b      	subgt	r3, r3, r2
 8008eb8:	18ed      	addgt	r5, r5, r3
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	341a      	adds	r4, #26
 8008ec0:	454d      	cmp	r5, r9
 8008ec2:	d11a      	bne.n	8008efa <_printf_common+0xd6>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e008      	b.n	8008eda <_printf_common+0xb6>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4639      	mov	r1, r7
 8008ece:	4630      	mov	r0, r6
 8008ed0:	47c0      	blx	r8
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d103      	bne.n	8008ede <_printf_common+0xba>
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ede:	3501      	adds	r5, #1
 8008ee0:	e7c3      	b.n	8008e6a <_printf_common+0x46>
 8008ee2:	18e1      	adds	r1, r4, r3
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	2030      	movs	r0, #48	; 0x30
 8008ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eec:	4422      	add	r2, r4
 8008eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	e7c5      	b.n	8008e86 <_printf_common+0x62>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4622      	mov	r2, r4
 8008efe:	4639      	mov	r1, r7
 8008f00:	4630      	mov	r0, r6
 8008f02:	47c0      	blx	r8
 8008f04:	3001      	adds	r0, #1
 8008f06:	d0e6      	beq.n	8008ed6 <_printf_common+0xb2>
 8008f08:	f109 0901 	add.w	r9, r9, #1
 8008f0c:	e7d8      	b.n	8008ec0 <_printf_common+0x9c>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f18:	460c      	mov	r4, r1
 8008f1a:	7e09      	ldrb	r1, [r1, #24]
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	296e      	cmp	r1, #110	; 0x6e
 8008f20:	4617      	mov	r7, r2
 8008f22:	4606      	mov	r6, r0
 8008f24:	4698      	mov	r8, r3
 8008f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f28:	f000 80b3 	beq.w	8009092 <_printf_i+0x182>
 8008f2c:	d822      	bhi.n	8008f74 <_printf_i+0x64>
 8008f2e:	2963      	cmp	r1, #99	; 0x63
 8008f30:	d036      	beq.n	8008fa0 <_printf_i+0x90>
 8008f32:	d80a      	bhi.n	8008f4a <_printf_i+0x3a>
 8008f34:	2900      	cmp	r1, #0
 8008f36:	f000 80b9 	beq.w	80090ac <_printf_i+0x19c>
 8008f3a:	2958      	cmp	r1, #88	; 0x58
 8008f3c:	f000 8083 	beq.w	8009046 <_printf_i+0x136>
 8008f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f48:	e032      	b.n	8008fb0 <_printf_i+0xa0>
 8008f4a:	2964      	cmp	r1, #100	; 0x64
 8008f4c:	d001      	beq.n	8008f52 <_printf_i+0x42>
 8008f4e:	2969      	cmp	r1, #105	; 0x69
 8008f50:	d1f6      	bne.n	8008f40 <_printf_i+0x30>
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	0605      	lsls	r5, r0, #24
 8008f58:	f103 0104 	add.w	r1, r3, #4
 8008f5c:	d52a      	bpl.n	8008fb4 <_printf_i+0xa4>
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da03      	bge.n	8008f6e <_printf_i+0x5e>
 8008f66:	222d      	movs	r2, #45	; 0x2d
 8008f68:	425b      	negs	r3, r3
 8008f6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f6e:	486f      	ldr	r0, [pc, #444]	; (800912c <_printf_i+0x21c>)
 8008f70:	220a      	movs	r2, #10
 8008f72:	e039      	b.n	8008fe8 <_printf_i+0xd8>
 8008f74:	2973      	cmp	r1, #115	; 0x73
 8008f76:	f000 809d 	beq.w	80090b4 <_printf_i+0x1a4>
 8008f7a:	d808      	bhi.n	8008f8e <_printf_i+0x7e>
 8008f7c:	296f      	cmp	r1, #111	; 0x6f
 8008f7e:	d020      	beq.n	8008fc2 <_printf_i+0xb2>
 8008f80:	2970      	cmp	r1, #112	; 0x70
 8008f82:	d1dd      	bne.n	8008f40 <_printf_i+0x30>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	f043 0320 	orr.w	r3, r3, #32
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	e003      	b.n	8008f96 <_printf_i+0x86>
 8008f8e:	2975      	cmp	r1, #117	; 0x75
 8008f90:	d017      	beq.n	8008fc2 <_printf_i+0xb2>
 8008f92:	2978      	cmp	r1, #120	; 0x78
 8008f94:	d1d4      	bne.n	8008f40 <_printf_i+0x30>
 8008f96:	2378      	movs	r3, #120	; 0x78
 8008f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f9c:	4864      	ldr	r0, [pc, #400]	; (8009130 <_printf_i+0x220>)
 8008f9e:	e055      	b.n	800904c <_printf_i+0x13c>
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6011      	str	r1, [r2, #0]
 8008fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e08c      	b.n	80090ce <_printf_i+0x1be>
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6011      	str	r1, [r2, #0]
 8008fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fbc:	bf18      	it	ne
 8008fbe:	b21b      	sxthne	r3, r3
 8008fc0:	e7cf      	b.n	8008f62 <_printf_i+0x52>
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1d18      	adds	r0, r3, #4
 8008fc8:	6010      	str	r0, [r2, #0]
 8008fca:	0628      	lsls	r0, r5, #24
 8008fcc:	d501      	bpl.n	8008fd2 <_printf_i+0xc2>
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	e002      	b.n	8008fd8 <_printf_i+0xc8>
 8008fd2:	0668      	lsls	r0, r5, #25
 8008fd4:	d5fb      	bpl.n	8008fce <_printf_i+0xbe>
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	4854      	ldr	r0, [pc, #336]	; (800912c <_printf_i+0x21c>)
 8008fda:	296f      	cmp	r1, #111	; 0x6f
 8008fdc:	bf14      	ite	ne
 8008fde:	220a      	movne	r2, #10
 8008fe0:	2208      	moveq	r2, #8
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fe8:	6865      	ldr	r5, [r4, #4]
 8008fea:	60a5      	str	r5, [r4, #8]
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	f2c0 8095 	blt.w	800911c <_printf_i+0x20c>
 8008ff2:	6821      	ldr	r1, [r4, #0]
 8008ff4:	f021 0104 	bic.w	r1, r1, #4
 8008ff8:	6021      	str	r1, [r4, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d13d      	bne.n	800907a <_printf_i+0x16a>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	f040 808e 	bne.w	8009120 <_printf_i+0x210>
 8009004:	4665      	mov	r5, ip
 8009006:	2a08      	cmp	r2, #8
 8009008:	d10b      	bne.n	8009022 <_printf_i+0x112>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07db      	lsls	r3, r3, #31
 800900e:	d508      	bpl.n	8009022 <_printf_i+0x112>
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	bfde      	ittt	le
 8009018:	2330      	movle	r3, #48	; 0x30
 800901a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800901e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009022:	ebac 0305 	sub.w	r3, ip, r5
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	f8cd 8000 	str.w	r8, [sp]
 800902c:	463b      	mov	r3, r7
 800902e:	aa03      	add	r2, sp, #12
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff fef6 	bl	8008e24 <_printf_common>
 8009038:	3001      	adds	r0, #1
 800903a:	d14d      	bne.n	80090d8 <_printf_i+0x1c8>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b005      	add	sp, #20
 8009042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009046:	4839      	ldr	r0, [pc, #228]	; (800912c <_printf_i+0x21c>)
 8009048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800904c:	6813      	ldr	r3, [r2, #0]
 800904e:	6821      	ldr	r1, [r4, #0]
 8009050:	1d1d      	adds	r5, r3, #4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6015      	str	r5, [r2, #0]
 8009056:	060a      	lsls	r2, r1, #24
 8009058:	d50b      	bpl.n	8009072 <_printf_i+0x162>
 800905a:	07ca      	lsls	r2, r1, #31
 800905c:	bf44      	itt	mi
 800905e:	f041 0120 	orrmi.w	r1, r1, #32
 8009062:	6021      	strmi	r1, [r4, #0]
 8009064:	b91b      	cbnz	r3, 800906e <_printf_i+0x15e>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	f022 0220 	bic.w	r2, r2, #32
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	2210      	movs	r2, #16
 8009070:	e7b7      	b.n	8008fe2 <_printf_i+0xd2>
 8009072:	064d      	lsls	r5, r1, #25
 8009074:	bf48      	it	mi
 8009076:	b29b      	uxthmi	r3, r3
 8009078:	e7ef      	b.n	800905a <_printf_i+0x14a>
 800907a:	4665      	mov	r5, ip
 800907c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009080:	fb02 3311 	mls	r3, r2, r1, r3
 8009084:	5cc3      	ldrb	r3, [r0, r3]
 8009086:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800908a:	460b      	mov	r3, r1
 800908c:	2900      	cmp	r1, #0
 800908e:	d1f5      	bne.n	800907c <_printf_i+0x16c>
 8009090:	e7b9      	b.n	8009006 <_printf_i+0xf6>
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	6825      	ldr	r5, [r4, #0]
 8009096:	6961      	ldr	r1, [r4, #20]
 8009098:	1d18      	adds	r0, r3, #4
 800909a:	6010      	str	r0, [r2, #0]
 800909c:	0628      	lsls	r0, r5, #24
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	d501      	bpl.n	80090a6 <_printf_i+0x196>
 80090a2:	6019      	str	r1, [r3, #0]
 80090a4:	e002      	b.n	80090ac <_printf_i+0x19c>
 80090a6:	066a      	lsls	r2, r5, #25
 80090a8:	d5fb      	bpl.n	80090a2 <_printf_i+0x192>
 80090aa:	8019      	strh	r1, [r3, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	4665      	mov	r5, ip
 80090b2:	e7b9      	b.n	8009028 <_printf_i+0x118>
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	1d19      	adds	r1, r3, #4
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	681d      	ldr	r5, [r3, #0]
 80090bc:	6862      	ldr	r2, [r4, #4]
 80090be:	2100      	movs	r1, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7f7 f88d 	bl	80001e0 <memchr>
 80090c6:	b108      	cbz	r0, 80090cc <_printf_i+0x1bc>
 80090c8:	1b40      	subs	r0, r0, r5
 80090ca:	6060      	str	r0, [r4, #4]
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2300      	movs	r3, #0
 80090d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d6:	e7a7      	b.n	8009028 <_printf_i+0x118>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	462a      	mov	r2, r5
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	47c0      	blx	r8
 80090e2:	3001      	adds	r0, #1
 80090e4:	d0aa      	beq.n	800903c <_printf_i+0x12c>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	079b      	lsls	r3, r3, #30
 80090ea:	d413      	bmi.n	8009114 <_printf_i+0x204>
 80090ec:	68e0      	ldr	r0, [r4, #12]
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	4298      	cmp	r0, r3
 80090f2:	bfb8      	it	lt
 80090f4:	4618      	movlt	r0, r3
 80090f6:	e7a3      	b.n	8009040 <_printf_i+0x130>
 80090f8:	2301      	movs	r3, #1
 80090fa:	464a      	mov	r2, r9
 80090fc:	4639      	mov	r1, r7
 80090fe:	4630      	mov	r0, r6
 8009100:	47c0      	blx	r8
 8009102:	3001      	adds	r0, #1
 8009104:	d09a      	beq.n	800903c <_printf_i+0x12c>
 8009106:	3501      	adds	r5, #1
 8009108:	68e3      	ldr	r3, [r4, #12]
 800910a:	9a03      	ldr	r2, [sp, #12]
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	42ab      	cmp	r3, r5
 8009110:	dcf2      	bgt.n	80090f8 <_printf_i+0x1e8>
 8009112:	e7eb      	b.n	80090ec <_printf_i+0x1dc>
 8009114:	2500      	movs	r5, #0
 8009116:	f104 0919 	add.w	r9, r4, #25
 800911a:	e7f5      	b.n	8009108 <_printf_i+0x1f8>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ac      	bne.n	800907a <_printf_i+0x16a>
 8009120:	7803      	ldrb	r3, [r0, #0]
 8009122:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800912a:	e76c      	b.n	8009006 <_printf_i+0xf6>
 800912c:	08009859 	.word	0x08009859
 8009130:	0800986a 	.word	0x0800986a

08009134 <_scanf_chars>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	4615      	mov	r5, r2
 800913a:	688a      	ldr	r2, [r1, #8]
 800913c:	4680      	mov	r8, r0
 800913e:	460c      	mov	r4, r1
 8009140:	b932      	cbnz	r2, 8009150 <_scanf_chars+0x1c>
 8009142:	698a      	ldr	r2, [r1, #24]
 8009144:	2a00      	cmp	r2, #0
 8009146:	bf14      	ite	ne
 8009148:	f04f 32ff 	movne.w	r2, #4294967295
 800914c:	2201      	moveq	r2, #1
 800914e:	608a      	str	r2, [r1, #8]
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	06d1      	lsls	r1, r2, #27
 8009154:	bf5f      	itttt	pl
 8009156:	681a      	ldrpl	r2, [r3, #0]
 8009158:	1d11      	addpl	r1, r2, #4
 800915a:	6019      	strpl	r1, [r3, #0]
 800915c:	6817      	ldrpl	r7, [r2, #0]
 800915e:	2600      	movs	r6, #0
 8009160:	69a3      	ldr	r3, [r4, #24]
 8009162:	b1db      	cbz	r3, 800919c <_scanf_chars+0x68>
 8009164:	2b01      	cmp	r3, #1
 8009166:	d107      	bne.n	8009178 <_scanf_chars+0x44>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	6962      	ldr	r2, [r4, #20]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	5cd3      	ldrb	r3, [r2, r3]
 8009170:	b9a3      	cbnz	r3, 800919c <_scanf_chars+0x68>
 8009172:	2e00      	cmp	r6, #0
 8009174:	d132      	bne.n	80091dc <_scanf_chars+0xa8>
 8009176:	e006      	b.n	8009186 <_scanf_chars+0x52>
 8009178:	2b02      	cmp	r3, #2
 800917a:	d007      	beq.n	800918c <_scanf_chars+0x58>
 800917c:	2e00      	cmp	r6, #0
 800917e:	d12d      	bne.n	80091dc <_scanf_chars+0xa8>
 8009180:	69a3      	ldr	r3, [r4, #24]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d12a      	bne.n	80091dc <_scanf_chars+0xa8>
 8009186:	2001      	movs	r0, #1
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918c:	f000 fab4 	bl	80096f8 <__locale_ctype_ptr>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	4418      	add	r0, r3
 8009196:	7843      	ldrb	r3, [r0, #1]
 8009198:	071b      	lsls	r3, r3, #28
 800919a:	d4ef      	bmi.n	800917c <_scanf_chars+0x48>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	06da      	lsls	r2, r3, #27
 80091a0:	bf5e      	ittt	pl
 80091a2:	682b      	ldrpl	r3, [r5, #0]
 80091a4:	781b      	ldrbpl	r3, [r3, #0]
 80091a6:	703b      	strbpl	r3, [r7, #0]
 80091a8:	682a      	ldr	r2, [r5, #0]
 80091aa:	686b      	ldr	r3, [r5, #4]
 80091ac:	f102 0201 	add.w	r2, r2, #1
 80091b0:	602a      	str	r2, [r5, #0]
 80091b2:	68a2      	ldr	r2, [r4, #8]
 80091b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80091b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80091bc:	606b      	str	r3, [r5, #4]
 80091be:	f106 0601 	add.w	r6, r6, #1
 80091c2:	bf58      	it	pl
 80091c4:	3701      	addpl	r7, #1
 80091c6:	60a2      	str	r2, [r4, #8]
 80091c8:	b142      	cbz	r2, 80091dc <_scanf_chars+0xa8>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dcc8      	bgt.n	8009160 <_scanf_chars+0x2c>
 80091ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091d2:	4629      	mov	r1, r5
 80091d4:	4640      	mov	r0, r8
 80091d6:	4798      	blx	r3
 80091d8:	2800      	cmp	r0, #0
 80091da:	d0c1      	beq.n	8009160 <_scanf_chars+0x2c>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	f013 0310 	ands.w	r3, r3, #16
 80091e2:	d105      	bne.n	80091f0 <_scanf_chars+0xbc>
 80091e4:	68e2      	ldr	r2, [r4, #12]
 80091e6:	3201      	adds	r2, #1
 80091e8:	60e2      	str	r2, [r4, #12]
 80091ea:	69a2      	ldr	r2, [r4, #24]
 80091ec:	b102      	cbz	r2, 80091f0 <_scanf_chars+0xbc>
 80091ee:	703b      	strb	r3, [r7, #0]
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	441e      	add	r6, r3
 80091f4:	6126      	str	r6, [r4, #16]
 80091f6:	2000      	movs	r0, #0
 80091f8:	e7c6      	b.n	8009188 <_scanf_chars+0x54>
	...

080091fc <_scanf_i>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	469a      	mov	sl, r3
 8009202:	4b74      	ldr	r3, [pc, #464]	; (80093d4 <_scanf_i+0x1d8>)
 8009204:	460c      	mov	r4, r1
 8009206:	4683      	mov	fp, r0
 8009208:	4616      	mov	r6, r2
 800920a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800920e:	b087      	sub	sp, #28
 8009210:	ab03      	add	r3, sp, #12
 8009212:	68a7      	ldr	r7, [r4, #8]
 8009214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009218:	4b6f      	ldr	r3, [pc, #444]	; (80093d8 <_scanf_i+0x1dc>)
 800921a:	69a1      	ldr	r1, [r4, #24]
 800921c:	4a6f      	ldr	r2, [pc, #444]	; (80093dc <_scanf_i+0x1e0>)
 800921e:	2903      	cmp	r1, #3
 8009220:	bf08      	it	eq
 8009222:	461a      	moveq	r2, r3
 8009224:	1e7b      	subs	r3, r7, #1
 8009226:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800922a:	bf84      	itt	hi
 800922c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009230:	60a3      	strhi	r3, [r4, #8]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	9200      	str	r2, [sp, #0]
 8009236:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800923a:	bf88      	it	hi
 800923c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009240:	f104 091c 	add.w	r9, r4, #28
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bf8c      	ite	hi
 8009248:	197f      	addhi	r7, r7, r5
 800924a:	2700      	movls	r7, #0
 800924c:	464b      	mov	r3, r9
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	6831      	ldr	r1, [r6, #0]
 8009256:	ab03      	add	r3, sp, #12
 8009258:	2202      	movs	r2, #2
 800925a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800925e:	7809      	ldrb	r1, [r1, #0]
 8009260:	f7f6 ffbe 	bl	80001e0 <memchr>
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	b330      	cbz	r0, 80092b6 <_scanf_i+0xba>
 8009268:	f1b8 0f01 	cmp.w	r8, #1
 800926c:	d15a      	bne.n	8009324 <_scanf_i+0x128>
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	b92a      	cbnz	r2, 800927e <_scanf_i+0x82>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	2108      	movs	r1, #8
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	6061      	str	r1, [r4, #4]
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	6822      	ldr	r2, [r4, #0]
 8009280:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	68a2      	ldr	r2, [r4, #8]
 8009288:	1e51      	subs	r1, r2, #1
 800928a:	60a1      	str	r1, [r4, #8]
 800928c:	b19a      	cbz	r2, 80092b6 <_scanf_i+0xba>
 800928e:	6832      	ldr	r2, [r6, #0]
 8009290:	1c51      	adds	r1, r2, #1
 8009292:	6031      	str	r1, [r6, #0]
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	701a      	strb	r2, [r3, #0]
 8009298:	1c5d      	adds	r5, r3, #1
 800929a:	6873      	ldr	r3, [r6, #4]
 800929c:	3b01      	subs	r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	6073      	str	r3, [r6, #4]
 80092a2:	dc07      	bgt.n	80092b4 <_scanf_i+0xb8>
 80092a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092a8:	4631      	mov	r1, r6
 80092aa:	4658      	mov	r0, fp
 80092ac:	4798      	blx	r3
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f040 8086 	bne.w	80093c0 <_scanf_i+0x1c4>
 80092b4:	462b      	mov	r3, r5
 80092b6:	f108 0801 	add.w	r8, r8, #1
 80092ba:	f1b8 0f03 	cmp.w	r8, #3
 80092be:	d1c8      	bne.n	8009252 <_scanf_i+0x56>
 80092c0:	6862      	ldr	r2, [r4, #4]
 80092c2:	b90a      	cbnz	r2, 80092c8 <_scanf_i+0xcc>
 80092c4:	220a      	movs	r2, #10
 80092c6:	6062      	str	r2, [r4, #4]
 80092c8:	6862      	ldr	r2, [r4, #4]
 80092ca:	4945      	ldr	r1, [pc, #276]	; (80093e0 <_scanf_i+0x1e4>)
 80092cc:	6960      	ldr	r0, [r4, #20]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	1a89      	subs	r1, r1, r2
 80092d2:	f000 f887 	bl	80093e4 <__sccl>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	f04f 0800 	mov.w	r8, #0
 80092dc:	461d      	mov	r5, r3
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <_scanf_i+0x160>
 80092e6:	6831      	ldr	r1, [r6, #0]
 80092e8:	6960      	ldr	r0, [r4, #20]
 80092ea:	f891 c000 	ldrb.w	ip, [r1]
 80092ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d032      	beq.n	800935c <_scanf_i+0x160>
 80092f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80092fa:	d121      	bne.n	8009340 <_scanf_i+0x144>
 80092fc:	0510      	lsls	r0, r2, #20
 80092fe:	d51f      	bpl.n	8009340 <_scanf_i+0x144>
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	b117      	cbz	r7, 800930c <_scanf_i+0x110>
 8009306:	3301      	adds	r3, #1
 8009308:	3f01      	subs	r7, #1
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	6873      	ldr	r3, [r6, #4]
 800930e:	3b01      	subs	r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	6073      	str	r3, [r6, #4]
 8009314:	dd1b      	ble.n	800934e <_scanf_i+0x152>
 8009316:	6833      	ldr	r3, [r6, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	3b01      	subs	r3, #1
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	e7dc      	b.n	80092de <_scanf_i+0xe2>
 8009324:	f1b8 0f02 	cmp.w	r8, #2
 8009328:	d1ad      	bne.n	8009286 <_scanf_i+0x8a>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009330:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009334:	d1bf      	bne.n	80092b6 <_scanf_i+0xba>
 8009336:	2110      	movs	r1, #16
 8009338:	6061      	str	r1, [r4, #4]
 800933a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933e:	e7a1      	b.n	8009284 <_scanf_i+0x88>
 8009340:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	780b      	ldrb	r3, [r1, #0]
 8009348:	702b      	strb	r3, [r5, #0]
 800934a:	3501      	adds	r5, #1
 800934c:	e7de      	b.n	800930c <_scanf_i+0x110>
 800934e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009352:	4631      	mov	r1, r6
 8009354:	4658      	mov	r0, fp
 8009356:	4798      	blx	r3
 8009358:	2800      	cmp	r0, #0
 800935a:	d0df      	beq.n	800931c <_scanf_i+0x120>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	05d9      	lsls	r1, r3, #23
 8009360:	d50c      	bpl.n	800937c <_scanf_i+0x180>
 8009362:	454d      	cmp	r5, r9
 8009364:	d908      	bls.n	8009378 <_scanf_i+0x17c>
 8009366:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800936a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800936e:	4632      	mov	r2, r6
 8009370:	4658      	mov	r0, fp
 8009372:	4798      	blx	r3
 8009374:	1e6f      	subs	r7, r5, #1
 8009376:	463d      	mov	r5, r7
 8009378:	454d      	cmp	r5, r9
 800937a:	d029      	beq.n	80093d0 <_scanf_i+0x1d4>
 800937c:	6822      	ldr	r2, [r4, #0]
 800937e:	f012 0210 	ands.w	r2, r2, #16
 8009382:	d113      	bne.n	80093ac <_scanf_i+0x1b0>
 8009384:	702a      	strb	r2, [r5, #0]
 8009386:	6863      	ldr	r3, [r4, #4]
 8009388:	9e00      	ldr	r6, [sp, #0]
 800938a:	4649      	mov	r1, r9
 800938c:	4658      	mov	r0, fp
 800938e:	47b0      	blx	r6
 8009390:	f8da 3000 	ldr.w	r3, [sl]
 8009394:	6821      	ldr	r1, [r4, #0]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	f8ca 2000 	str.w	r2, [sl]
 800939c:	f011 0f20 	tst.w	r1, #32
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	d010      	beq.n	80093c6 <_scanf_i+0x1ca>
 80093a4:	6018      	str	r0, [r3, #0]
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	60e3      	str	r3, [r4, #12]
 80093ac:	eba5 0509 	sub.w	r5, r5, r9
 80093b0:	44a8      	add	r8, r5
 80093b2:	6925      	ldr	r5, [r4, #16]
 80093b4:	4445      	add	r5, r8
 80093b6:	6125      	str	r5, [r4, #16]
 80093b8:	2000      	movs	r0, #0
 80093ba:	b007      	add	sp, #28
 80093bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c0:	f04f 0800 	mov.w	r8, #0
 80093c4:	e7ca      	b.n	800935c <_scanf_i+0x160>
 80093c6:	07ca      	lsls	r2, r1, #31
 80093c8:	bf4c      	ite	mi
 80093ca:	8018      	strhmi	r0, [r3, #0]
 80093cc:	6018      	strpl	r0, [r3, #0]
 80093ce:	e7ea      	b.n	80093a6 <_scanf_i+0x1aa>
 80093d0:	2001      	movs	r0, #1
 80093d2:	e7f2      	b.n	80093ba <_scanf_i+0x1be>
 80093d4:	08009824 	.word	0x08009824
 80093d8:	08009541 	.word	0x08009541
 80093dc:	08009659 	.word	0x08009659
 80093e0:	0800988b 	.word	0x0800988b

080093e4 <__sccl>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	780b      	ldrb	r3, [r1, #0]
 80093e8:	2b5e      	cmp	r3, #94	; 0x5e
 80093ea:	bf13      	iteet	ne
 80093ec:	1c4a      	addne	r2, r1, #1
 80093ee:	1c8a      	addeq	r2, r1, #2
 80093f0:	784b      	ldrbeq	r3, [r1, #1]
 80093f2:	2100      	movne	r1, #0
 80093f4:	bf08      	it	eq
 80093f6:	2101      	moveq	r1, #1
 80093f8:	1e44      	subs	r4, r0, #1
 80093fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80093fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009402:	42ac      	cmp	r4, r5
 8009404:	d1fb      	bne.n	80093fe <__sccl+0x1a>
 8009406:	b913      	cbnz	r3, 800940e <__sccl+0x2a>
 8009408:	3a01      	subs	r2, #1
 800940a:	4610      	mov	r0, r2
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	f081 0401 	eor.w	r4, r1, #1
 8009412:	54c4      	strb	r4, [r0, r3]
 8009414:	1c51      	adds	r1, r2, #1
 8009416:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800941a:	2d2d      	cmp	r5, #45	; 0x2d
 800941c:	f101 36ff 	add.w	r6, r1, #4294967295
 8009420:	460a      	mov	r2, r1
 8009422:	d006      	beq.n	8009432 <__sccl+0x4e>
 8009424:	2d5d      	cmp	r5, #93	; 0x5d
 8009426:	d0f0      	beq.n	800940a <__sccl+0x26>
 8009428:	b90d      	cbnz	r5, 800942e <__sccl+0x4a>
 800942a:	4632      	mov	r2, r6
 800942c:	e7ed      	b.n	800940a <__sccl+0x26>
 800942e:	462b      	mov	r3, r5
 8009430:	e7ef      	b.n	8009412 <__sccl+0x2e>
 8009432:	780e      	ldrb	r6, [r1, #0]
 8009434:	2e5d      	cmp	r6, #93	; 0x5d
 8009436:	d0fa      	beq.n	800942e <__sccl+0x4a>
 8009438:	42b3      	cmp	r3, r6
 800943a:	dcf8      	bgt.n	800942e <__sccl+0x4a>
 800943c:	3301      	adds	r3, #1
 800943e:	429e      	cmp	r6, r3
 8009440:	54c4      	strb	r4, [r0, r3]
 8009442:	dcfb      	bgt.n	800943c <__sccl+0x58>
 8009444:	3102      	adds	r1, #2
 8009446:	e7e6      	b.n	8009416 <__sccl+0x32>

08009448 <_strtol_l.isra.0>:
 8009448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	4692      	mov	sl, r2
 8009452:	461e      	mov	r6, r3
 8009454:	460f      	mov	r7, r1
 8009456:	463d      	mov	r5, r7
 8009458:	9808      	ldr	r0, [sp, #32]
 800945a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800945e:	f000 f947 	bl	80096f0 <__locale_ctype_ptr_l>
 8009462:	4420      	add	r0, r4
 8009464:	7843      	ldrb	r3, [r0, #1]
 8009466:	f013 0308 	ands.w	r3, r3, #8
 800946a:	d132      	bne.n	80094d2 <_strtol_l.isra.0+0x8a>
 800946c:	2c2d      	cmp	r4, #45	; 0x2d
 800946e:	d132      	bne.n	80094d6 <_strtol_l.isra.0+0x8e>
 8009470:	787c      	ldrb	r4, [r7, #1]
 8009472:	1cbd      	adds	r5, r7, #2
 8009474:	2201      	movs	r2, #1
 8009476:	2e00      	cmp	r6, #0
 8009478:	d05d      	beq.n	8009536 <_strtol_l.isra.0+0xee>
 800947a:	2e10      	cmp	r6, #16
 800947c:	d109      	bne.n	8009492 <_strtol_l.isra.0+0x4a>
 800947e:	2c30      	cmp	r4, #48	; 0x30
 8009480:	d107      	bne.n	8009492 <_strtol_l.isra.0+0x4a>
 8009482:	782b      	ldrb	r3, [r5, #0]
 8009484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009488:	2b58      	cmp	r3, #88	; 0x58
 800948a:	d14f      	bne.n	800952c <_strtol_l.isra.0+0xe4>
 800948c:	786c      	ldrb	r4, [r5, #1]
 800948e:	2610      	movs	r6, #16
 8009490:	3502      	adds	r5, #2
 8009492:	2a00      	cmp	r2, #0
 8009494:	bf14      	ite	ne
 8009496:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800949a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800949e:	2700      	movs	r7, #0
 80094a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80094a4:	4638      	mov	r0, r7
 80094a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80094aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80094ae:	2b09      	cmp	r3, #9
 80094b0:	d817      	bhi.n	80094e2 <_strtol_l.isra.0+0x9a>
 80094b2:	461c      	mov	r4, r3
 80094b4:	42a6      	cmp	r6, r4
 80094b6:	dd23      	ble.n	8009500 <_strtol_l.isra.0+0xb8>
 80094b8:	1c7b      	adds	r3, r7, #1
 80094ba:	d007      	beq.n	80094cc <_strtol_l.isra.0+0x84>
 80094bc:	4584      	cmp	ip, r0
 80094be:	d31c      	bcc.n	80094fa <_strtol_l.isra.0+0xb2>
 80094c0:	d101      	bne.n	80094c6 <_strtol_l.isra.0+0x7e>
 80094c2:	45a6      	cmp	lr, r4
 80094c4:	db19      	blt.n	80094fa <_strtol_l.isra.0+0xb2>
 80094c6:	fb00 4006 	mla	r0, r0, r6, r4
 80094ca:	2701      	movs	r7, #1
 80094cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094d0:	e7eb      	b.n	80094aa <_strtol_l.isra.0+0x62>
 80094d2:	462f      	mov	r7, r5
 80094d4:	e7bf      	b.n	8009456 <_strtol_l.isra.0+0xe>
 80094d6:	2c2b      	cmp	r4, #43	; 0x2b
 80094d8:	bf04      	itt	eq
 80094da:	1cbd      	addeq	r5, r7, #2
 80094dc:	787c      	ldrbeq	r4, [r7, #1]
 80094de:	461a      	mov	r2, r3
 80094e0:	e7c9      	b.n	8009476 <_strtol_l.isra.0+0x2e>
 80094e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80094e6:	2b19      	cmp	r3, #25
 80094e8:	d801      	bhi.n	80094ee <_strtol_l.isra.0+0xa6>
 80094ea:	3c37      	subs	r4, #55	; 0x37
 80094ec:	e7e2      	b.n	80094b4 <_strtol_l.isra.0+0x6c>
 80094ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80094f2:	2b19      	cmp	r3, #25
 80094f4:	d804      	bhi.n	8009500 <_strtol_l.isra.0+0xb8>
 80094f6:	3c57      	subs	r4, #87	; 0x57
 80094f8:	e7dc      	b.n	80094b4 <_strtol_l.isra.0+0x6c>
 80094fa:	f04f 37ff 	mov.w	r7, #4294967295
 80094fe:	e7e5      	b.n	80094cc <_strtol_l.isra.0+0x84>
 8009500:	1c7b      	adds	r3, r7, #1
 8009502:	d108      	bne.n	8009516 <_strtol_l.isra.0+0xce>
 8009504:	2322      	movs	r3, #34	; 0x22
 8009506:	f8c8 3000 	str.w	r3, [r8]
 800950a:	4608      	mov	r0, r1
 800950c:	f1ba 0f00 	cmp.w	sl, #0
 8009510:	d107      	bne.n	8009522 <_strtol_l.isra.0+0xda>
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	b102      	cbz	r2, 800951a <_strtol_l.isra.0+0xd2>
 8009518:	4240      	negs	r0, r0
 800951a:	f1ba 0f00 	cmp.w	sl, #0
 800951e:	d0f8      	beq.n	8009512 <_strtol_l.isra.0+0xca>
 8009520:	b10f      	cbz	r7, 8009526 <_strtol_l.isra.0+0xde>
 8009522:	f105 39ff 	add.w	r9, r5, #4294967295
 8009526:	f8ca 9000 	str.w	r9, [sl]
 800952a:	e7f2      	b.n	8009512 <_strtol_l.isra.0+0xca>
 800952c:	2430      	movs	r4, #48	; 0x30
 800952e:	2e00      	cmp	r6, #0
 8009530:	d1af      	bne.n	8009492 <_strtol_l.isra.0+0x4a>
 8009532:	2608      	movs	r6, #8
 8009534:	e7ad      	b.n	8009492 <_strtol_l.isra.0+0x4a>
 8009536:	2c30      	cmp	r4, #48	; 0x30
 8009538:	d0a3      	beq.n	8009482 <_strtol_l.isra.0+0x3a>
 800953a:	260a      	movs	r6, #10
 800953c:	e7a9      	b.n	8009492 <_strtol_l.isra.0+0x4a>
	...

08009540 <_strtol_r>:
 8009540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009542:	4c06      	ldr	r4, [pc, #24]	; (800955c <_strtol_r+0x1c>)
 8009544:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_strtol_r+0x20>)
 8009546:	6824      	ldr	r4, [r4, #0]
 8009548:	6a24      	ldr	r4, [r4, #32]
 800954a:	2c00      	cmp	r4, #0
 800954c:	bf08      	it	eq
 800954e:	462c      	moveq	r4, r5
 8009550:	9400      	str	r4, [sp, #0]
 8009552:	f7ff ff79 	bl	8009448 <_strtol_l.isra.0>
 8009556:	b003      	add	sp, #12
 8009558:	bd30      	pop	{r4, r5, pc}
 800955a:	bf00      	nop
 800955c:	2000003c 	.word	0x2000003c
 8009560:	200000a0 	.word	0x200000a0

08009564 <_strtoul_l.isra.0>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	4680      	mov	r8, r0
 800956a:	4689      	mov	r9, r1
 800956c:	4692      	mov	sl, r2
 800956e:	461e      	mov	r6, r3
 8009570:	460f      	mov	r7, r1
 8009572:	463d      	mov	r5, r7
 8009574:	9808      	ldr	r0, [sp, #32]
 8009576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800957a:	f000 f8b9 	bl	80096f0 <__locale_ctype_ptr_l>
 800957e:	4420      	add	r0, r4
 8009580:	7843      	ldrb	r3, [r0, #1]
 8009582:	f013 0308 	ands.w	r3, r3, #8
 8009586:	d130      	bne.n	80095ea <_strtoul_l.isra.0+0x86>
 8009588:	2c2d      	cmp	r4, #45	; 0x2d
 800958a:	d130      	bne.n	80095ee <_strtoul_l.isra.0+0x8a>
 800958c:	787c      	ldrb	r4, [r7, #1]
 800958e:	1cbd      	adds	r5, r7, #2
 8009590:	2101      	movs	r1, #1
 8009592:	2e00      	cmp	r6, #0
 8009594:	d05c      	beq.n	8009650 <_strtoul_l.isra.0+0xec>
 8009596:	2e10      	cmp	r6, #16
 8009598:	d109      	bne.n	80095ae <_strtoul_l.isra.0+0x4a>
 800959a:	2c30      	cmp	r4, #48	; 0x30
 800959c:	d107      	bne.n	80095ae <_strtoul_l.isra.0+0x4a>
 800959e:	782b      	ldrb	r3, [r5, #0]
 80095a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095a4:	2b58      	cmp	r3, #88	; 0x58
 80095a6:	d14e      	bne.n	8009646 <_strtoul_l.isra.0+0xe2>
 80095a8:	786c      	ldrb	r4, [r5, #1]
 80095aa:	2610      	movs	r6, #16
 80095ac:	3502      	adds	r5, #2
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295
 80095b2:	2300      	movs	r3, #0
 80095b4:	fbb2 f2f6 	udiv	r2, r2, r6
 80095b8:	fb06 fc02 	mul.w	ip, r6, r2
 80095bc:	ea6f 0c0c 	mvn.w	ip, ip
 80095c0:	4618      	mov	r0, r3
 80095c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80095c6:	2f09      	cmp	r7, #9
 80095c8:	d817      	bhi.n	80095fa <_strtoul_l.isra.0+0x96>
 80095ca:	463c      	mov	r4, r7
 80095cc:	42a6      	cmp	r6, r4
 80095ce:	dd23      	ble.n	8009618 <_strtoul_l.isra.0+0xb4>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	db1e      	blt.n	8009612 <_strtoul_l.isra.0+0xae>
 80095d4:	4282      	cmp	r2, r0
 80095d6:	d31c      	bcc.n	8009612 <_strtoul_l.isra.0+0xae>
 80095d8:	d101      	bne.n	80095de <_strtoul_l.isra.0+0x7a>
 80095da:	45a4      	cmp	ip, r4
 80095dc:	db19      	blt.n	8009612 <_strtoul_l.isra.0+0xae>
 80095de:	fb00 4006 	mla	r0, r0, r6, r4
 80095e2:	2301      	movs	r3, #1
 80095e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095e8:	e7eb      	b.n	80095c2 <_strtoul_l.isra.0+0x5e>
 80095ea:	462f      	mov	r7, r5
 80095ec:	e7c1      	b.n	8009572 <_strtoul_l.isra.0+0xe>
 80095ee:	2c2b      	cmp	r4, #43	; 0x2b
 80095f0:	bf04      	itt	eq
 80095f2:	1cbd      	addeq	r5, r7, #2
 80095f4:	787c      	ldrbeq	r4, [r7, #1]
 80095f6:	4619      	mov	r1, r3
 80095f8:	e7cb      	b.n	8009592 <_strtoul_l.isra.0+0x2e>
 80095fa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80095fe:	2f19      	cmp	r7, #25
 8009600:	d801      	bhi.n	8009606 <_strtoul_l.isra.0+0xa2>
 8009602:	3c37      	subs	r4, #55	; 0x37
 8009604:	e7e2      	b.n	80095cc <_strtoul_l.isra.0+0x68>
 8009606:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800960a:	2f19      	cmp	r7, #25
 800960c:	d804      	bhi.n	8009618 <_strtoul_l.isra.0+0xb4>
 800960e:	3c57      	subs	r4, #87	; 0x57
 8009610:	e7dc      	b.n	80095cc <_strtoul_l.isra.0+0x68>
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	e7e5      	b.n	80095e4 <_strtoul_l.isra.0+0x80>
 8009618:	2b00      	cmp	r3, #0
 800961a:	da09      	bge.n	8009630 <_strtoul_l.isra.0+0xcc>
 800961c:	2322      	movs	r3, #34	; 0x22
 800961e:	f8c8 3000 	str.w	r3, [r8]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	f1ba 0f00 	cmp.w	sl, #0
 800962a:	d107      	bne.n	800963c <_strtoul_l.isra.0+0xd8>
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009630:	b101      	cbz	r1, 8009634 <_strtoul_l.isra.0+0xd0>
 8009632:	4240      	negs	r0, r0
 8009634:	f1ba 0f00 	cmp.w	sl, #0
 8009638:	d0f8      	beq.n	800962c <_strtoul_l.isra.0+0xc8>
 800963a:	b10b      	cbz	r3, 8009640 <_strtoul_l.isra.0+0xdc>
 800963c:	f105 39ff 	add.w	r9, r5, #4294967295
 8009640:	f8ca 9000 	str.w	r9, [sl]
 8009644:	e7f2      	b.n	800962c <_strtoul_l.isra.0+0xc8>
 8009646:	2430      	movs	r4, #48	; 0x30
 8009648:	2e00      	cmp	r6, #0
 800964a:	d1b0      	bne.n	80095ae <_strtoul_l.isra.0+0x4a>
 800964c:	2608      	movs	r6, #8
 800964e:	e7ae      	b.n	80095ae <_strtoul_l.isra.0+0x4a>
 8009650:	2c30      	cmp	r4, #48	; 0x30
 8009652:	d0a4      	beq.n	800959e <_strtoul_l.isra.0+0x3a>
 8009654:	260a      	movs	r6, #10
 8009656:	e7aa      	b.n	80095ae <_strtoul_l.isra.0+0x4a>

08009658 <_strtoul_r>:
 8009658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965a:	4c06      	ldr	r4, [pc, #24]	; (8009674 <_strtoul_r+0x1c>)
 800965c:	4d06      	ldr	r5, [pc, #24]	; (8009678 <_strtoul_r+0x20>)
 800965e:	6824      	ldr	r4, [r4, #0]
 8009660:	6a24      	ldr	r4, [r4, #32]
 8009662:	2c00      	cmp	r4, #0
 8009664:	bf08      	it	eq
 8009666:	462c      	moveq	r4, r5
 8009668:	9400      	str	r4, [sp, #0]
 800966a:	f7ff ff7b 	bl	8009564 <_strtoul_l.isra.0>
 800966e:	b003      	add	sp, #12
 8009670:	bd30      	pop	{r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	2000003c 	.word	0x2000003c
 8009678:	200000a0 	.word	0x200000a0

0800967c <__submore>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009688:	4299      	cmp	r1, r3
 800968a:	d11d      	bne.n	80096c8 <__submore+0x4c>
 800968c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009690:	f7ff f814 	bl	80086bc <_malloc_r>
 8009694:	b918      	cbnz	r0, 800969e <__submore+0x22>
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80096a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80096a8:	6360      	str	r0, [r4, #52]	; 0x34
 80096aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80096ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80096b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80096b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80096ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80096be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80096c2:	6020      	str	r0, [r4, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7e8      	b.n	800969a <__submore+0x1e>
 80096c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80096ca:	0077      	lsls	r7, r6, #1
 80096cc:	463a      	mov	r2, r7
 80096ce:	f000 f857 	bl	8009780 <_realloc_r>
 80096d2:	4605      	mov	r5, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0de      	beq.n	8009696 <__submore+0x1a>
 80096d8:	eb00 0806 	add.w	r8, r0, r6
 80096dc:	4601      	mov	r1, r0
 80096de:	4632      	mov	r2, r6
 80096e0:	4640      	mov	r0, r8
 80096e2:	f000 f829 	bl	8009738 <memcpy>
 80096e6:	f8c4 8000 	str.w	r8, [r4]
 80096ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80096ee:	e7e9      	b.n	80096c4 <__submore+0x48>

080096f0 <__locale_ctype_ptr_l>:
 80096f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80096f4:	4770      	bx	lr
	...

080096f8 <__locale_ctype_ptr>:
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <__locale_ctype_ptr+0x14>)
 80096fa:	4a05      	ldr	r2, [pc, #20]	; (8009710 <__locale_ctype_ptr+0x18>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bf08      	it	eq
 8009704:	4613      	moveq	r3, r2
 8009706:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800970a:	4770      	bx	lr
 800970c:	2000003c 	.word	0x2000003c
 8009710:	200000a0 	.word	0x200000a0

08009714 <__ascii_mbtowc>:
 8009714:	b082      	sub	sp, #8
 8009716:	b901      	cbnz	r1, 800971a <__ascii_mbtowc+0x6>
 8009718:	a901      	add	r1, sp, #4
 800971a:	b142      	cbz	r2, 800972e <__ascii_mbtowc+0x1a>
 800971c:	b14b      	cbz	r3, 8009732 <__ascii_mbtowc+0x1e>
 800971e:	7813      	ldrb	r3, [r2, #0]
 8009720:	600b      	str	r3, [r1, #0]
 8009722:	7812      	ldrb	r2, [r2, #0]
 8009724:	1c10      	adds	r0, r2, #0
 8009726:	bf18      	it	ne
 8009728:	2001      	movne	r0, #1
 800972a:	b002      	add	sp, #8
 800972c:	4770      	bx	lr
 800972e:	4610      	mov	r0, r2
 8009730:	e7fb      	b.n	800972a <__ascii_mbtowc+0x16>
 8009732:	f06f 0001 	mvn.w	r0, #1
 8009736:	e7f8      	b.n	800972a <__ascii_mbtowc+0x16>

08009738 <memcpy>:
 8009738:	b510      	push	{r4, lr}
 800973a:	1e43      	subs	r3, r0, #1
 800973c:	440a      	add	r2, r1
 800973e:	4291      	cmp	r1, r2
 8009740:	d100      	bne.n	8009744 <memcpy+0xc>
 8009742:	bd10      	pop	{r4, pc}
 8009744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800974c:	e7f7      	b.n	800973e <memcpy+0x6>

0800974e <memmove>:
 800974e:	4288      	cmp	r0, r1
 8009750:	b510      	push	{r4, lr}
 8009752:	eb01 0302 	add.w	r3, r1, r2
 8009756:	d807      	bhi.n	8009768 <memmove+0x1a>
 8009758:	1e42      	subs	r2, r0, #1
 800975a:	4299      	cmp	r1, r3
 800975c:	d00a      	beq.n	8009774 <memmove+0x26>
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009766:	e7f8      	b.n	800975a <memmove+0xc>
 8009768:	4283      	cmp	r3, r0
 800976a:	d9f5      	bls.n	8009758 <memmove+0xa>
 800976c:	1881      	adds	r1, r0, r2
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	42d3      	cmn	r3, r2
 8009772:	d100      	bne.n	8009776 <memmove+0x28>
 8009774:	bd10      	pop	{r4, pc}
 8009776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800977a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800977e:	e7f7      	b.n	8009770 <memmove+0x22>

08009780 <_realloc_r>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	4607      	mov	r7, r0
 8009784:	4614      	mov	r4, r2
 8009786:	460e      	mov	r6, r1
 8009788:	b921      	cbnz	r1, 8009794 <_realloc_r+0x14>
 800978a:	4611      	mov	r1, r2
 800978c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009790:	f7fe bf94 	b.w	80086bc <_malloc_r>
 8009794:	b922      	cbnz	r2, 80097a0 <_realloc_r+0x20>
 8009796:	f7fe ff43 	bl	8008620 <_free_r>
 800979a:	4625      	mov	r5, r4
 800979c:	4628      	mov	r0, r5
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	f000 f821 	bl	80097e6 <_malloc_usable_size_r>
 80097a4:	42a0      	cmp	r0, r4
 80097a6:	d20f      	bcs.n	80097c8 <_realloc_r+0x48>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4638      	mov	r0, r7
 80097ac:	f7fe ff86 	bl	80086bc <_malloc_r>
 80097b0:	4605      	mov	r5, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d0f2      	beq.n	800979c <_realloc_r+0x1c>
 80097b6:	4631      	mov	r1, r6
 80097b8:	4622      	mov	r2, r4
 80097ba:	f7ff ffbd 	bl	8009738 <memcpy>
 80097be:	4631      	mov	r1, r6
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7fe ff2d 	bl	8008620 <_free_r>
 80097c6:	e7e9      	b.n	800979c <_realloc_r+0x1c>
 80097c8:	4635      	mov	r5, r6
 80097ca:	e7e7      	b.n	800979c <_realloc_r+0x1c>

080097cc <__ascii_wctomb>:
 80097cc:	b149      	cbz	r1, 80097e2 <__ascii_wctomb+0x16>
 80097ce:	2aff      	cmp	r2, #255	; 0xff
 80097d0:	bf85      	ittet	hi
 80097d2:	238a      	movhi	r3, #138	; 0x8a
 80097d4:	6003      	strhi	r3, [r0, #0]
 80097d6:	700a      	strbls	r2, [r1, #0]
 80097d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80097dc:	bf98      	it	ls
 80097de:	2001      	movls	r0, #1
 80097e0:	4770      	bx	lr
 80097e2:	4608      	mov	r0, r1
 80097e4:	4770      	bx	lr

080097e6 <_malloc_usable_size_r>:
 80097e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ea:	1f18      	subs	r0, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfbc      	itt	lt
 80097f0:	580b      	ldrlt	r3, [r1, r0]
 80097f2:	18c0      	addlt	r0, r0, r3
 80097f4:	4770      	bx	lr
	...

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
